cscope 15 $HOME/mysql/Lab/bpt/src -q 0000000156 0000022747
	@bpt.c

4 
	#Vîsi⁄
 "1.14"

	)

55 
	~"b±.h
"

69 
	g‹dî
 = 
DEFAULT_ORDER
;

76 
node
 * 
	gqueue
 = 
NULL
;

83 
boﬁ
 
	gvîbo£_ouçut
 = 
Ál£
;

88 
FILE
 *
	gÂ
;

94 
‰ì_li°
 *
	ghód
 = 
NULL
;

102 
	$li˚n£_nŸi˚
( ) {

103 
	`¥ötf
("bpt version %s -- Copyright (C) 2010 Amittai Aviram "

104 "hâp://www.amôèi.com\n", 
Vîsi⁄
);

105 
	`¥ötf
("ThisÖrogram comes with ABSOLUTELY NO WARRANTY; for details "

109 
	}
}

114 
	$¥öt_li˚n£
–
li˚n£_∑π
 ) {

115 
°¨t
, 
íd
, 
löe
;

116 
FILE
 * 
Â
;

117 
buf„r
[0x100];

119 
li˚n£_∑π
) {

120 
LICENSE_WARRANTEE
:

121 
°¨t
 = 
LICENSE_WARRANTEE_START
;

122 
íd
 = 
LICENSE_WARRANTEE_END
;

124 
LICENSE_CONDITIONS
:

125 
°¨t
 = 
LICENSE_CONDITIONS_START
;

126 
íd
 = 
LICENSE_CONDITIONS_END
;

132 
Â
 = 
	`f›í
(
LICENSE_FILE
, "r");

133 i‡(
Â
 =
NULL
) {

134 
	`≥º‹
("print_license: fopen");

135 
	`exô
(
EXIT_FAILURE
);

137 
löe
 = 0;Üöê< 
°¨t
;Üine++)

138 
	`fgës
(
buf„r
, (buf„r), 
Â
);

139  ; 
löe
 < 
íd
;Üine++) {

140 
	`fgës
(
buf„r
, (buf„r), 
Â
);

141 
	`¥ötf
("%s", 
buf„r
);

143 
	`f˛o£
(
Â
);

144 
	}
}

149 
	$ußge_1
( ) {

150 
	`¥ötf
("B+ Tªêo‡Ordî %d.\n", 
‹dî
);

151 
	`¥ötf
("Following Silberschatz, Korth, Sidarshan, Database Concepts, "

156 
	`¥ötf
("(%d <‹dî <%d).\n", 
MIN_ORDER
, 
MAX_ORDER
);

157 
	`¥ötf
("To start with input fromá file ofÇewline-delimited integers, \n"

160 
	}
}

165 
	$ußge_2
( ) {

166 
	`¥ötf
("Enterány ofÅhe following commandsáfterÅheÖrompt > :\n"

182 
	}
}

187 
	$ußge_3
( ) {

188 
	`¥ötf
("Usage: ./bpt [<order>]\n");

189 
	`¥ötf
("\twhîê%d <‹dî <%d .\n", 
MIN_ORDER
, 
MAX_ORDER
);

190 
	}
}

196 
	$íqueue
–
node
 * 
√w_node
 ) {

197 
node
 * 
c
;

198 i‡(
queue
 =
NULL
) {

199 
queue
 = 
√w_node
;

200 
queue
->
√xt
 = 
NULL
;

203 
c
 = 
queue
;

204 
c
->
√xt
 !
NULL
) {

205 
c
 = c->
√xt
;

207 
c
->
√xt
 = 
√w_node
;

208 
√w_node
->
√xt
 = 
NULL
;

210 
	}
}

216 
node
 * 
	$dequeue
( ) {

217 
node
 * 
n
 = 
queue
;

218 
queue
 = queue->
√xt
;

219 
n
->
√xt
 = 
NULL
;

220  
n
;

221 
	}
}

228 
	$¥öt_Àaves
–
node
 * 
roŸ
 ) {

229 
i
;

230 
node
 * 
c
 = 
roŸ
;

231 i‡(
roŸ
 =
NULL
) {

232 
	`¥ötf
("EmptyÅree.\n");

235 !
c
->
is_Àaf
)

236 
c
 = c->
poöãrs
[0];

237 
åue
) {

238 
i
 = 0; i < 
c
->
num_keys
; i++) {

239 i‡(
vîbo£_ouçut
)

240 
	`¥ötf
("%lx ", ()
c
->
poöãrs
[
i
]);

241 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

243 i‡(
vîbo£_ouçut
)

244 
	`¥ötf
("%lx ", ()
c
->
poöãrs
[
‹dî
 - 1]);

245 i‡(
c
->
poöãrs
[
‹dî
 - 1] !
NULL
) {

246 
	`¥ötf
(" | ");

247 
c
 = c->
poöãrs
[
‹dî
 - 1];

252 
	`¥ötf
("\n");

253 
	}
}

260 
	$height
–
node
 * 
roŸ
 ) {

261 
h
 = 0;

262 
node
 * 
c
 = 
roŸ
;

263 !
c
->
is_Àaf
) {

264 
c
 = c->
poöãrs
[0];

265 
h
++;

267  
h
;

268 
	}
}

274 
	$∑th_to_roŸ
–
node
 * 
roŸ
,Çodê* 
chûd
 ) {

275 
Àngth
 = 0;

276 
node
 * 
c
 = 
chûd
;

277 
c
 !
roŸ
) {

278 
c
 = c->
∑ª¡
;

279 
Àngth
++;

281  
Àngth
;

282 
	}
}

294 
	$¥öt_åì
–
node
 * 
roŸ
 ) {

296 
node
 * 
n
 = 
NULL
;

297 
i
 = 0;

298 
ønk
 = 0;

299 
√w_ønk
 = 0;

301 i‡(
roŸ
 =
NULL
) {

302 
	`¥ötf
("EmptyÅree.\n");

305 
queue
 = 
NULL
;

306 
	`íqueue
(
roŸ
);

307  
queue
 !
NULL
 ) {

308 
n
 = 
	`dequeue
();

309 i‡(
n
->
∑ª¡
 !
NULL
 &&Ç =n->∑ª¡->
poöãrs
[0]) {

310 
√w_ønk
 = 
	`∑th_to_roŸ
–
roŸ
, 
n
 );

311 i‡(
√w_ønk
 !
ønk
) {

312 
ønk
 = 
√w_ønk
;

313 
	`¥ötf
("\n");

316 i‡(
vîbo£_ouçut
)

317 
	`¥ötf
("(%lx)", ()
n
);

318 
i
 = 0; i < 
n
->
num_keys
; i++) {

319 i‡(
vîbo£_ouçut
)

320 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[
i
]);

321 
	`¥ötf
("%d ", 
n
->
keys
[
i
]);

323 i‡(!
n
->
is_Àaf
)

324 
i
 = 0; i <
n
->
num_keys
; i++)

325 
	`íqueue
(
n
->
poöãrs
[
i
]);

326 i‡(
vîbo£_ouçut
) {

327 i‡(
n
->
is_Àaf
)

328 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[
‹dî
 - 1]);

330 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[n->
num_keys
]);

332 
	`¥ötf
("| ");

334 
	`¥ötf
("\n");

335 
	}
}

341 
	$föd_™d_¥öt
(
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
) {

342 
ªc‹d
 * 
r
 = 
	`föd
(
roŸ
, 
key
, 
vîbo£
);

343 i‡(
r
 =
NULL
)

344 
	`¥ötf
("Rec‹dÇŸ found undî key %d.\n", 
key
);

346 
	`¥ötf
("Recordát %lx -- key %d, value %d.\n",

347 ()
r
, 
key
,Ñ->
vÆue
);

348 
	}
}

354 
	$föd_™d_¥öt_ønge
–
node
 * 
roŸ
, 
key_°¨t
, 
key_íd
,

355 
boﬁ
 
vîbo£
 ) {

356 
i
;

357 
¨øy_size
 = 
key_íd
 - 
key_°¨t
 + 1;

358 
ªtu∫ed_keys
[
¨øy_size
];

359 * 
ªtu∫ed_poöãrs
[
¨øy_size
];

360 
num_found
 = 
	`föd_ønge
–
roŸ
, 
key_°¨t
, 
key_íd
, 
vîbo£
,

361 
ªtu∫ed_keys
, 
ªtu∫ed_poöãrs
 );

362 i‡(!
num_found
)

363 
	`¥ötf
("None found.\n");

365 
i
 = 0; i < 
num_found
; i++)

366 
	`¥ötf
("Key: %d Location: %lx Value: %d\n",

367 
ªtu∫ed_keys
[
i
],

368 ()
ªtu∫ed_poöãrs
[
i
],

369 ((
ªc‹d
 *)

370 
ªtu∫ed_poöãrs
[
i
])->
vÆue
);

372 
	}
}

380 
	$föd_ønge
–
node
 * 
roŸ
, 
key_°¨t
, 
key_íd
, 
boﬁ
 
vîbo£
,

381 
ªtu∫ed_keys
[], * 
ªtu∫ed_poöãrs
[]) {

382 
i
, 
num_found
;

383 
num_found
 = 0;

384 
node
 * 
n
 = 
	`föd_Àaf
–
roŸ
, 
key_°¨t
, 
vîbo£
 );

385 i‡(
n
 =
NULL
)  0;

386 
i
 = 0; i < 
n
->
num_keys
 &&Ç->
keys
[i] < 
key_°¨t
; i++) ;

387 i‡(
i
 =
n
->
num_keys
)  0;

388 
n
 !
NULL
) {

389  ; 
i
 < 
n
->
num_keys
 &&Ç->
keys
[i] <
key_íd
; i++) {

390 
ªtu∫ed_keys
[
num_found
] = 
n
->
keys
[
i
];

391 
ªtu∫ed_poöãrs
[
num_found
] = 
n
->
poöãrs
[
i
];

392 
num_found
++;

394 
n
 =Ç->
poöãrs
[
‹dî
 - 1];

395 
i
 = 0;

397  
num_found
;

398 
	}
}

406 
node
 * 
	$föd_Àaf
–
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
 ) {

407 
i
 = 0;

408 
node
 * 
c
 = 
roŸ
;

409 i‡(
c
 =
NULL
) {

410 i‡(
vîbo£
)

411 
	`¥ötf
("EmptyÅree.\n");

412  
c
;

414 !
c
->
is_Àaf
) {

415 i‡(
vîbo£
) {

416 
	`¥ötf
("[");

417 
i
 = 0; i < 
c
->
num_keys
 - 1; i++)

418 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

419 
	`¥ötf
("%d] ", 
c
->
keys
[
i
]);

421 
i
 = 0;

422 
i
 < 
c
->
num_keys
) {

423 i‡(
key
 >
c
->
keys
[
i
]) i++;

426 i‡(
vîbo£
)

427 
	`¥ötf
("%d ->\n", 
i
);

428 
c
 = (
node
 *)c->
poöãrs
[
i
];

430 i‡(
vîbo£
) {

431 
	`¥ötf
("Leaf [");

432 
i
 = 0; i < 
c
->
num_keys
 - 1; i++)

433 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

434 
	`¥ötf
("%d] ->\n", 
c
->
keys
[
i
]);

436  
c
;

437 
	}
}

443 
ªc‹d
 * 
	$föd
–
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
 ) {

444 
i
 = 0;

445 
node
 * 
c
 = 
	`föd_Àaf
–
roŸ
, 
key
, 
vîbo£
 );

446 i‡(
c
 =
NULL
)  NULL;

447 
i
 = 0; i < 
c
->
num_keys
; i++)

448 i‡(
c
->
keys
[
i
] =
key
) ;

449 i‡(
i
 =
c
->
num_keys
)

450  
NULL
;

452  (
ªc‹d
 *)
c
->
poöãrs
[
i
];

453 
	}
}

458 
	$cut
–
Àngth
 ) {

459 i‡(
Àngth
 % 2 == 0)

460  
Àngth
/2;

462  
Àngth
/2 + 1;

463 
	}
}

471 
ªc‹d
 * 
	$make_ªc‹d
(
vÆue
) {

472 
ªc‹d
 * 
√w_ªc‹d
 = (ªc‹d *)
	`mÆloc
((record));

473 i‡(
√w_ªc‹d
 =
NULL
) {

474 
	`≥º‹
("Record creation.");

475 
	`exô
(
EXIT_FAILURE
);

478 
√w_ªc‹d
->
vÆue
 = value;

480  
√w_ªc‹d
;

481 
	}
}

487 
node
 * 
	$make_node
( ) {

488 
node
 * 
√w_node
;

489 
√w_node
 = 
	`mÆloc
((
node
));

490 i‡(
√w_node
 =
NULL
) {

491 
	`≥º‹
("Node creation.");

492 
	`exô
(
EXIT_FAILURE
);

494 
√w_node
->
keys
 = 
	`mÆloc
–(
‹dî
 - 1) * () );

495 i‡(
√w_node
->
keys
 =
NULL
) {

496 
	`≥º‹
("NewÇode keysárray.");

497 
	`exô
(
EXIT_FAILURE
);

499 
√w_node
->
poöãrs
 = 
	`mÆloc
–
‹dî
 * (*) );

500 i‡(
√w_node
->
poöãrs
 =
NULL
) {

501 
	`≥º‹
("NewÇodeÖointersárray.");

502 
	`exô
(
EXIT_FAILURE
);

504 
√w_node
->
is_Àaf
 = 
Ál£
;

505 
√w_node
->
num_keys
 = 0;

506 
√w_node
->
∑ª¡
 = 
NULL
;

507 
√w_node
->
√xt
 = 
NULL
;

508  
√w_node
;

509 
	}
}

514 
node
 * 
	$make_Àaf
( ) {

515 
node
 * 
Àaf
 = 
	`make_node
();

516 
Àaf
->
is_Àaf
 = 
åue
;

517  
Àaf
;

518 
	}
}

525 
	$gë_À·_ödex
(
node
 * 
∑ª¡
,Çodê* 
À·
) {

527 
À·_ödex
 = 0;

528 
À·_ödex
 <
∑ª¡
->
num_keys
 &&

529 
∑ª¡
->
poöãrs
[
À·_ödex
] !
À·
)

530 
À·_ödex
++;

531  
À·_ödex
;

532 
	}
}

538 
node
 * 
	$ö£π_öto_Àaf
–
node
 * 
Àaf
, 
key
, 
ªc‹d
 * 
poöãr
 ) {

540 
i
, 
ö£πi⁄_poöt
;

542 
ö£πi⁄_poöt
 = 0;

543 
ö£πi⁄_poöt
 < 
Àaf
->
num_keys
 &&Üóf->
keys
[ö£πi⁄_poöt] < 
key
)

544 
ö£πi⁄_poöt
++;

546 
i
 = 
Àaf
->
num_keys
; i > 
ö£πi⁄_poöt
; i--) {

547 
Àaf
->
keys
[
i
] =Üeaf->keys[i - 1];

548 
Àaf
->
poöãrs
[
i
] =Üeaf->pointers[i - 1];

550 
Àaf
->
keys
[
ö£πi⁄_poöt
] = 
key
;

551 
Àaf
->
poöãrs
[
ö£πi⁄_poöt
] = 
poöãr
;

552 
Àaf
->
num_keys
++;

553  
Àaf
;

554 
	}
}

562 
node
 * 
	$ö£π_öto_Àaf_a·î_•lôtög
(
node
 * 
roŸ
,Çodê* 
Àaf
, 
key
, 
ªc‹d
 * 
poöãr
) {

564 
node
 * 
√w_Àaf
;

565 * 
ãmp_keys
;

566 ** 
ãmp_poöãrs
;

567 
ö£πi⁄_ödex
, 
•lô
, 
√w_key
, 
i
, 
j
;

569 
√w_Àaf
 = 
	`make_Àaf
();

571 
ãmp_keys
 = 
	`mÆloc
–
‹dî
 * () );

572 i‡(
ãmp_keys
 =
NULL
) {

573 
	`≥º‹
("Temporary keysárray.");

574 
	`exô
(
EXIT_FAILURE
);

577 
ãmp_poöãrs
 = 
	`mÆloc
–
‹dî
 * (*) );

578 i‡(
ãmp_poöãrs
 =
NULL
) {

579 
	`≥º‹
("TemporaryÖointersárray.");

580 
	`exô
(
EXIT_FAILURE
);

583 
ö£πi⁄_ödex
 = 0;

584 
ö£πi⁄_ödex
 < 
‹dî
 - 1 && 
Àaf
->
keys
[ö£πi⁄_ödex] < 
key
)

585 
ö£πi⁄_ödex
++;

587 
i
 = 0, 
j
 = 0; i < 
Àaf
->
num_keys
; i++, j++) {

588 i‡(
j
 =
ö£πi⁄_ödex
) j++;

589 
ãmp_keys
[
j
] = 
Àaf
->
keys
[
i
];

590 
ãmp_poöãrs
[
j
] = 
Àaf
->
poöãrs
[
i
];

593 
ãmp_keys
[
ö£πi⁄_ödex
] = 
key
;

594 
ãmp_poöãrs
[
ö£πi⁄_ödex
] = 
poöãr
;

596 
Àaf
->
num_keys
 = 0;

598 
•lô
 = 
	`cut
(
‹dî
 - 1);

600 
i
 = 0; i < 
•lô
; i++) {

601 
Àaf
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

602 
Àaf
->
keys
[
i
] = 
ãmp_keys
[i];

603 
Àaf
->
num_keys
++;

606 
i
 = 
•lô
, 
j
 = 0; i < 
‹dî
; i++, j++) {

607 
√w_Àaf
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

608 
√w_Àaf
->
keys
[
j
] = 
ãmp_keys
[
i
];

609 
√w_Àaf
->
num_keys
++;

612 
	`‰ì
(
ãmp_poöãrs
);

613 
	`‰ì
(
ãmp_keys
);

615 
√w_Àaf
->
poöãrs
[
‹dî
 - 1] = 
Àaf
->pointers[order - 1];

616 
Àaf
->
poöãrs
[
‹dî
 - 1] = 
√w_Àaf
;

618 
i
 = 
Àaf
->
num_keys
; i < 
‹dî
 - 1; i++)

619 
Àaf
->
poöãrs
[
i
] = 
NULL
;

620 
i
 = 
√w_Àaf
->
num_keys
; i < 
‹dî
 - 1; i++)

621 
√w_Àaf
->
poöãrs
[
i
] = 
NULL
;

623 
√w_Àaf
->
∑ª¡
 = 
Àaf
->parent;

624 
√w_key
 = 
√w_Àaf
->
keys
[0];

626  
	`ö£π_öto_∑ª¡
(
roŸ
, 
Àaf
, 
√w_key
, 
√w_Àaf
);

627 
	}
}

634 
node
 * 
	$ö£π_öto_node
(
node
 * 
roŸ
,Çodê* 
n
,

635 
À·_ödex
, 
key
, 
node
 * 
right
) {

636 
i
;

638 
i
 = 
n
->
num_keys
; i > 
À·_ödex
; i--) {

639 
n
->
poöãrs
[
i
 + 1] =Ç->pointers[i];

640 
n
->
keys
[
i
] =Ç->keys[i - 1];

642 
n
->
poöãrs
[
À·_ödex
 + 1] = 
right
;

643 
n
->
keys
[
À·_ödex
] = 
key
;

644 
n
->
num_keys
++;

645  
roŸ
;

646 
	}
}

653 
node
 * 
	$ö£π_öto_node_a·î_•lôtög
(
node
 * 
roŸ
,Çodê* 
ﬁd_node
, 
À·_ödex
,

654 
key
, 
node
 * 
right
) {

656 
i
, 
j
, 
•lô
, 
k_¥ime
;

657 
node
 * 
√w_node
, * 
chûd
;

658 * 
ãmp_keys
;

659 
node
 ** 
ãmp_poöãrs
;

670 
ãmp_poöãrs
 = 
	`mÆloc
–(
‹dî
 + 1Ë* (
node
 *) );

671 i‡(
ãmp_poöãrs
 =
NULL
) {

672 
	`≥º‹
("TemporaryÖointersárray for splittingÇodes.");

673 
	`exô
(
EXIT_FAILURE
);

675 
ãmp_keys
 = 
	`mÆloc
–
‹dî
 * () );

676 i‡(
ãmp_keys
 =
NULL
) {

677 
	`≥º‹
("Temporary keysárray for splittingÇodes.");

678 
	`exô
(
EXIT_FAILURE
);

681 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
 + 1; i++, j++) {

682 i‡(
j
 =
À·_ödex
 + 1) j++;

683 
ãmp_poöãrs
[
j
] = 
ﬁd_node
->
poöãrs
[
i
];

686 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
; i++, j++) {

687 i‡(
j
 =
À·_ödex
) j++;

688 
ãmp_keys
[
j
] = 
ﬁd_node
->
keys
[
i
];

691 
ãmp_poöãrs
[
À·_ödex
 + 1] = 
right
;

692 
ãmp_keys
[
À·_ödex
] = 
key
;

698 
•lô
 = 
	`cut
(
‹dî
);

699 
√w_node
 = 
	`make_node
();

700 
ﬁd_node
->
num_keys
 = 0;

701 
i
 = 0; i < 
•lô
 - 1; i++) {

702 
ﬁd_node
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

703 
ﬁd_node
->
keys
[
i
] = 
ãmp_keys
[i];

704 
ﬁd_node
->
num_keys
++;

706 
ﬁd_node
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

707 
k_¥ime
 = 
ãmp_keys
[
•lô
 - 1];

708 ++
i
, 
j
 = 0; i < 
‹dî
; i++, j++) {

709 
√w_node
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

710 
√w_node
->
keys
[
j
] = 
ãmp_keys
[
i
];

711 
√w_node
->
num_keys
++;

713 
√w_node
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

714 
	`‰ì
(
ãmp_poöãrs
);

715 
	`‰ì
(
ãmp_keys
);

716 
√w_node
->
∑ª¡
 = 
ﬁd_node
->parent;

717 
i
 = 0; i <
√w_node
->
num_keys
; i++) {

718 
chûd
 = 
√w_node
->
poöãrs
[
i
];

719 
chûd
->
∑ª¡
 = 
√w_node
;

727  
	`ö£π_öto_∑ª¡
(
roŸ
, 
ﬁd_node
, 
k_¥ime
, 
√w_node
);

728 
	}
}

735 
node
 * 
	$ö£π_öto_∑ª¡
(
node
 * 
roŸ
,Çodê* 
À·
, 
key
,Çodê* 
right
) {

737 
À·_ödex
;

738 
node
 * 
∑ª¡
;

740 
∑ª¡
 = 
À·
->parent;

744 i‡(
∑ª¡
 =
NULL
)

745  
	`ö£π_öto_√w_roŸ
(
À·
, 
key
, 
right
);

755 
À·_ödex
 = 
	`gë_À·_ödex
(
∑ª¡
, 
À·
);

761 i‡(
∑ª¡
->
num_keys
 < 
‹dî
 - 1)

762  
	`ö£π_öto_node
(
roŸ
, 
∑ª¡
, 
À·_ödex
, 
key
, 
right
);

768  
	`ö£π_öto_node_a·î_•lôtög
(
roŸ
, 
∑ª¡
, 
À·_ödex
, 
key
, 
right
);

769 
	}
}

776 
node
 * 
	$ö£π_öto_√w_roŸ
(
node
 * 
À·
, 
key
,Çodê* 
right
) {

778 
node
 * 
roŸ
 = 
	`make_node
();

779 
roŸ
->
keys
[0] = 
key
;

780 
roŸ
->
poöãrs
[0] = 
À·
;

781 
roŸ
->
poöãrs
[1] = 
right
;

782 
roŸ
->
num_keys
++;

783 
roŸ
->
∑ª¡
 = 
NULL
;

784 
À·
->
∑ª¡
 = 
roŸ
;

785 
right
->
∑ª¡
 = 
roŸ
;

786  
roŸ
;

787 
	}
}

794 
node
 * 
	$°¨t_√w_åì
(
key
, 
ªc‹d
 * 
poöãr
) {

796 
node
 * 
roŸ
 = 
	`make_Àaf
();

797 
roŸ
->
keys
[0] = 
key
;

798 
roŸ
->
poöãrs
[0] = 
poöãr
;

799 
roŸ
->
poöãrs
[
‹dî
 - 1] = 
NULL
;

800 
roŸ
->
∑ª¡
 = 
NULL
;

801 
roŸ
->
num_keys
++;

802  
roŸ
;

803 
	}
}

813 
node
 * 
	$ö£π
–
node
 * 
roŸ
, 
key
, 
vÆue
 ) {

815 
ªc‹d
 * 
poöãr
;

816 
node
 * 
Àaf
;

822 i‡(
	`föd
(
roŸ
, 
key
, 
Ál£
Ë!
NULL
)

823  
roŸ
;

828 
poöãr
 = 
	`make_ªc‹d
(
vÆue
);

835 i‡(
roŸ
 =
NULL
)

836  
	`°¨t_√w_åì
(
key
, 
poöãr
);

843 
Àaf
 = 
	`föd_Àaf
(
roŸ
, 
key
, 
Ál£
);

848 i‡(
Àaf
->
num_keys
 < 
‹dî
 - 1) {

849 
Àaf
 = 
	`ö£π_öto_Àaf
÷óf, 
key
, 
poöãr
);

850  
roŸ
;

857  
	`ö£π_öto_Àaf_a·î_•lôtög
(
roŸ
, 
Àaf
, 
key
, 
poöãr
);

858 
	}
}

871 
	$gë_√ighb‹_ödex
–
node
 * 
n
 ) {

873 
i
;

881 
i
 = 0; i <
n
->
∑ª¡
->
num_keys
; i++)

882 i‡(
n
->
∑ª¡
->
poöãrs
[
i
] ==Ç)

883  
i
 - 1;

886 
	`¥ötf
("Search forÇonexistentÖointerÅoÇode inÖarent.\n");

887 
	`¥ötf
("Node: %#lx\n", ()
n
);

888 
	`exô
(
EXIT_FAILURE
);

889 
	}
}

892 
node
 * 
	$ªmove_íåy_‰om_node
(
node
 * 
n
, 
key
,Çodê* 
poöãr
) {

894 
i
, 
num_poöãrs
;

897 
i
 = 0;

898 
n
->
keys
[
i
] !
key
)

899 
i
++;

900 ++
i
; i < 
n
->
num_keys
; i++)

901 
n
->
keys
[
i
 - 1] =Ç->keys[i];

905 
num_poöãrs
 = 
n
->
is_Àaf
 ?Ç->
num_keys
 :Ç->num_keys + 1;

906 
i
 = 0;

907 
n
->
poöãrs
[
i
] !
poöãr
)

908 
i
++;

909 ++
i
; i < 
num_poöãrs
; i++)

910 
n
->
poöãrs
[
i
 - 1] =Ç->pointers[i];

914 
n
->
num_keys
--;

918 i‡(
n
->
is_Àaf
)

919 
i
 = 
n
->
num_keys
; i < 
‹dî
 - 1; i++)

920 
n
->
poöãrs
[
i
] = 
NULL
;

922 
i
 = 
n
->
num_keys
 + 1; i < 
‹dî
; i++)

923 
n
->
poöãrs
[
i
] = 
NULL
;

925  
n
;

926 
	}
}

929 
node
 * 
	$adju°_roŸ
(
node
 * 
roŸ
) {

931 
node
 * 
√w_roŸ
;

938 i‡(
roŸ
->
num_keys
 > 0)

939  
roŸ
;

948 i‡(!
roŸ
->
is_Àaf
) {

949 
√w_roŸ
 = 
roŸ
->
poöãrs
[0];

950 
√w_roŸ
->
∑ª¡
 = 
NULL
;

957 
√w_roŸ
 = 
NULL
;

959 
	`‰ì
(
roŸ
->
keys
);

960 
	`‰ì
(
roŸ
->
poöãrs
);

961 
	`‰ì
(
roŸ
);

963  
√w_roŸ
;

964 
	}
}

973 
node
 * 
	$cﬂÀs˚_nodes
(
node
 * 
roŸ
,Çodê* 
n
,Çodê* 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime
) {

975 
i
, 
j
, 
√ighb‹_ö£πi⁄_ödex
, 
n_íd
;

976 
node
 * 
tmp
;

982 i‡(
√ighb‹_ödex
 == -1) {

983 
tmp
 = 
n
;

984 
n
 = 
√ighb‹
;

985 
√ighb‹
 = 
tmp
;

994 
√ighb‹_ö£πi⁄_ödex
 = 
√ighb‹
->
num_keys
;

1001 i‡(!
n
->
is_Àaf
) {

1006 
√ighb‹
->
keys
[
√ighb‹_ö£πi⁄_ödex
] = 
k_¥ime
;

1007 
√ighb‹
->
num_keys
++;

1010 
n_íd
 = 
n
->
num_keys
;

1012 
i
 = 
√ighb‹_ö£πi⁄_ödex
 + 1, 
j
 = 0; j < 
n_íd
; i++, j++) {

1013 
√ighb‹
->
keys
[
i
] = 
n
->keys[
j
];

1014 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1015 
√ighb‹
->
num_keys
++;

1016 
n
->
num_keys
--;

1023 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1028 
i
 = 0; i < 
√ighb‹
->
num_keys
 + 1; i++) {

1029 
tmp
 = (
node
 *)
√ighb‹
->
poöãrs
[
i
];

1030 
tmp
->
∑ª¡
 = 
√ighb‹
;

1041 
i
 = 
√ighb‹_ö£πi⁄_ödex
, 
j
 = 0; j < 
n
->
num_keys
; i++, j++) {

1042 
√ighb‹
->
keys
[
i
] = 
n
->keys[
j
];

1043 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1044 
√ighb‹
->
num_keys
++;

1046 
√ighb‹
->
poöãrs
[
‹dî
 - 1] = 
n
->pointers[order - 1];

1049 
roŸ
 = 
	`dñëe_íåy
‘oŸ, 
n
->
∑ª¡
, 
k_¥ime
,Ç);

1050 
	`‰ì
(
n
->
keys
);

1051 
	`‰ì
(
n
->
poöãrs
);

1052 
	`‰ì
(
n
);

1053  
roŸ
;

1054 
	}
}

1063 
node
 * 
	$ªdi°ribuã_nodes
(
node
 * 
roŸ
,Çodê* 
n
,Çodê* 
√ighb‹
, 
√ighb‹_ödex
,

1064 
k_¥ime_ödex
, 
k_¥ime
) {

1066 
i
;

1067 
node
 * 
tmp
;

1074 i‡(
√ighb‹_ödex
 != -1) {

1075 i‡(!
n
->
is_Àaf
)

1076 
n
->
poöãrs
[n->
num_keys
 + 1] =Ç->pointers[n->num_keys];

1077 
i
 = 
n
->
num_keys
; i > 0; i--) {

1078 
n
->
keys
[
i
] =Ç->keys[i - 1];

1079 
n
->
poöãrs
[
i
] =Ç->pointers[i - 1];

1081 i‡(!
n
->
is_Àaf
) {

1082 
n
->
poöãrs
[0] = 
√ighb‹
->poöãrs[√ighb‹->
num_keys
];

1083 
tmp
 = (
node
 *)
n
->
poöãrs
[0];

1084 
tmp
->
∑ª¡
 = 
n
;

1085 
√ighb‹
->
poöãrs
[√ighb‹->
num_keys
] = 
NULL
;

1086 
n
->
keys
[0] = 
k_¥ime
;

1087 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[√ighb‹->
num_keys
 - 1];

1090 
n
->
poöãrs
[0] = 
√ighb‹
->poöãrs[√ighb‹->
num_keys
 - 1];

1091 
√ighb‹
->
poöãrs
[√ighb‹->
num_keys
 - 1] = 
NULL
;

1092 
n
->
keys
[0] = 
√ighb‹
->keys[√ighb‹->
num_keys
 - 1];

1093 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] =Ç->keys[0];

1104 i‡(
n
->
is_Àaf
) {

1105 
n
->
keys
[n->
num_keys
] = 
√ighb‹
->keys[0];

1106 
n
->
poöãrs
[n->
num_keys
] = 
√ighb‹
->pointers[0];

1107 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[1];

1110 
n
->
keys
[n->
num_keys
] = 
k_¥ime
;

1111 
n
->
poöãrs
[n->
num_keys
 + 1] = 
√ighb‹
->pointers[0];

1112 
tmp
 = (
node
 *)
n
->
poöãrs
[n->
num_keys
 + 1];

1113 
tmp
->
∑ª¡
 = 
n
;

1114 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[0];

1116 
i
 = 0; i < 
√ighb‹
->
num_keys
 - 1; i++) {

1117 
√ighb‹
->
keys
[
i
] =Çeighbor->keys[i + 1];

1118 
√ighb‹
->
poöãrs
[
i
] =Çeighbor->pointers[i + 1];

1120 i‡(!
n
->
is_Àaf
)

1121 
√ighb‹
->
poöãrs
[
i
] =Çeighbor->pointers[i + 1];

1128 
n
->
num_keys
++;

1129 
√ighb‹
->
num_keys
--;

1131  
roŸ
;

1132 
	}
}

1140 
node
 * 
	$dñëe_íåy
–
node
 * 
roŸ
,Çodê* 
n
, 
key
, * 
poöãr
 ) {

1142 
mö_keys
;

1143 
node
 * 
√ighb‹
;

1144 
√ighb‹_ödex
;

1145 
k_¥ime_ödex
, 
k_¥ime
;

1146 
ˇ∑côy
;

1150 
n
 = 
	`ªmove_íåy_‰om_node
“, 
key
, 
poöãr
);

1155 i‡(
n
 =
roŸ
)

1156  
	`adju°_roŸ
(
roŸ
);

1167 
mö_keys
 = 
n
->
is_Àaf
 ? 
	`cut
(
‹dî
 - 1) : cut(order) - 1;

1173 i‡(
n
->
num_keys
 >
mö_keys
)

1174  
roŸ
;

1188 
√ighb‹_ödex
 = 
	`gë_√ighb‹_ödex
–
n
 );

1189 
k_¥ime_ödex
 = 
√ighb‹_ödex
 == -1 ? 0 :Çeighbor_index;

1190 
k_¥ime
 = 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
];

1191 
√ighb‹
 = 
√ighb‹_ödex
 =-1 ? 
n
->
∑ª¡
->
poöãrs
[1] :

1192 
n
->
∑ª¡
->
poöãrs
[
√ighb‹_ödex
];

1194 
ˇ∑côy
 = 
n
->
is_Àaf
 ? 
‹dî
 : order - 1;

1198 i‡(
√ighb‹
->
num_keys
 + 
n
->num_key†< 
ˇ∑côy
)

1199  
	`cﬂÀs˚_nodes
(
roŸ
, 
n
, 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime
);

1204  
	`ªdi°ribuã_nodes
(
roŸ
, 
n
, 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime_ödex
, 
k_¥ime
);

1205 
	}
}

1211 
node
 * 
	$dñëe
(
node
 * 
roŸ
, 
key
) {

1213 
node
 * 
key_Àaf
;

1214 
ªc‹d
 * 
key_ªc‹d
;

1216 
key_ªc‹d
 = 
	`föd
(
roŸ
, 
key
, 
Ál£
);

1217 
key_Àaf
 = 
	`föd_Àaf
(
roŸ
, 
key
, 
Ál£
);

1218 i‡(
key_ªc‹d
 !
NULL
 && 
key_Àaf
 != NULL) {

1219 
roŸ
 = 
	`dñëe_íåy
‘oŸ, 
key_Àaf
, 
key
, 
key_ªc‹d
);

1220 
	`‰ì
(
key_ªc‹d
);

1222  
roŸ
;

1223 
	}
}

1226 
	$de°roy_åì_nodes
(
node
 * 
roŸ
) {

1227 
i
;

1228 i‡(
roŸ
->
is_Àaf
)

1229 
i
 = 0; i < 
roŸ
->
num_keys
; i++)

1230 
	`‰ì
(
roŸ
->
poöãrs
[
i
]);

1232 
i
 = 0; i < 
roŸ
->
num_keys
 + 1; i++)

1233 
	`de°roy_åì_nodes
(
roŸ
->
poöãrs
[
i
]);

1234 
	`‰ì
(
roŸ
->
poöãrs
);

1235 
	`‰ì
(
roŸ
->
keys
);

1236 
	`‰ì
(
roŸ
);

1237 
	}
}

1240 
node
 * 
	$de°roy_åì
(
node
 * 
roŸ
) {

1241 
	`de°roy_åì_nodes
(
roŸ
);

1242  
NULL
;

1243 
	}
}

1246 
	$öô_‰ì_li°
(){

1247 
hód
 = (
‰ì_li°
 *)
	`mÆloc
((free_list));

1248 
‰ì_li°
 *
√w
 = (‰ì_li° *)
	`mÆloc
((free_list));

1250 
hód
->
off£t
 = 4096;

1251 
hód
->
is_‰ì
 = 
åue
;

1252 
hód
->
√xt
 = 
√w
;

1253 
√w
->
off£t
 = 0;

1254 
√w
->
is_‰ì
 = 
Ál£
;

1255 
√w
->
√xt
 = 
NULL
;

1256 
	}
}

1258 
	$ö£π_‰ì_li°
(){

1260 
	}
}

1266 
	$›í_db
(*
∑th«me
){

1267 
Â
 = 
	`f›í
(
∑th«me
, "a+");

1268 if(
Â
 =
NULL
){

1269 
	`Ârötf
(
°dîr
, "Error : fileÖath\n");

1270 
	`exô
(
EXIT_FAILURE
);

1273 
	`öô_‰ì_li°
();

1281 
	}
}

1287 
	$ö£π
(
öt64_t
 
key
, *
vÆue
){

1289 
	}
}

1296 *
	$föd
(
öt64_t
 
key
){

1298 
	}
}

1304 
	$dñëe
(
öt64_t
 
key
){

1306 
	}
}

1310 
	$sˇn
(){

1311 
‰ì_li°
 *
poöãr
;

1313 
poöãr
 = 
hód
;Öoöãr->
off£t
 !0 &&Öoöãr->
√xt
 !
NULL
;Öointer =Öointer->next){

1314 if(
poöãr
->
is_‰ì
 =
åue
)

1317 
	}
}

	@main.c

1 
	~"b±.h
"

5 
	$maö
–
¨gc
, ** 
¨gv
 ) {

7 * 
öput_fûe
;

8 
FILE
 * 
Â
;

9 
node
 * 
roŸ
;

10 
öput
, 
ønge2
;

11 
ö°ru˘i⁄
;

12 
li˚n£_∑π
;

14 
roŸ
 = 
NULL
;

15 
vîbo£_ouçut
 = 
Ál£
;

17 i‡(
¨gc
 > 1) {

18 
‹dî
 = 
	`©oi
(
¨gv
[1]);

19 i‡(
‹dî
 < 
MIN_ORDER
 || ordî > 
MAX_ORDER
) {

20 
	`Ârötf
(
°dîr
, "InvÆid ordî: %d .\n\n", 
‹dî
);

21 
	`ußge_3
();

22 
	`exô
(
EXIT_FAILURE
);

26 
	`li˚n£_nŸi˚
();

27 
	`ußge_1
();

28 
	`ußge_2
();

30 i‡(
¨gc
 > 2) {

31 
öput_fûe
 = 
¨gv
[2];

32 
Â
 = 
	`f›í
(
öput_fûe
, "r");

33 i‡(
Â
 =
NULL
) {

34 
	`≥º‹
("Failure open input file.");

35 
	`exô
(
EXIT_FAILURE
);

37 !
	`„of
(
Â
)) {

38 
	`fsˇnf
(
Â
, "%d\n", &
öput
);

39 
roŸ
 = 
	`ö£π
‘oŸ, 
öput
, input);

41 
	`f˛o£
(
Â
);

42 
	`¥öt_åì
(
roŸ
);

45 
	`¥ötf
("> ");

46 
	`sˇnf
("%c", &
ö°ru˘i⁄
Ë!
EOF
) {

47 
ö°ru˘i⁄
) {

49 
	`sˇnf
("%d", &
öput
);

50 
roŸ
 = 
	`dñëe
‘oŸ, 
öput
);

51 
	`¥öt_åì
(
roŸ
);

54 
	`sˇnf
("%d", &
öput
);

55 
roŸ
 = 
	`ö£π
‘oŸ, 
öput
, input);

56 
	`¥öt_åì
(
roŸ
);

60 
	`sˇnf
("%d", &
öput
);

61 
	`föd_™d_¥öt
(
roŸ
, 
öput
, 
ö°ru˘i⁄
 == 'p');

64 
	`sˇnf
("%d %d", &
öput
, &
ønge2
);

65 i‡(
öput
 > 
ønge2
) {

66 
tmp
 = 
ønge2
;

67 
ønge2
 = 
öput
;

68 
öput
 = 
tmp
;

70 
	`föd_™d_¥öt_ønge
(
roŸ
, 
öput
, 
ønge2
, 
ö°ru˘i⁄
 == 'p');

73 
	`¥öt_Àaves
(
roŸ
);

76 
	`gëch¨
() != ()'\n');

77  
EXIT_SUCCESS
;

80 
	`¥öt_åì
(
roŸ
);

83 
vîbo£_ouçut
 = !verbose_output;

86 i‡(
roŸ
)

87 
roŸ
 = 
	`de°roy_åì
(root);

88 
	`¥öt_åì
(
roŸ
);

91 
	`ußge_2
();

94 
	`gëch¨
() != ()'\n');

95 
	`¥ötf
("> ");

97 
	`¥ötf
("\n");

99  
EXIT_SUCCESS
;

100 
	}
}

	@
1
.
0
2
13
bpt.c
main.c
