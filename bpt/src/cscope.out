cscope 15 $HOME/mysql/Lab/bpt/src -q 0000000145 0000021809
	@bpt.c

4 
	#Vîsi⁄
 "1.14"

	)

55 
	~"b±.h
"

69 
	g‹dî
 = 
DEFAULT_ORDER
;

76 
node
 * 
	gqueue
 = 
NULL
;

83 
boﬁ
 
	gvîbo£_ouçut
 = 
Ál£
;

92 
	$li˚n£_nŸi˚
( ) {

93 
	`¥ötf
("bpt version %s -- Copyright (C) 2010 Amittai Aviram "

94 "hâp://www.amôèi.com\n", 
Vîsi⁄
);

95 
	`¥ötf
("ThisÖrogram comes with ABSOLUTELY NO WARRANTY; for details "

99 
	}
}

104 
	$¥öt_li˚n£
–
li˚n£_∑π
 ) {

105 
°¨t
, 
íd
, 
löe
;

106 
FILE
 * 
Â
;

107 
buf„r
[0x100];

109 
li˚n£_∑π
) {

110 
LICENSE_WARRANTEE
:

111 
°¨t
 = 
LICENSE_WARRANTEE_START
;

112 
íd
 = 
LICENSE_WARRANTEE_END
;

114 
LICENSE_CONDITIONS
:

115 
°¨t
 = 
LICENSE_CONDITIONS_START
;

116 
íd
 = 
LICENSE_CONDITIONS_END
;

122 
Â
 = 
	`f›í
(
LICENSE_FILE
, "r");

123 i‡(
Â
 =
NULL
) {

124 
	`≥º‹
("print_license: fopen");

125 
	`exô
(
EXIT_FAILURE
);

127 
löe
 = 0;Üöê< 
°¨t
;Üine++)

128 
	`fgës
(
buf„r
, (buf„r), 
Â
);

129  ; 
löe
 < 
íd
;Üine++) {

130 
	`fgës
(
buf„r
, (buf„r), 
Â
);

131 
	`¥ötf
("%s", 
buf„r
);

133 
	`f˛o£
(
Â
);

134 
	}
}

139 
	$ußge_1
( ) {

140 
	`¥ötf
("B+ Tªêo‡Ordî %d.\n", 
‹dî
);

141 
	`¥ötf
("Following Silberschatz, Korth, Sidarshan, Database Concepts, "

146 
	`¥ötf
("(%d <‹dî <%d).\n", 
MIN_ORDER
, 
MAX_ORDER
);

147 
	`¥ötf
("To start with input fromá file ofÇewline-delimited integers, \n"

150 
	}
}

155 
	$ußge_2
( ) {

156 
	`¥ötf
("Enterány ofÅhe following commandsáfterÅheÖrompt > :\n"

172 
	}
}

177 
	$ußge_3
( ) {

178 
	`¥ötf
("Usage: ./bpt [<order>]\n");

179 
	`¥ötf
("\twhîê%d <‹dî <%d .\n", 
MIN_ORDER
, 
MAX_ORDER
);

180 
	}
}

186 
	$íqueue
–
node
 * 
√w_node
 ) {

187 
node
 * 
c
;

188 i‡(
queue
 =
NULL
) {

189 
queue
 = 
√w_node
;

190 
queue
->
√xt
 = 
NULL
;

193 
c
 = 
queue
;

194 
c
->
√xt
 !
NULL
) {

195 
c
 = c->
√xt
;

197 
c
->
√xt
 = 
√w_node
;

198 
√w_node
->
√xt
 = 
NULL
;

200 
	}
}

206 
node
 * 
	$dequeue
( ) {

207 
node
 * 
n
 = 
queue
;

208 
queue
 = queue->
√xt
;

209 
n
->
√xt
 = 
NULL
;

210  
n
;

211 
	}
}

218 
	$¥öt_Àaves
–
node
 * 
roŸ
 ) {

219 
i
;

220 
node
 * 
c
 = 
roŸ
;

221 i‡(
roŸ
 =
NULL
) {

222 
	`¥ötf
("EmptyÅree.\n");

225 !
c
->
is_Àaf
)

226 
c
 = c->
poöãrs
[0];

227 
åue
) {

228 
i
 = 0; i < 
c
->
num_keys
; i++) {

229 i‡(
vîbo£_ouçut
)

230 
	`¥ötf
("%lx ", ()
c
->
poöãrs
[
i
]);

231 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

233 i‡(
vîbo£_ouçut
)

234 
	`¥ötf
("%lx ", ()
c
->
poöãrs
[
‹dî
 - 1]);

235 i‡(
c
->
poöãrs
[
‹dî
 - 1] !
NULL
) {

236 
	`¥ötf
(" | ");

237 
c
 = c->
poöãrs
[
‹dî
 - 1];

242 
	`¥ötf
("\n");

243 
	}
}

250 
	$height
–
node
 * 
roŸ
 ) {

251 
h
 = 0;

252 
node
 * 
c
 = 
roŸ
;

253 !
c
->
is_Àaf
) {

254 
c
 = c->
poöãrs
[0];

255 
h
++;

257  
h
;

258 
	}
}

264 
	$∑th_to_roŸ
–
node
 * 
roŸ
,Çodê* 
chûd
 ) {

265 
Àngth
 = 0;

266 
node
 * 
c
 = 
chûd
;

267 
c
 !
roŸ
) {

268 
c
 = c->
∑ª¡
;

269 
Àngth
++;

271  
Àngth
;

272 
	}
}

284 
	$¥öt_åì
–
node
 * 
roŸ
 ) {

286 
node
 * 
n
 = 
NULL
;

287 
i
 = 0;

288 
ønk
 = 0;

289 
√w_ønk
 = 0;

291 i‡(
roŸ
 =
NULL
) {

292 
	`¥ötf
("EmptyÅree.\n");

295 
queue
 = 
NULL
;

296 
	`íqueue
(
roŸ
);

297  
queue
 !
NULL
 ) {

298 
n
 = 
	`dequeue
();

299 i‡(
n
->
∑ª¡
 !
NULL
 &&Ç =n->∑ª¡->
poöãrs
[0]) {

300 
√w_ønk
 = 
	`∑th_to_roŸ
–
roŸ
, 
n
 );

301 i‡(
√w_ønk
 !
ønk
) {

302 
ønk
 = 
√w_ønk
;

303 
	`¥ötf
("\n");

306 i‡(
vîbo£_ouçut
)

307 
	`¥ötf
("(%lx)", ()
n
);

308 
i
 = 0; i < 
n
->
num_keys
; i++) {

309 i‡(
vîbo£_ouçut
)

310 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[
i
]);

311 
	`¥ötf
("%d ", 
n
->
keys
[
i
]);

313 i‡(!
n
->
is_Àaf
)

314 
i
 = 0; i <
n
->
num_keys
; i++)

315 
	`íqueue
(
n
->
poöãrs
[
i
]);

316 i‡(
vîbo£_ouçut
) {

317 i‡(
n
->
is_Àaf
)

318 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[
‹dî
 - 1]);

320 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[n->
num_keys
]);

322 
	`¥ötf
("| ");

324 
	`¥ötf
("\n");

325 
	}
}

331 
	$föd_™d_¥öt
(
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
) {

332 
ªc‹d
 * 
r
 = 
	`föd
(
roŸ
, 
key
, 
vîbo£
);

333 i‡(
r
 =
NULL
)

334 
	`¥ötf
("Rec‹dÇŸ found undî key %d.\n", 
key
);

336 
	`¥ötf
("Recordát %lx -- key %d, value %d.\n",

337 ()
r
, 
key
,Ñ->
vÆue
);

338 
	}
}

344 
	$föd_™d_¥öt_ønge
–
node
 * 
roŸ
, 
key_°¨t
, 
key_íd
,

345 
boﬁ
 
vîbo£
 ) {

346 
i
;

347 
¨øy_size
 = 
key_íd
 - 
key_°¨t
 + 1;

348 
ªtu∫ed_keys
[
¨øy_size
];

349 * 
ªtu∫ed_poöãrs
[
¨øy_size
];

350 
num_found
 = 
	`föd_ønge
–
roŸ
, 
key_°¨t
, 
key_íd
, 
vîbo£
,

351 
ªtu∫ed_keys
, 
ªtu∫ed_poöãrs
 );

352 i‡(!
num_found
)

353 
	`¥ötf
("None found.\n");

355 
i
 = 0; i < 
num_found
; i++)

356 
	`¥ötf
("Key: %d Location: %lx Value: %d\n",

357 
ªtu∫ed_keys
[
i
],

358 ()
ªtu∫ed_poöãrs
[
i
],

359 ((
ªc‹d
 *)

360 
ªtu∫ed_poöãrs
[
i
])->
vÆue
);

362 
	}
}

370 
	$föd_ønge
–
node
 * 
roŸ
, 
key_°¨t
, 
key_íd
, 
boﬁ
 
vîbo£
,

371 
ªtu∫ed_keys
[], * 
ªtu∫ed_poöãrs
[]) {

372 
i
, 
num_found
;

373 
num_found
 = 0;

374 
node
 * 
n
 = 
	`föd_Àaf
–
roŸ
, 
key_°¨t
, 
vîbo£
 );

375 i‡(
n
 =
NULL
)  0;

376 
i
 = 0; i < 
n
->
num_keys
 &&Ç->
keys
[i] < 
key_°¨t
; i++) ;

377 i‡(
i
 =
n
->
num_keys
)  0;

378 
n
 !
NULL
) {

379  ; 
i
 < 
n
->
num_keys
 &&Ç->
keys
[i] <
key_íd
; i++) {

380 
ªtu∫ed_keys
[
num_found
] = 
n
->
keys
[
i
];

381 
ªtu∫ed_poöãrs
[
num_found
] = 
n
->
poöãrs
[
i
];

382 
num_found
++;

384 
n
 =Ç->
poöãrs
[
‹dî
 - 1];

385 
i
 = 0;

387  
num_found
;

388 
	}
}

396 
node
 * 
	$föd_Àaf
–
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
 ) {

397 
i
 = 0;

398 
node
 * 
c
 = 
roŸ
;

399 i‡(
c
 =
NULL
) {

400 i‡(
vîbo£
)

401 
	`¥ötf
("EmptyÅree.\n");

402  
c
;

404 !
c
->
is_Àaf
) {

405 i‡(
vîbo£
) {

406 
	`¥ötf
("[");

407 
i
 = 0; i < 
c
->
num_keys
 - 1; i++)

408 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

409 
	`¥ötf
("%d] ", 
c
->
keys
[
i
]);

411 
i
 = 0;

412 
i
 < 
c
->
num_keys
) {

413 i‡(
key
 >
c
->
keys
[
i
]) i++;

416 i‡(
vîbo£
)

417 
	`¥ötf
("%d ->\n", 
i
);

418 
c
 = (
node
 *)c->
poöãrs
[
i
];

420 i‡(
vîbo£
) {

421 
	`¥ötf
("Leaf [");

422 
i
 = 0; i < 
c
->
num_keys
 - 1; i++)

423 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

424 
	`¥ötf
("%d] ->\n", 
c
->
keys
[
i
]);

426  
c
;

427 
	}
}

433 
ªc‹d
 * 
	$föd
–
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
 ) {

434 
i
 = 0;

435 
node
 * 
c
 = 
	`föd_Àaf
–
roŸ
, 
key
, 
vîbo£
 );

436 i‡(
c
 =
NULL
)  NULL;

437 
i
 = 0; i < 
c
->
num_keys
; i++)

438 i‡(
c
->
keys
[
i
] =
key
) ;

439 i‡(
i
 =
c
->
num_keys
)

440  
NULL
;

442  (
ªc‹d
 *)
c
->
poöãrs
[
i
];

443 
	}
}

448 
	$cut
–
Àngth
 ) {

449 i‡(
Àngth
 % 2 == 0)

450  
Àngth
/2;

452  
Àngth
/2 + 1;

453 
	}
}

461 
ªc‹d
 * 
	$make_ªc‹d
(
vÆue
) {

462 
ªc‹d
 * 
√w_ªc‹d
 = (ªc‹d *)
	`mÆloc
((record));

463 i‡(
√w_ªc‹d
 =
NULL
) {

464 
	`≥º‹
("Record creation.");

465 
	`exô
(
EXIT_FAILURE
);

468 
√w_ªc‹d
->
vÆue
 = value;

470  
√w_ªc‹d
;

471 
	}
}

477 
node
 * 
	$make_node
( ) {

478 
node
 * 
√w_node
;

479 
√w_node
 = 
	`mÆloc
((
node
));

480 i‡(
√w_node
 =
NULL
) {

481 
	`≥º‹
("Node creation.");

482 
	`exô
(
EXIT_FAILURE
);

484 
√w_node
->
keys
 = 
	`mÆloc
–(
‹dî
 - 1) * () );

485 i‡(
√w_node
->
keys
 =
NULL
) {

486 
	`≥º‹
("NewÇode keysárray.");

487 
	`exô
(
EXIT_FAILURE
);

489 
√w_node
->
poöãrs
 = 
	`mÆloc
–
‹dî
 * (*) );

490 i‡(
√w_node
->
poöãrs
 =
NULL
) {

491 
	`≥º‹
("NewÇodeÖointersárray.");

492 
	`exô
(
EXIT_FAILURE
);

494 
√w_node
->
is_Àaf
 = 
Ál£
;

495 
√w_node
->
num_keys
 = 0;

496 
√w_node
->
∑ª¡
 = 
NULL
;

497 
√w_node
->
√xt
 = 
NULL
;

498  
√w_node
;

499 
	}
}

504 
node
 * 
	$make_Àaf
( ) {

505 
node
 * 
Àaf
 = 
	`make_node
();

506 
Àaf
->
is_Àaf
 = 
åue
;

507  
Àaf
;

508 
	}
}

515 
	$gë_À·_ödex
(
node
 * 
∑ª¡
,Çodê* 
À·
) {

517 
À·_ödex
 = 0;

518 
À·_ödex
 <
∑ª¡
->
num_keys
 &&

519 
∑ª¡
->
poöãrs
[
À·_ödex
] !
À·
)

520 
À·_ödex
++;

521  
À·_ödex
;

522 
	}
}

528 
node
 * 
	$ö£π_öto_Àaf
–
node
 * 
Àaf
, 
key
, 
ªc‹d
 * 
poöãr
 ) {

530 
i
, 
ö£πi⁄_poöt
;

532 
ö£πi⁄_poöt
 = 0;

533 
ö£πi⁄_poöt
 < 
Àaf
->
num_keys
 &&Üóf->
keys
[ö£πi⁄_poöt] < 
key
)

534 
ö£πi⁄_poöt
++;

536 
i
 = 
Àaf
->
num_keys
; i > 
ö£πi⁄_poöt
; i--) {

537 
Àaf
->
keys
[
i
] =Üeaf->keys[i - 1];

538 
Àaf
->
poöãrs
[
i
] =Üeaf->pointers[i - 1];

540 
Àaf
->
keys
[
ö£πi⁄_poöt
] = 
key
;

541 
Àaf
->
poöãrs
[
ö£πi⁄_poöt
] = 
poöãr
;

542 
Àaf
->
num_keys
++;

543  
Àaf
;

544 
	}
}

552 
node
 * 
	$ö£π_öto_Àaf_a·î_•lôtög
(
node
 * 
roŸ
,Çodê* 
Àaf
, 
key
, 
ªc‹d
 * 
poöãr
) {

554 
node
 * 
√w_Àaf
;

555 * 
ãmp_keys
;

556 ** 
ãmp_poöãrs
;

557 
ö£πi⁄_ödex
, 
•lô
, 
√w_key
, 
i
, 
j
;

559 
√w_Àaf
 = 
	`make_Àaf
();

561 
ãmp_keys
 = 
	`mÆloc
–
‹dî
 * () );

562 i‡(
ãmp_keys
 =
NULL
) {

563 
	`≥º‹
("Temporary keysárray.");

564 
	`exô
(
EXIT_FAILURE
);

567 
ãmp_poöãrs
 = 
	`mÆloc
–
‹dî
 * (*) );

568 i‡(
ãmp_poöãrs
 =
NULL
) {

569 
	`≥º‹
("TemporaryÖointersárray.");

570 
	`exô
(
EXIT_FAILURE
);

573 
ö£πi⁄_ödex
 = 0;

574 
ö£πi⁄_ödex
 < 
‹dî
 - 1 && 
Àaf
->
keys
[ö£πi⁄_ödex] < 
key
)

575 
ö£πi⁄_ödex
++;

577 
i
 = 0, 
j
 = 0; i < 
Àaf
->
num_keys
; i++, j++) {

578 i‡(
j
 =
ö£πi⁄_ödex
) j++;

579 
ãmp_keys
[
j
] = 
Àaf
->
keys
[
i
];

580 
ãmp_poöãrs
[
j
] = 
Àaf
->
poöãrs
[
i
];

583 
ãmp_keys
[
ö£πi⁄_ödex
] = 
key
;

584 
ãmp_poöãrs
[
ö£πi⁄_ödex
] = 
poöãr
;

586 
Àaf
->
num_keys
 = 0;

588 
•lô
 = 
	`cut
(
‹dî
 - 1);

590 
i
 = 0; i < 
•lô
; i++) {

591 
Àaf
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

592 
Àaf
->
keys
[
i
] = 
ãmp_keys
[i];

593 
Àaf
->
num_keys
++;

596 
i
 = 
•lô
, 
j
 = 0; i < 
‹dî
; i++, j++) {

597 
√w_Àaf
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

598 
√w_Àaf
->
keys
[
j
] = 
ãmp_keys
[
i
];

599 
√w_Àaf
->
num_keys
++;

602 
	`‰ì
(
ãmp_poöãrs
);

603 
	`‰ì
(
ãmp_keys
);

605 
√w_Àaf
->
poöãrs
[
‹dî
 - 1] = 
Àaf
->pointers[order - 1];

606 
Àaf
->
poöãrs
[
‹dî
 - 1] = 
√w_Àaf
;

608 
i
 = 
Àaf
->
num_keys
; i < 
‹dî
 - 1; i++)

609 
Àaf
->
poöãrs
[
i
] = 
NULL
;

610 
i
 = 
√w_Àaf
->
num_keys
; i < 
‹dî
 - 1; i++)

611 
√w_Àaf
->
poöãrs
[
i
] = 
NULL
;

613 
√w_Àaf
->
∑ª¡
 = 
Àaf
->parent;

614 
√w_key
 = 
√w_Àaf
->
keys
[0];

616  
	`ö£π_öto_∑ª¡
(
roŸ
, 
Àaf
, 
√w_key
, 
√w_Àaf
);

617 
	}
}

624 
node
 * 
	$ö£π_öto_node
(
node
 * 
roŸ
,Çodê* 
n
,

625 
À·_ödex
, 
key
, 
node
 * 
right
) {

626 
i
;

628 
i
 = 
n
->
num_keys
; i > 
À·_ödex
; i--) {

629 
n
->
poöãrs
[
i
 + 1] =Ç->pointers[i];

630 
n
->
keys
[
i
] =Ç->keys[i - 1];

632 
n
->
poöãrs
[
À·_ödex
 + 1] = 
right
;

633 
n
->
keys
[
À·_ödex
] = 
key
;

634 
n
->
num_keys
++;

635  
roŸ
;

636 
	}
}

643 
node
 * 
	$ö£π_öto_node_a·î_•lôtög
(
node
 * 
roŸ
,Çodê* 
ﬁd_node
, 
À·_ödex
,

644 
key
, 
node
 * 
right
) {

646 
i
, 
j
, 
•lô
, 
k_¥ime
;

647 
node
 * 
√w_node
, * 
chûd
;

648 * 
ãmp_keys
;

649 
node
 ** 
ãmp_poöãrs
;

660 
ãmp_poöãrs
 = 
	`mÆloc
–(
‹dî
 + 1Ë* (
node
 *) );

661 i‡(
ãmp_poöãrs
 =
NULL
) {

662 
	`≥º‹
("TemporaryÖointersárray for splittingÇodes.");

663 
	`exô
(
EXIT_FAILURE
);

665 
ãmp_keys
 = 
	`mÆloc
–
‹dî
 * () );

666 i‡(
ãmp_keys
 =
NULL
) {

667 
	`≥º‹
("Temporary keysárray for splittingÇodes.");

668 
	`exô
(
EXIT_FAILURE
);

671 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
 + 1; i++, j++) {

672 i‡(
j
 =
À·_ödex
 + 1) j++;

673 
ãmp_poöãrs
[
j
] = 
ﬁd_node
->
poöãrs
[
i
];

676 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
; i++, j++) {

677 i‡(
j
 =
À·_ödex
) j++;

678 
ãmp_keys
[
j
] = 
ﬁd_node
->
keys
[
i
];

681 
ãmp_poöãrs
[
À·_ödex
 + 1] = 
right
;

682 
ãmp_keys
[
À·_ödex
] = 
key
;

688 
•lô
 = 
	`cut
(
‹dî
);

689 
√w_node
 = 
	`make_node
();

690 
ﬁd_node
->
num_keys
 = 0;

691 
i
 = 0; i < 
•lô
 - 1; i++) {

692 
ﬁd_node
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

693 
ﬁd_node
->
keys
[
i
] = 
ãmp_keys
[i];

694 
ﬁd_node
->
num_keys
++;

696 
ﬁd_node
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

697 
k_¥ime
 = 
ãmp_keys
[
•lô
 - 1];

698 ++
i
, 
j
 = 0; i < 
‹dî
; i++, j++) {

699 
√w_node
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

700 
√w_node
->
keys
[
j
] = 
ãmp_keys
[
i
];

701 
√w_node
->
num_keys
++;

703 
√w_node
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

704 
	`‰ì
(
ãmp_poöãrs
);

705 
	`‰ì
(
ãmp_keys
);

706 
√w_node
->
∑ª¡
 = 
ﬁd_node
->parent;

707 
i
 = 0; i <
√w_node
->
num_keys
; i++) {

708 
chûd
 = 
√w_node
->
poöãrs
[
i
];

709 
chûd
->
∑ª¡
 = 
√w_node
;

717  
	`ö£π_öto_∑ª¡
(
roŸ
, 
ﬁd_node
, 
k_¥ime
, 
√w_node
);

718 
	}
}

725 
node
 * 
	$ö£π_öto_∑ª¡
(
node
 * 
roŸ
,Çodê* 
À·
, 
key
,Çodê* 
right
) {

727 
À·_ödex
;

728 
node
 * 
∑ª¡
;

730 
∑ª¡
 = 
À·
->parent;

734 i‡(
∑ª¡
 =
NULL
)

735  
	`ö£π_öto_√w_roŸ
(
À·
, 
key
, 
right
);

745 
À·_ödex
 = 
	`gë_À·_ödex
(
∑ª¡
, 
À·
);

751 i‡(
∑ª¡
->
num_keys
 < 
‹dî
 - 1)

752  
	`ö£π_öto_node
(
roŸ
, 
∑ª¡
, 
À·_ödex
, 
key
, 
right
);

758  
	`ö£π_öto_node_a·î_•lôtög
(
roŸ
, 
∑ª¡
, 
À·_ödex
, 
key
, 
right
);

759 
	}
}

766 
node
 * 
	$ö£π_öto_√w_roŸ
(
node
 * 
À·
, 
key
,Çodê* 
right
) {

768 
node
 * 
roŸ
 = 
	`make_node
();

769 
roŸ
->
keys
[0] = 
key
;

770 
roŸ
->
poöãrs
[0] = 
À·
;

771 
roŸ
->
poöãrs
[1] = 
right
;

772 
roŸ
->
num_keys
++;

773 
roŸ
->
∑ª¡
 = 
NULL
;

774 
À·
->
∑ª¡
 = 
roŸ
;

775 
right
->
∑ª¡
 = 
roŸ
;

776  
roŸ
;

777 
	}
}

784 
node
 * 
	$°¨t_√w_åì
(
key
, 
ªc‹d
 * 
poöãr
) {

786 
node
 * 
roŸ
 = 
	`make_Àaf
();

787 
roŸ
->
keys
[0] = 
key
;

788 
roŸ
->
poöãrs
[0] = 
poöãr
;

789 
roŸ
->
poöãrs
[
‹dî
 - 1] = 
NULL
;

790 
roŸ
->
∑ª¡
 = 
NULL
;

791 
roŸ
->
num_keys
++;

792  
roŸ
;

793 
	}
}

803 
node
 * 
	$ö£π
–
node
 * 
roŸ
, 
key
, 
vÆue
 ) {

805 
ªc‹d
 * 
poöãr
;

806 
node
 * 
Àaf
;

812 i‡(
	`föd
(
roŸ
, 
key
, 
Ál£
Ë!
NULL
)

813  
roŸ
;

818 
poöãr
 = 
	`make_ªc‹d
(
vÆue
);

825 i‡(
roŸ
 =
NULL
)

826  
	`°¨t_√w_åì
(
key
, 
poöãr
);

833 
Àaf
 = 
	`föd_Àaf
(
roŸ
, 
key
, 
Ál£
);

838 i‡(
Àaf
->
num_keys
 < 
‹dî
 - 1) {

839 
Àaf
 = 
	`ö£π_öto_Àaf
÷óf, 
key
, 
poöãr
);

840  
roŸ
;

847  
	`ö£π_öto_Àaf_a·î_•lôtög
(
roŸ
, 
Àaf
, 
key
, 
poöãr
);

848 
	}
}

861 
	$gë_√ighb‹_ödex
–
node
 * 
n
 ) {

863 
i
;

871 
i
 = 0; i <
n
->
∑ª¡
->
num_keys
; i++)

872 i‡(
n
->
∑ª¡
->
poöãrs
[
i
] ==Ç)

873  
i
 - 1;

876 
	`¥ötf
("Search forÇonexistentÖointerÅoÇode inÖarent.\n");

877 
	`¥ötf
("Node: %#lx\n", ()
n
);

878 
	`exô
(
EXIT_FAILURE
);

879 
	}
}

882 
node
 * 
	$ªmove_íåy_‰om_node
(
node
 * 
n
, 
key
,Çodê* 
poöãr
) {

884 
i
, 
num_poöãrs
;

887 
i
 = 0;

888 
n
->
keys
[
i
] !
key
)

889 
i
++;

890 ++
i
; i < 
n
->
num_keys
; i++)

891 
n
->
keys
[
i
 - 1] =Ç->keys[i];

895 
num_poöãrs
 = 
n
->
is_Àaf
 ?Ç->
num_keys
 :Ç->num_keys + 1;

896 
i
 = 0;

897 
n
->
poöãrs
[
i
] !
poöãr
)

898 
i
++;

899 ++
i
; i < 
num_poöãrs
; i++)

900 
n
->
poöãrs
[
i
 - 1] =Ç->pointers[i];

904 
n
->
num_keys
--;

908 i‡(
n
->
is_Àaf
)

909 
i
 = 
n
->
num_keys
; i < 
‹dî
 - 1; i++)

910 
n
->
poöãrs
[
i
] = 
NULL
;

912 
i
 = 
n
->
num_keys
 + 1; i < 
‹dî
; i++)

913 
n
->
poöãrs
[
i
] = 
NULL
;

915  
n
;

916 
	}
}

919 
node
 * 
	$adju°_roŸ
(
node
 * 
roŸ
) {

921 
node
 * 
√w_roŸ
;

928 i‡(
roŸ
->
num_keys
 > 0)

929  
roŸ
;

938 i‡(!
roŸ
->
is_Àaf
) {

939 
√w_roŸ
 = 
roŸ
->
poöãrs
[0];

940 
√w_roŸ
->
∑ª¡
 = 
NULL
;

947 
√w_roŸ
 = 
NULL
;

949 
	`‰ì
(
roŸ
->
keys
);

950 
	`‰ì
(
roŸ
->
poöãrs
);

951 
	`‰ì
(
roŸ
);

953  
√w_roŸ
;

954 
	}
}

963 
node
 * 
	$cﬂÀs˚_nodes
(
node
 * 
roŸ
,Çodê* 
n
,Çodê* 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime
) {

965 
i
, 
j
, 
√ighb‹_ö£πi⁄_ödex
, 
n_íd
;

966 
node
 * 
tmp
;

972 i‡(
√ighb‹_ödex
 == -1) {

973 
tmp
 = 
n
;

974 
n
 = 
√ighb‹
;

975 
√ighb‹
 = 
tmp
;

984 
√ighb‹_ö£πi⁄_ödex
 = 
√ighb‹
->
num_keys
;

991 i‡(!
n
->
is_Àaf
) {

996 
√ighb‹
->
keys
[
√ighb‹_ö£πi⁄_ödex
] = 
k_¥ime
;

997 
√ighb‹
->
num_keys
++;

1000 
n_íd
 = 
n
->
num_keys
;

1002 
i
 = 
√ighb‹_ö£πi⁄_ödex
 + 1, 
j
 = 0; j < 
n_íd
; i++, j++) {

1003 
√ighb‹
->
keys
[
i
] = 
n
->keys[
j
];

1004 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1005 
√ighb‹
->
num_keys
++;

1006 
n
->
num_keys
--;

1013 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1018 
i
 = 0; i < 
√ighb‹
->
num_keys
 + 1; i++) {

1019 
tmp
 = (
node
 *)
√ighb‹
->
poöãrs
[
i
];

1020 
tmp
->
∑ª¡
 = 
√ighb‹
;

1031 
i
 = 
√ighb‹_ö£πi⁄_ödex
, 
j
 = 0; j < 
n
->
num_keys
; i++, j++) {

1032 
√ighb‹
->
keys
[
i
] = 
n
->keys[
j
];

1033 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1034 
√ighb‹
->
num_keys
++;

1036 
√ighb‹
->
poöãrs
[
‹dî
 - 1] = 
n
->pointers[order - 1];

1039 
roŸ
 = 
	`dñëe_íåy
‘oŸ, 
n
->
∑ª¡
, 
k_¥ime
,Ç);

1040 
	`‰ì
(
n
->
keys
);

1041 
	`‰ì
(
n
->
poöãrs
);

1042 
	`‰ì
(
n
);

1043  
roŸ
;

1044 
	}
}

1053 
node
 * 
	$ªdi°ribuã_nodes
(
node
 * 
roŸ
,Çodê* 
n
,Çodê* 
√ighb‹
, 
√ighb‹_ödex
,

1054 
k_¥ime_ödex
, 
k_¥ime
) {

1056 
i
;

1057 
node
 * 
tmp
;

1064 i‡(
√ighb‹_ödex
 != -1) {

1065 i‡(!
n
->
is_Àaf
)

1066 
n
->
poöãrs
[n->
num_keys
 + 1] =Ç->pointers[n->num_keys];

1067 
i
 = 
n
->
num_keys
; i > 0; i--) {

1068 
n
->
keys
[
i
] =Ç->keys[i - 1];

1069 
n
->
poöãrs
[
i
] =Ç->pointers[i - 1];

1071 i‡(!
n
->
is_Àaf
) {

1072 
n
->
poöãrs
[0] = 
√ighb‹
->poöãrs[√ighb‹->
num_keys
];

1073 
tmp
 = (
node
 *)
n
->
poöãrs
[0];

1074 
tmp
->
∑ª¡
 = 
n
;

1075 
√ighb‹
->
poöãrs
[√ighb‹->
num_keys
] = 
NULL
;

1076 
n
->
keys
[0] = 
k_¥ime
;

1077 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[√ighb‹->
num_keys
 - 1];

1080 
n
->
poöãrs
[0] = 
√ighb‹
->poöãrs[√ighb‹->
num_keys
 - 1];

1081 
√ighb‹
->
poöãrs
[√ighb‹->
num_keys
 - 1] = 
NULL
;

1082 
n
->
keys
[0] = 
√ighb‹
->keys[√ighb‹->
num_keys
 - 1];

1083 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] =Ç->keys[0];

1094 i‡(
n
->
is_Àaf
) {

1095 
n
->
keys
[n->
num_keys
] = 
√ighb‹
->keys[0];

1096 
n
->
poöãrs
[n->
num_keys
] = 
√ighb‹
->pointers[0];

1097 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[1];

1100 
n
->
keys
[n->
num_keys
] = 
k_¥ime
;

1101 
n
->
poöãrs
[n->
num_keys
 + 1] = 
√ighb‹
->pointers[0];

1102 
tmp
 = (
node
 *)
n
->
poöãrs
[n->
num_keys
 + 1];

1103 
tmp
->
∑ª¡
 = 
n
;

1104 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[0];

1106 
i
 = 0; i < 
√ighb‹
->
num_keys
 - 1; i++) {

1107 
√ighb‹
->
keys
[
i
] =Çeighbor->keys[i + 1];

1108 
√ighb‹
->
poöãrs
[
i
] =Çeighbor->pointers[i + 1];

1110 i‡(!
n
->
is_Àaf
)

1111 
√ighb‹
->
poöãrs
[
i
] =Çeighbor->pointers[i + 1];

1118 
n
->
num_keys
++;

1119 
√ighb‹
->
num_keys
--;

1121  
roŸ
;

1122 
	}
}

1130 
node
 * 
	$dñëe_íåy
–
node
 * 
roŸ
,Çodê* 
n
, 
key
, * 
poöãr
 ) {

1132 
mö_keys
;

1133 
node
 * 
√ighb‹
;

1134 
√ighb‹_ödex
;

1135 
k_¥ime_ödex
, 
k_¥ime
;

1136 
ˇ∑côy
;

1140 
n
 = 
	`ªmove_íåy_‰om_node
“, 
key
, 
poöãr
);

1145 i‡(
n
 =
roŸ
)

1146  
	`adju°_roŸ
(
roŸ
);

1157 
mö_keys
 = 
n
->
is_Àaf
 ? 
	`cut
(
‹dî
 - 1) : cut(order) - 1;

1163 i‡(
n
->
num_keys
 >
mö_keys
)

1164  
roŸ
;

1178 
√ighb‹_ödex
 = 
	`gë_√ighb‹_ödex
–
n
 );

1179 
k_¥ime_ödex
 = 
√ighb‹_ödex
 == -1 ? 0 :Çeighbor_index;

1180 
k_¥ime
 = 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
];

1181 
√ighb‹
 = 
√ighb‹_ödex
 =-1 ? 
n
->
∑ª¡
->
poöãrs
[1] :

1182 
n
->
∑ª¡
->
poöãrs
[
√ighb‹_ödex
];

1184 
ˇ∑côy
 = 
n
->
is_Àaf
 ? 
‹dî
 : order - 1;

1188 i‡(
√ighb‹
->
num_keys
 + 
n
->num_key†< 
ˇ∑côy
)

1189  
	`cﬂÀs˚_nodes
(
roŸ
, 
n
, 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime
);

1194  
	`ªdi°ribuã_nodes
(
roŸ
, 
n
, 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime_ödex
, 
k_¥ime
);

1195 
	}
}

1201 
node
 * 
	$dñëe
(
node
 * 
roŸ
, 
key
) {

1203 
node
 * 
key_Àaf
;

1204 
ªc‹d
 * 
key_ªc‹d
;

1206 
key_ªc‹d
 = 
	`föd
(
roŸ
, 
key
, 
Ál£
);

1207 
key_Àaf
 = 
	`föd_Àaf
(
roŸ
, 
key
, 
Ál£
);

1208 i‡(
key_ªc‹d
 !
NULL
 && 
key_Àaf
 != NULL) {

1209 
roŸ
 = 
	`dñëe_íåy
‘oŸ, 
key_Àaf
, 
key
, 
key_ªc‹d
);

1210 
	`‰ì
(
key_ªc‹d
);

1212  
roŸ
;

1213 
	}
}

1216 
	$de°roy_åì_nodes
(
node
 * 
roŸ
) {

1217 
i
;

1218 i‡(
roŸ
->
is_Àaf
)

1219 
i
 = 0; i < 
roŸ
->
num_keys
; i++)

1220 
	`‰ì
(
roŸ
->
poöãrs
[
i
]);

1222 
i
 = 0; i < 
roŸ
->
num_keys
 + 1; i++)

1223 
	`de°roy_åì_nodes
(
roŸ
->
poöãrs
[
i
]);

1224 
	`‰ì
(
roŸ
->
poöãrs
);

1225 
	`‰ì
(
roŸ
->
keys
);

1226 
	`‰ì
(
roŸ
);

1227 
	}
}

1230 
node
 * 
	$de°roy_åì
(
node
 * 
roŸ
) {

1231 
	`de°roy_åì_nodes
(
roŸ
);

1232  
NULL
;

1233 
	}
}

	@main.c

1 
	~"b±.h
"

5 
	$maö
–
¨gc
, ** 
¨gv
 ) {

7 * 
öput_fûe
;

8 
FILE
 * 
Â
;

9 
node
 * 
roŸ
;

10 
öput
, 
ønge2
;

11 
ö°ru˘i⁄
;

12 
li˚n£_∑π
;

14 
roŸ
 = 
NULL
;

15 
vîbo£_ouçut
 = 
Ál£
;

17 i‡(
¨gc
 > 1) {

18 
‹dî
 = 
	`©oi
(
¨gv
[1]);

19 i‡(
‹dî
 < 
MIN_ORDER
 || ordî > 
MAX_ORDER
) {

20 
	`Ârötf
(
°dîr
, "InvÆid ordî: %d .\n\n", 
‹dî
);

21 
	`ußge_3
();

22 
	`exô
(
EXIT_FAILURE
);

26 
	`li˚n£_nŸi˚
();

27 
	`ußge_1
();

28 
	`ußge_2
();

30 i‡(
¨gc
 > 2) {

31 
öput_fûe
 = 
¨gv
[2];

32 
Â
 = 
	`f›í
(
öput_fûe
, "r");

33 i‡(
Â
 =
NULL
) {

34 
	`≥º‹
("Failure open input file.");

35 
	`exô
(
EXIT_FAILURE
);

37 !
	`„of
(
Â
)) {

38 
	`fsˇnf
(
Â
, "%d\n", &
öput
);

39 
roŸ
 = 
	`ö£π
‘oŸ, 
öput
, input);

41 
	`f˛o£
(
Â
);

42 
	`¥öt_åì
(
roŸ
);

45 
	`¥ötf
("> ");

46 
	`sˇnf
("%c", &
ö°ru˘i⁄
Ë!
EOF
) {

47 
ö°ru˘i⁄
) {

49 
	`sˇnf
("%d", &
öput
);

50 
roŸ
 = 
	`dñëe
‘oŸ, 
öput
);

51 
	`¥öt_åì
(
roŸ
);

54 
	`sˇnf
("%d", &
öput
);

55 
roŸ
 = 
	`ö£π
‘oŸ, 
öput
, input);

56 
	`¥öt_åì
(
roŸ
);

60 
	`sˇnf
("%d", &
öput
);

61 
	`föd_™d_¥öt
(
roŸ
, 
öput
, 
ö°ru˘i⁄
 == 'p');

64 
	`sˇnf
("%d %d", &
öput
, &
ønge2
);

65 i‡(
öput
 > 
ønge2
) {

66 
tmp
 = 
ønge2
;

67 
ønge2
 = 
öput
;

68 
öput
 = 
tmp
;

70 
	`föd_™d_¥öt_ønge
(
roŸ
, 
öput
, 
ønge2
, 
ö°ru˘i⁄
 == 'p');

73 
	`¥öt_Àaves
(
roŸ
);

76 
	`gëch¨
() != ()'\n');

77  
EXIT_SUCCESS
;

80 
	`¥öt_åì
(
roŸ
);

83 
vîbo£_ouçut
 = !verbose_output;

86 i‡(
roŸ
)

87 
roŸ
 = 
	`de°roy_åì
(root);

88 
	`¥öt_åì
(
roŸ
);

91 
	`ußge_2
();

94 
	`gëch¨
() != ()'\n');

95 
	`¥ötf
("> ");

97 
	`¥ötf
("\n");

99  
EXIT_SUCCESS
;

100 
	}
}

	@
1
.
0
2
13
bpt.c
main.c
