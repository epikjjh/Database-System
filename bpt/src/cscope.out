cscope 15 $HOME/mysql/Lab/bpt/src -q 0000000182 0000024776
	@bpt.c

4 
	#Vîsi⁄
 "1.14"

	)

55 
	~"b±.h
"

69 
	g‹dî
 = 
DEFAULT_ORDER
;

76 
node
 * 
	gqueue
 = 
NULL
;

83 
boﬁ
 
	gvîbo£_ouçut
 = 
Ál£
;

88 
FILE
 *
	gÂ
;

89 
	gfd
;

95 
öt64_t
 
	gdeÁu…_off£t
;

101 
‰ì_li°
 *
	ghód
 = 
NULL
;

109 
	$li˚n£_nŸi˚
( ) {

110 
	`¥ötf
("bpt version %s -- Copyright (C) 2010 Amittai Aviram "

111 "hâp://www.amôèi.com\n", 
Vîsi⁄
);

112 
	`¥ötf
("ThisÖrogram comes with ABSOLUTELY NO WARRANTY; for details "

116 
	}
}

121 
	$¥öt_li˚n£
–
li˚n£_∑π
 ) {

122 
°¨t
, 
íd
, 
löe
;

123 
FILE
 * 
Â
;

124 
buf„r
[0x100];

126 
li˚n£_∑π
) {

127 
LICENSE_WARRANTEE
:

128 
°¨t
 = 
LICENSE_WARRANTEE_START
;

129 
íd
 = 
LICENSE_WARRANTEE_END
;

131 
LICENSE_CONDITIONS
:

132 
°¨t
 = 
LICENSE_CONDITIONS_START
;

133 
íd
 = 
LICENSE_CONDITIONS_END
;

139 
Â
 = 
	`f›í
(
LICENSE_FILE
, "r");

140 i‡(
Â
 =
NULL
) {

141 
	`≥º‹
("print_license: fopen");

142 
	`exô
(
EXIT_FAILURE
);

144 
löe
 = 0;Üöê< 
°¨t
;Üine++)

145 
	`fgës
(
buf„r
, (buf„r), 
Â
);

146  ; 
löe
 < 
íd
;Üine++) {

147 
	`fgës
(
buf„r
, (buf„r), 
Â
);

148 
	`¥ötf
("%s", 
buf„r
);

150 
	`f˛o£
(
Â
);

151 
	}
}

156 
	$ußge_1
( ) {

157 
	`¥ötf
("B+ Tªêo‡Ordî %d.\n", 
‹dî
);

158 
	`¥ötf
("Following Silberschatz, Korth, Sidarshan, Database Concepts, "

163 
	`¥ötf
("(%d <‹dî <%d).\n", 
MIN_ORDER
, 
MAX_ORDER
);

164 
	`¥ötf
("To start with input fromá file ofÇewline-delimited integers, \n"

167 
	}
}

172 
	$ußge_2
( ) {

173 
	`¥ötf
("Enterány ofÅhe following commandsáfterÅheÖrompt > :\n"

189 
	}
}

194 
	$ußge_3
( ) {

195 
	`¥ötf
("Usage: ./bpt [<order>]\n");

196 
	`¥ötf
("\twhîê%d <‹dî <%d .\n", 
MIN_ORDER
, 
MAX_ORDER
);

197 
	}
}

203 
	$íqueue
–
node
 * 
√w_node
 ) {

204 
node
 * 
c
;

205 i‡(
queue
 =
NULL
) {

206 
queue
 = 
√w_node
;

207 
queue
->
√xt
 = 
NULL
;

210 
c
 = 
queue
;

211 
c
->
√xt
 !
NULL
) {

212 
c
 = c->
√xt
;

214 
c
->
√xt
 = 
√w_node
;

215 
√w_node
->
√xt
 = 
NULL
;

217 
	}
}

223 
node
 * 
	$dequeue
( ) {

224 
node
 * 
n
 = 
queue
;

225 
queue
 = queue->
√xt
;

226 
n
->
√xt
 = 
NULL
;

227  
n
;

228 
	}
}

235 
	$¥öt_Àaves
–
node
 * 
roŸ
 ) {

236 
i
;

237 
node
 * 
c
 = 
roŸ
;

238 i‡(
roŸ
 =
NULL
) {

239 
	`¥ötf
("EmptyÅree.\n");

242 !
c
->
is_Àaf
)

243 
c
 = c->
poöãrs
[0];

244 
åue
) {

245 
i
 = 0; i < 
c
->
num_keys
; i++) {

246 i‡(
vîbo£_ouçut
)

247 
	`¥ötf
("%lx ", ()
c
->
poöãrs
[
i
]);

248 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

250 i‡(
vîbo£_ouçut
)

251 
	`¥ötf
("%lx ", ()
c
->
poöãrs
[
‹dî
 - 1]);

252 i‡(
c
->
poöãrs
[
‹dî
 - 1] !
NULL
) {

253 
	`¥ötf
(" | ");

254 
c
 = c->
poöãrs
[
‹dî
 - 1];

259 
	`¥ötf
("\n");

260 
	}
}

267 
	$height
–
node
 * 
roŸ
 ) {

268 
h
 = 0;

269 
node
 * 
c
 = 
roŸ
;

270 !
c
->
is_Àaf
) {

271 
c
 = c->
poöãrs
[0];

272 
h
++;

274  
h
;

275 
	}
}

281 
	$∑th_to_roŸ
–
node
 * 
roŸ
,Çodê* 
chûd
 ) {

282 
Àngth
 = 0;

283 
node
 * 
c
 = 
chûd
;

284 
c
 !
roŸ
) {

285 
c
 = c->
∑ª¡
;

286 
Àngth
++;

288  
Àngth
;

289 
	}
}

301 
	$¥öt_åì
–
node
 * 
roŸ
 ) {

303 
node
 * 
n
 = 
NULL
;

304 
i
 = 0;

305 
ønk
 = 0;

306 
√w_ønk
 = 0;

308 i‡(
roŸ
 =
NULL
) {

309 
	`¥ötf
("EmptyÅree.\n");

312 
queue
 = 
NULL
;

313 
	`íqueue
(
roŸ
);

314  
queue
 !
NULL
 ) {

315 
n
 = 
	`dequeue
();

316 i‡(
n
->
∑ª¡
 !
NULL
 &&Ç =n->∑ª¡->
poöãrs
[0]) {

317 
√w_ønk
 = 
	`∑th_to_roŸ
–
roŸ
, 
n
 );

318 i‡(
√w_ønk
 !
ønk
) {

319 
ønk
 = 
√w_ønk
;

320 
	`¥ötf
("\n");

323 i‡(
vîbo£_ouçut
)

324 
	`¥ötf
("(%lx)", ()
n
);

325 
i
 = 0; i < 
n
->
num_keys
; i++) {

326 i‡(
vîbo£_ouçut
)

327 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[
i
]);

328 
	`¥ötf
("%d ", 
n
->
keys
[
i
]);

330 i‡(!
n
->
is_Àaf
)

331 
i
 = 0; i <
n
->
num_keys
; i++)

332 
	`íqueue
(
n
->
poöãrs
[
i
]);

333 i‡(
vîbo£_ouçut
) {

334 i‡(
n
->
is_Àaf
)

335 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[
‹dî
 - 1]);

337 
	`¥ötf
("%lx ", ()
n
->
poöãrs
[n->
num_keys
]);

339 
	`¥ötf
("| ");

341 
	`¥ötf
("\n");

342 
	}
}

348 
	$föd_™d_¥öt
(
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
) {

349 
ªc‹d
 * 
r
 = 
	`föd_åì
(
roŸ
, 
key
, 
vîbo£
);

350 i‡(
r
 =
NULL
)

351 
	`¥ötf
("Rec‹dÇŸ found undî key %d.\n", 
key
);

353 
	`¥ötf
("Recordát %lx -- key %d, value %s.\n",

354 ()
r
, 
key
,Ñ->
vÆue
);

355 
	}
}

361 
	$föd_™d_¥öt_ønge
–
node
 * 
roŸ
, 
key_°¨t
, 
key_íd
,

362 
boﬁ
 
vîbo£
 ) {

363 
i
;

364 
¨øy_size
 = 
key_íd
 - 
key_°¨t
 + 1;

365 
ªtu∫ed_keys
[
¨øy_size
];

366 * 
ªtu∫ed_poöãrs
[
¨øy_size
];

367 
num_found
 = 
	`föd_ønge
–
roŸ
, 
key_°¨t
, 
key_íd
, 
vîbo£
,

368 
ªtu∫ed_keys
, 
ªtu∫ed_poöãrs
 );

369 i‡(!
num_found
)

370 
	`¥ötf
("None found.\n");

372 
i
 = 0; i < 
num_found
; i++)

373 
	`¥ötf
("Key: %d Location: %lx Value: %s\n",

374 
ªtu∫ed_keys
[
i
],

375 ()
ªtu∫ed_poöãrs
[
i
],

376 ((
ªc‹d
 *)

377 
ªtu∫ed_poöãrs
[
i
])->
vÆue
);

379 
	}
}

387 
	$föd_ønge
–
node
 * 
roŸ
, 
key_°¨t
, 
key_íd
, 
boﬁ
 
vîbo£
,

388 
ªtu∫ed_keys
[], * 
ªtu∫ed_poöãrs
[]) {

389 
i
, 
num_found
;

390 
num_found
 = 0;

391 
node
 * 
n
 = 
	`föd_Àaf
–
roŸ
, 
key_°¨t
, 
vîbo£
 );

392 i‡(
n
 =
NULL
)  0;

393 
i
 = 0; i < 
n
->
num_keys
 &&Ç->
keys
[i] < 
key_°¨t
; i++) ;

394 i‡(
i
 =
n
->
num_keys
)  0;

395 
n
 !
NULL
) {

396  ; 
i
 < 
n
->
num_keys
 &&Ç->
keys
[i] <
key_íd
; i++) {

397 
ªtu∫ed_keys
[
num_found
] = 
n
->
keys
[
i
];

398 
ªtu∫ed_poöãrs
[
num_found
] = 
n
->
poöãrs
[
i
];

399 
num_found
++;

401 
n
 =Ç->
poöãrs
[
‹dî
 - 1];

402 
i
 = 0;

404  
num_found
;

405 
	}
}

413 
node
 * 
	$föd_Àaf
–
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
 ) {

414 
i
 = 0;

415 
node
 * 
c
 = 
roŸ
;

416 i‡(
c
 =
NULL
) {

417 i‡(
vîbo£
)

418 
	`¥ötf
("EmptyÅree.\n");

419  
c
;

421 !
c
->
is_Àaf
) {

422 i‡(
vîbo£
) {

423 
	`¥ötf
("[");

424 
i
 = 0; i < 
c
->
num_keys
 - 1; i++)

425 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

426 
	`¥ötf
("%d] ", 
c
->
keys
[
i
]);

428 
i
 = 0;

429 
i
 < 
c
->
num_keys
) {

430 i‡(
key
 >
c
->
keys
[
i
]) i++;

433 i‡(
vîbo£
)

434 
	`¥ötf
("%d ->\n", 
i
);

435 
c
 = (
node
 *)c->
poöãrs
[
i
];

437 i‡(
vîbo£
) {

438 
	`¥ötf
("Leaf [");

439 
i
 = 0; i < 
c
->
num_keys
 - 1; i++)

440 
	`¥ötf
("%d ", 
c
->
keys
[
i
]);

441 
	`¥ötf
("%d] ->\n", 
c
->
keys
[
i
]);

443  
c
;

444 
	}
}

450 
ªc‹d
 * 
	$föd_åì
–
node
 * 
roŸ
, 
key
, 
boﬁ
 
vîbo£
 ) {

451 
i
 = 0;

452 
node
 * 
c
 = 
	`föd_Àaf
–
roŸ
, 
key
, 
vîbo£
 );

453 i‡(
c
 =
NULL
)  NULL;

454 
i
 = 0; i < 
c
->
num_keys
; i++)

455 i‡(
c
->
keys
[
i
] =
key
) ;

456 i‡(
i
 =
c
->
num_keys
)

457  
NULL
;

459  (
ªc‹d
 *)
c
->
poöãrs
[
i
];

460 
	}
}

465 
	$cut
–
Àngth
 ) {

466 i‡(
Àngth
 % 2 == 0)

467  
Àngth
/2;

469  
Àngth
/2 + 1;

470 
	}
}

478 
ªc‹d
 * 
	$make_ªc‹d
(
vÆue
[]) {

479 
ªc‹d
 * 
√w_ªc‹d
 = (ªc‹d *)
	`mÆloc
((record));

480 i‡(
√w_ªc‹d
 =
NULL
) {

481 
	`≥º‹
("Record creation.");

482 
	`exô
(
EXIT_FAILURE
);

485 
	`°r˝y
(
√w_ªc‹d
->
vÆue
,value);

487  
√w_ªc‹d
;

488 
	}
}

494 
node
 * 
	$make_node
( ) {

495 
node
 * 
√w_node
;

496 
√w_node
 = 
	`mÆloc
((
node
));

497 i‡(
√w_node
 =
NULL
) {

498 
	`≥º‹
("Node creation.");

499 
	`exô
(
EXIT_FAILURE
);

501 
√w_node
->
keys
 = 
	`mÆloc
–(
‹dî
 - 1) * () );

502 i‡(
√w_node
->
keys
 =
NULL
) {

503 
	`≥º‹
("NewÇode keysárray.");

504 
	`exô
(
EXIT_FAILURE
);

506 
√w_node
->
poöãrs
 = 
	`mÆloc
–
‹dî
 * (*) );

507 i‡(
√w_node
->
poöãrs
 =
NULL
) {

508 
	`≥º‹
("NewÇodeÖointersárray.");

509 
	`exô
(
EXIT_FAILURE
);

511 
√w_node
->
is_Àaf
 = 
Ál£
;

512 
√w_node
->
num_keys
 = 0;

513 
√w_node
->
∑ª¡
 = 
NULL
;

514 
√w_node
->
√xt
 = 
NULL
;

515  
√w_node
;

516 
	}
}

521 
node
 * 
	$make_Àaf
( ) {

522 
node
 * 
Àaf
 = 
	`make_node
();

523 
Àaf
->
is_Àaf
 = 
åue
;

524  
Àaf
;

525 
	}
}

532 
	$gë_À·_ödex
(
node
 * 
∑ª¡
,Çodê* 
À·
) {

534 
À·_ödex
 = 0;

535 
À·_ödex
 <
∑ª¡
->
num_keys
 &&

536 
∑ª¡
->
poöãrs
[
À·_ödex
] !
À·
)

537 
À·_ödex
++;

538  
À·_ödex
;

539 
	}
}

545 
node
 * 
	$ö£π_öto_Àaf
–
node
 * 
Àaf
, 
key
, 
ªc‹d
 * 
poöãr
 ) {

547 
i
, 
ö£πi⁄_poöt
;

549 
ö£πi⁄_poöt
 = 0;

550 
ö£πi⁄_poöt
 < 
Àaf
->
num_keys
 &&Üóf->
keys
[ö£πi⁄_poöt] < 
key
)

551 
ö£πi⁄_poöt
++;

553 
i
 = 
Àaf
->
num_keys
; i > 
ö£πi⁄_poöt
; i--) {

554 
Àaf
->
keys
[
i
] =Üeaf->keys[i - 1];

555 
Àaf
->
poöãrs
[
i
] =Üeaf->pointers[i - 1];

557 
Àaf
->
keys
[
ö£πi⁄_poöt
] = 
key
;

558 
Àaf
->
poöãrs
[
ö£πi⁄_poöt
] = 
poöãr
;

559 
Àaf
->
num_keys
++;

560  
Àaf
;

561 
	}
}

569 
node
 * 
	$ö£π_öto_Àaf_a·î_•lôtög
(
node
 * 
roŸ
,Çodê* 
Àaf
, 
key
, 
ªc‹d
 * 
poöãr
) {

571 
node
 * 
√w_Àaf
;

572 * 
ãmp_keys
;

573 ** 
ãmp_poöãrs
;

574 
ö£πi⁄_ödex
, 
•lô
, 
√w_key
, 
i
, 
j
;

576 
√w_Àaf
 = 
	`make_Àaf
();

578 
ãmp_keys
 = 
	`mÆloc
–
‹dî
 * () );

579 i‡(
ãmp_keys
 =
NULL
) {

580 
	`≥º‹
("Temporary keysárray.");

581 
	`exô
(
EXIT_FAILURE
);

584 
ãmp_poöãrs
 = 
	`mÆloc
–
‹dî
 * (*) );

585 i‡(
ãmp_poöãrs
 =
NULL
) {

586 
	`≥º‹
("TemporaryÖointersárray.");

587 
	`exô
(
EXIT_FAILURE
);

590 
ö£πi⁄_ödex
 = 0;

591 
ö£πi⁄_ödex
 < 
‹dî
 - 1 && 
Àaf
->
keys
[ö£πi⁄_ödex] < 
key
)

592 
ö£πi⁄_ödex
++;

594 
i
 = 0, 
j
 = 0; i < 
Àaf
->
num_keys
; i++, j++) {

595 i‡(
j
 =
ö£πi⁄_ödex
) j++;

596 
ãmp_keys
[
j
] = 
Àaf
->
keys
[
i
];

597 
ãmp_poöãrs
[
j
] = 
Àaf
->
poöãrs
[
i
];

600 
ãmp_keys
[
ö£πi⁄_ödex
] = 
key
;

601 
ãmp_poöãrs
[
ö£πi⁄_ödex
] = 
poöãr
;

603 
Àaf
->
num_keys
 = 0;

605 
•lô
 = 
	`cut
(
‹dî
 - 1);

607 
i
 = 0; i < 
•lô
; i++) {

608 
Àaf
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

609 
Àaf
->
keys
[
i
] = 
ãmp_keys
[i];

610 
Àaf
->
num_keys
++;

613 
i
 = 
•lô
, 
j
 = 0; i < 
‹dî
; i++, j++) {

614 
√w_Àaf
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

615 
√w_Àaf
->
keys
[
j
] = 
ãmp_keys
[
i
];

616 
√w_Àaf
->
num_keys
++;

619 
	`‰ì
(
ãmp_poöãrs
);

620 
	`‰ì
(
ãmp_keys
);

622 
√w_Àaf
->
poöãrs
[
‹dî
 - 1] = 
Àaf
->pointers[order - 1];

623 
Àaf
->
poöãrs
[
‹dî
 - 1] = 
√w_Àaf
;

625 
i
 = 
Àaf
->
num_keys
; i < 
‹dî
 - 1; i++)

626 
Àaf
->
poöãrs
[
i
] = 
NULL
;

627 
i
 = 
√w_Àaf
->
num_keys
; i < 
‹dî
 - 1; i++)

628 
√w_Àaf
->
poöãrs
[
i
] = 
NULL
;

630 
√w_Àaf
->
∑ª¡
 = 
Àaf
->parent;

631 
√w_key
 = 
√w_Àaf
->
keys
[0];

633  
	`ö£π_öto_∑ª¡
(
roŸ
, 
Àaf
, 
√w_key
, 
√w_Àaf
);

634 
	}
}

641 
node
 * 
	$ö£π_öto_node
(
node
 * 
roŸ
,Çodê* 
n
,

642 
À·_ödex
, 
key
, 
node
 * 
right
) {

643 
i
;

645 
i
 = 
n
->
num_keys
; i > 
À·_ödex
; i--) {

646 
n
->
poöãrs
[
i
 + 1] =Ç->pointers[i];

647 
n
->
keys
[
i
] =Ç->keys[i - 1];

649 
n
->
poöãrs
[
À·_ödex
 + 1] = 
right
;

650 
n
->
keys
[
À·_ödex
] = 
key
;

651 
n
->
num_keys
++;

652  
roŸ
;

653 
	}
}

660 
node
 * 
	$ö£π_öto_node_a·î_•lôtög
(
node
 * 
roŸ
,Çodê* 
ﬁd_node
, 
À·_ödex
,

661 
key
, 
node
 * 
right
) {

663 
i
, 
j
, 
•lô
, 
k_¥ime
;

664 
node
 * 
√w_node
, * 
chûd
;

665 * 
ãmp_keys
;

666 
node
 ** 
ãmp_poöãrs
;

677 
ãmp_poöãrs
 = 
	`mÆloc
–(
‹dî
 + 1Ë* (
node
 *) );

678 i‡(
ãmp_poöãrs
 =
NULL
) {

679 
	`≥º‹
("TemporaryÖointersárray for splittingÇodes.");

680 
	`exô
(
EXIT_FAILURE
);

682 
ãmp_keys
 = 
	`mÆloc
–
‹dî
 * () );

683 i‡(
ãmp_keys
 =
NULL
) {

684 
	`≥º‹
("Temporary keysárray for splittingÇodes.");

685 
	`exô
(
EXIT_FAILURE
);

688 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
 + 1; i++, j++) {

689 i‡(
j
 =
À·_ödex
 + 1) j++;

690 
ãmp_poöãrs
[
j
] = 
ﬁd_node
->
poöãrs
[
i
];

693 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
; i++, j++) {

694 i‡(
j
 =
À·_ödex
) j++;

695 
ãmp_keys
[
j
] = 
ﬁd_node
->
keys
[
i
];

698 
ãmp_poöãrs
[
À·_ödex
 + 1] = 
right
;

699 
ãmp_keys
[
À·_ödex
] = 
key
;

705 
•lô
 = 
	`cut
(
‹dî
);

706 
√w_node
 = 
	`make_node
();

707 
ﬁd_node
->
num_keys
 = 0;

708 
i
 = 0; i < 
•lô
 - 1; i++) {

709 
ﬁd_node
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

710 
ﬁd_node
->
keys
[
i
] = 
ãmp_keys
[i];

711 
ﬁd_node
->
num_keys
++;

713 
ﬁd_node
->
poöãrs
[
i
] = 
ãmp_poöãrs
[i];

714 
k_¥ime
 = 
ãmp_keys
[
•lô
 - 1];

715 ++
i
, 
j
 = 0; i < 
‹dî
; i++, j++) {

716 
√w_node
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

717 
√w_node
->
keys
[
j
] = 
ãmp_keys
[
i
];

718 
√w_node
->
num_keys
++;

720 
√w_node
->
poöãrs
[
j
] = 
ãmp_poöãrs
[
i
];

721 
	`‰ì
(
ãmp_poöãrs
);

722 
	`‰ì
(
ãmp_keys
);

723 
√w_node
->
∑ª¡
 = 
ﬁd_node
->parent;

724 
i
 = 0; i <
√w_node
->
num_keys
; i++) {

725 
chûd
 = 
√w_node
->
poöãrs
[
i
];

726 
chûd
->
∑ª¡
 = 
√w_node
;

734  
	`ö£π_öto_∑ª¡
(
roŸ
, 
ﬁd_node
, 
k_¥ime
, 
√w_node
);

735 
	}
}

742 
node
 * 
	$ö£π_öto_∑ª¡
(
node
 * 
roŸ
,Çodê* 
À·
, 
key
,Çodê* 
right
) {

744 
À·_ödex
;

745 
node
 * 
∑ª¡
;

747 
∑ª¡
 = 
À·
->parent;

751 i‡(
∑ª¡
 =
NULL
)

752  
	`ö£π_öto_√w_roŸ
(
À·
, 
key
, 
right
);

762 
À·_ödex
 = 
	`gë_À·_ödex
(
∑ª¡
, 
À·
);

768 i‡(
∑ª¡
->
num_keys
 < 
‹dî
 - 1)

769  
	`ö£π_öto_node
(
roŸ
, 
∑ª¡
, 
À·_ödex
, 
key
, 
right
);

775  
	`ö£π_öto_node_a·î_•lôtög
(
roŸ
, 
∑ª¡
, 
À·_ödex
, 
key
, 
right
);

776 
	}
}

783 
node
 * 
	$ö£π_öto_√w_roŸ
(
node
 * 
À·
, 
key
,Çodê* 
right
) {

785 
node
 * 
roŸ
 = 
	`make_node
();

786 
roŸ
->
keys
[0] = 
key
;

787 
roŸ
->
poöãrs
[0] = 
À·
;

788 
roŸ
->
poöãrs
[1] = 
right
;

789 
roŸ
->
num_keys
++;

790 
roŸ
->
∑ª¡
 = 
NULL
;

791 
À·
->
∑ª¡
 = 
roŸ
;

792 
right
->
∑ª¡
 = 
roŸ
;

793  
roŸ
;

794 
	}
}

801 
node
 * 
	$°¨t_√w_åì
(
key
, 
ªc‹d
 * 
poöãr
) {

803 
node
 * 
roŸ
 = 
	`make_Àaf
();

804 
roŸ
->
keys
[0] = 
key
;

805 
roŸ
->
poöãrs
[0] = 
poöãr
;

806 
roŸ
->
poöãrs
[
‹dî
 - 1] = 
NULL
;

807 
roŸ
->
∑ª¡
 = 
NULL
;

808 
roŸ
->
num_keys
++;

809  
roŸ
;

810 
	}
}

820 
node
 * 
	$ö£π_åì
–
node
 * 
roŸ
, 
key
, 
vÆue
[] ) {

822 
ªc‹d
 * 
poöãr
;

823 
node
 * 
Àaf
;

829 i‡(
	`föd_åì
(
roŸ
, 
key
, 
Ál£
Ë!
NULL
)

830  
roŸ
;

835 
poöãr
 = 
	`make_ªc‹d
(
vÆue
);

842 i‡(
roŸ
 =
NULL
)

843  
	`°¨t_√w_åì
(
key
, 
poöãr
);

850 
Àaf
 = 
	`föd_Àaf
(
roŸ
, 
key
, 
Ál£
);

855 i‡(
Àaf
->
num_keys
 < 
‹dî
 - 1) {

856 
Àaf
 = 
	`ö£π_öto_Àaf
÷óf, 
key
, 
poöãr
);

857  
roŸ
;

864  
	`ö£π_öto_Àaf_a·î_•lôtög
(
roŸ
, 
Àaf
, 
key
, 
poöãr
);

865 
	}
}

878 
	$gë_√ighb‹_ödex
–
node
 * 
n
 ) {

880 
i
;

888 
i
 = 0; i <
n
->
∑ª¡
->
num_keys
; i++)

889 i‡(
n
->
∑ª¡
->
poöãrs
[
i
] ==Ç)

890  
i
 - 1;

893 
	`¥ötf
("Search forÇonexistentÖointerÅoÇode inÖarent.\n");

894 
	`¥ötf
("Node: %#lx\n", ()
n
);

895 
	`exô
(
EXIT_FAILURE
);

896 
	}
}

899 
node
 * 
	$ªmove_íåy_‰om_node
(
node
 * 
n
, 
key
,Çodê* 
poöãr
) {

901 
i
, 
num_poöãrs
;

904 
i
 = 0;

905 
n
->
keys
[
i
] !
key
)

906 
i
++;

907 ++
i
; i < 
n
->
num_keys
; i++)

908 
n
->
keys
[
i
 - 1] =Ç->keys[i];

912 
num_poöãrs
 = 
n
->
is_Àaf
 ?Ç->
num_keys
 :Ç->num_keys + 1;

913 
i
 = 0;

914 
n
->
poöãrs
[
i
] !
poöãr
)

915 
i
++;

916 ++
i
; i < 
num_poöãrs
; i++)

917 
n
->
poöãrs
[
i
 - 1] =Ç->pointers[i];

921 
n
->
num_keys
--;

925 i‡(
n
->
is_Àaf
)

926 
i
 = 
n
->
num_keys
; i < 
‹dî
 - 1; i++)

927 
n
->
poöãrs
[
i
] = 
NULL
;

929 
i
 = 
n
->
num_keys
 + 1; i < 
‹dî
; i++)

930 
n
->
poöãrs
[
i
] = 
NULL
;

932  
n
;

933 
	}
}

936 
node
 * 
	$adju°_roŸ
(
node
 * 
roŸ
) {

938 
node
 * 
√w_roŸ
;

945 i‡(
roŸ
->
num_keys
 > 0)

946  
roŸ
;

955 i‡(!
roŸ
->
is_Àaf
) {

956 
√w_roŸ
 = 
roŸ
->
poöãrs
[0];

957 
√w_roŸ
->
∑ª¡
 = 
NULL
;

964 
√w_roŸ
 = 
NULL
;

966 
	`‰ì
(
roŸ
->
keys
);

967 
	`‰ì
(
roŸ
->
poöãrs
);

968 
	`‰ì
(
roŸ
);

970  
√w_roŸ
;

971 
	}
}

980 
node
 * 
	$cﬂÀs˚_nodes
(
node
 * 
roŸ
,Çodê* 
n
,Çodê* 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime
) {

982 
i
, 
j
, 
√ighb‹_ö£πi⁄_ödex
, 
n_íd
;

983 
node
 * 
tmp
;

989 i‡(
√ighb‹_ödex
 == -1) {

990 
tmp
 = 
n
;

991 
n
 = 
√ighb‹
;

992 
√ighb‹
 = 
tmp
;

1001 
√ighb‹_ö£πi⁄_ödex
 = 
√ighb‹
->
num_keys
;

1008 i‡(!
n
->
is_Àaf
) {

1013 
√ighb‹
->
keys
[
√ighb‹_ö£πi⁄_ödex
] = 
k_¥ime
;

1014 
√ighb‹
->
num_keys
++;

1017 
n_íd
 = 
n
->
num_keys
;

1019 
i
 = 
√ighb‹_ö£πi⁄_ödex
 + 1, 
j
 = 0; j < 
n_íd
; i++, j++) {

1020 
√ighb‹
->
keys
[
i
] = 
n
->keys[
j
];

1021 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1022 
√ighb‹
->
num_keys
++;

1023 
n
->
num_keys
--;

1030 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1035 
i
 = 0; i < 
√ighb‹
->
num_keys
 + 1; i++) {

1036 
tmp
 = (
node
 *)
√ighb‹
->
poöãrs
[
i
];

1037 
tmp
->
∑ª¡
 = 
√ighb‹
;

1048 
i
 = 
√ighb‹_ö£πi⁄_ödex
, 
j
 = 0; j < 
n
->
num_keys
; i++, j++) {

1049 
√ighb‹
->
keys
[
i
] = 
n
->keys[
j
];

1050 
√ighb‹
->
poöãrs
[
i
] = 
n
->poöãrs[
j
];

1051 
√ighb‹
->
num_keys
++;

1053 
√ighb‹
->
poöãrs
[
‹dî
 - 1] = 
n
->pointers[order - 1];

1056 
roŸ
 = 
	`dñëe_íåy
‘oŸ, 
n
->
∑ª¡
, 
k_¥ime
,Ç);

1057 
	`‰ì
(
n
->
keys
);

1058 
	`‰ì
(
n
->
poöãrs
);

1059 
	`‰ì
(
n
);

1060  
roŸ
;

1061 
	}
}

1070 
node
 * 
	$ªdi°ribuã_nodes
(
node
 * 
roŸ
,Çodê* 
n
,Çodê* 
√ighb‹
, 
√ighb‹_ödex
,

1071 
k_¥ime_ödex
, 
k_¥ime
) {

1073 
i
;

1074 
node
 * 
tmp
;

1081 i‡(
√ighb‹_ödex
 != -1) {

1082 i‡(!
n
->
is_Àaf
)

1083 
n
->
poöãrs
[n->
num_keys
 + 1] =Ç->pointers[n->num_keys];

1084 
i
 = 
n
->
num_keys
; i > 0; i--) {

1085 
n
->
keys
[
i
] =Ç->keys[i - 1];

1086 
n
->
poöãrs
[
i
] =Ç->pointers[i - 1];

1088 i‡(!
n
->
is_Àaf
) {

1089 
n
->
poöãrs
[0] = 
√ighb‹
->poöãrs[√ighb‹->
num_keys
];

1090 
tmp
 = (
node
 *)
n
->
poöãrs
[0];

1091 
tmp
->
∑ª¡
 = 
n
;

1092 
√ighb‹
->
poöãrs
[√ighb‹->
num_keys
] = 
NULL
;

1093 
n
->
keys
[0] = 
k_¥ime
;

1094 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[√ighb‹->
num_keys
 - 1];

1097 
n
->
poöãrs
[0] = 
√ighb‹
->poöãrs[√ighb‹->
num_keys
 - 1];

1098 
√ighb‹
->
poöãrs
[√ighb‹->
num_keys
 - 1] = 
NULL
;

1099 
n
->
keys
[0] = 
√ighb‹
->keys[√ighb‹->
num_keys
 - 1];

1100 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] =Ç->keys[0];

1111 i‡(
n
->
is_Àaf
) {

1112 
n
->
keys
[n->
num_keys
] = 
√ighb‹
->keys[0];

1113 
n
->
poöãrs
[n->
num_keys
] = 
√ighb‹
->pointers[0];

1114 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[1];

1117 
n
->
keys
[n->
num_keys
] = 
k_¥ime
;

1118 
n
->
poöãrs
[n->
num_keys
 + 1] = 
√ighb‹
->pointers[0];

1119 
tmp
 = (
node
 *)
n
->
poöãrs
[n->
num_keys
 + 1];

1120 
tmp
->
∑ª¡
 = 
n
;

1121 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
] = 
√ighb‹
->keys[0];

1123 
i
 = 0; i < 
√ighb‹
->
num_keys
 - 1; i++) {

1124 
√ighb‹
->
keys
[
i
] =Çeighbor->keys[i + 1];

1125 
√ighb‹
->
poöãrs
[
i
] =Çeighbor->pointers[i + 1];

1127 i‡(!
n
->
is_Àaf
)

1128 
√ighb‹
->
poöãrs
[
i
] =Çeighbor->pointers[i + 1];

1135 
n
->
num_keys
++;

1136 
√ighb‹
->
num_keys
--;

1138  
roŸ
;

1139 
	}
}

1147 
node
 * 
	$dñëe_íåy
–
node
 * 
roŸ
,Çodê* 
n
, 
key
, * 
poöãr
 ) {

1149 
mö_keys
;

1150 
node
 * 
√ighb‹
;

1151 
√ighb‹_ödex
;

1152 
k_¥ime_ödex
, 
k_¥ime
;

1153 
ˇ∑côy
;

1157 
n
 = 
	`ªmove_íåy_‰om_node
“, 
key
, 
poöãr
);

1162 i‡(
n
 =
roŸ
)

1163  
	`adju°_roŸ
(
roŸ
);

1174 
mö_keys
 = 
n
->
is_Àaf
 ? 
	`cut
(
‹dî
 - 1) : cut(order) - 1;

1180 i‡(
n
->
num_keys
 >
mö_keys
)

1181  
roŸ
;

1195 
√ighb‹_ödex
 = 
	`gë_√ighb‹_ödex
–
n
 );

1196 
k_¥ime_ödex
 = 
√ighb‹_ödex
 == -1 ? 0 :Çeighbor_index;

1197 
k_¥ime
 = 
n
->
∑ª¡
->
keys
[
k_¥ime_ödex
];

1198 
√ighb‹
 = 
√ighb‹_ödex
 =-1 ? 
n
->
∑ª¡
->
poöãrs
[1] :

1199 
n
->
∑ª¡
->
poöãrs
[
√ighb‹_ödex
];

1201 
ˇ∑côy
 = 
n
->
is_Àaf
 ? 
‹dî
 : order - 1;

1205 i‡(
√ighb‹
->
num_keys
 + 
n
->num_key†< 
ˇ∑côy
)

1206  
	`cﬂÀs˚_nodes
(
roŸ
, 
n
, 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime
);

1211  
	`ªdi°ribuã_nodes
(
roŸ
, 
n
, 
√ighb‹
, 
√ighb‹_ödex
, 
k_¥ime_ödex
, 
k_¥ime
);

1212 
	}
}

1218 
node
 * 
	$dñëe_åì
(
node
 * 
roŸ
, 
key
) {

1220 
node
 * 
key_Àaf
;

1221 
ªc‹d
 * 
key_ªc‹d
;

1223 
key_ªc‹d
 = 
	`föd_åì
(
roŸ
, 
key
, 
Ál£
);

1224 
key_Àaf
 = 
	`föd_Àaf
(
roŸ
, 
key
, 
Ál£
);

1225 i‡(
key_ªc‹d
 !
NULL
 && 
key_Àaf
 != NULL) {

1226 
roŸ
 = 
	`dñëe_íåy
‘oŸ, 
key_Àaf
, 
key
, 
key_ªc‹d
);

1227 
	`‰ì
(
key_ªc‹d
);

1229  
roŸ
;

1230 
	}
}

1233 
	$de°roy_åì_nodes
(
node
 * 
roŸ
) {

1234 
i
;

1235 i‡(
roŸ
->
is_Àaf
)

1236 
i
 = 0; i < 
roŸ
->
num_keys
; i++)

1237 
	`‰ì
(
roŸ
->
poöãrs
[
i
]);

1239 
i
 = 0; i < 
roŸ
->
num_keys
 + 1; i++)

1240 
	`de°roy_åì_nodes
(
roŸ
->
poöãrs
[
i
]);

1241 
	`‰ì
(
roŸ
->
poöãrs
);

1242 
	`‰ì
(
roŸ
->
keys
);

1243 
	`‰ì
(
roŸ
);

1244 
	}
}

1247 
node
 * 
	$de°roy_åì
(
node
 * 
roŸ
) {

1248 
	`de°roy_åì_nodes
(
roŸ
);

1249  
NULL
;

1250 
	}
}

1253 
	$öô_‰ì_li°
(){

1254 
hód
 = (
‰ì_li°
 *)
	`mÆloc
((free_list));

1255 
‰ì_li°
 *
√w
 = (‰ì_li° *)
	`mÆloc
((free_list));

1258 
hód
->
off£t
 = 4096;

1259 
hód
->
is_‰ì
 = 
åue
;

1260 
hód
->
√xt
 = 
√w
;

1261 
√w
->
off£t
 = 0;

1262 
√w
->
is_‰ì
 = 
Ál£
;

1263 
√w
->
√xt
 = 
NULL
;

1264 
	}
}

1268 
öt64_t
 
	$sˇn_‰ì_li°
(){

1269 
öt64_t
 
œ°_off£t
;

1270 
‰ì_li°
 *
poöãr
;

1271 
‰ì_li°
 *
√w
;

1273 
poöãr
 = 
hód
;Öoöãr->
off£t
 !0 &&Öoöãr->
√xt
 !
NULL
;Öointer =Öointer->next){

1274 if(
poöãr
->
is_‰ì
 =
åue
){

1275  
poöãr
->
off£t
;

1277 
œ°_off£t
 = 
poöãr
->
off£t
;

1280 
poöãr
->
off£t
 = 
œ°_off£t
 + 4096;

1281 
poöãr
->
is_‰ì
 = 
åue
;

1282 
√w
 = (
‰ì_li°
 *)
	`mÆloc
((free_list));

1283 
√w
->
off£t
 = 0;

1284 
√w
->
is_‰ì
 = 
Ál£
;

1285 
poöãr
->
√xt
 = 
√w
;

1286 
√w
->
√xt
 = 
NULL
;

1288  
poöãr
->
off£t
;

1289 
	}
}

1293 
öt64_t
 
	$sˇn_u£_li°
(){

1294 
öt64_t
 
cou¡
 = 0;

1295 
‰ì_li°
 *
poöãr
;

1297 
poöãr
 = 
hód
;Öoöãr->
off£t
 !0 &&Öoöãr->
√xt
 !
NULL
;Öointer =Öointer->next){

1298 if(
poöãr
->
is_‰ì
 =
Ál£
){

1299 
cou¡
++;

1303  
cou¡
;

1304 
	}
}

1310 
	$ch™ge_‰ì_li°
(
öt64_t
 
off£t
){

1311 
‰ì_li°
 *
poöãr
;

1313 
poöãr
 = 
hód
;Öoöãr->
off£t
 !0 &&Öoöãr->
√xt
 !
NULL
;Öointer =Öointer->next){

1314 if(
poöãr
->
off£t
 == offset){

1315 
poöãr
->
is_‰ì
 = 
Ál£
;

1318 
	}
}

1323 
	$vacuum_‰ì_li°
(
öt64_t
 
off£t
){

1324 
‰ì_li°
 *
poöãr
;

1327 
poöãr
 = 
hód
;Öoöãr->
off£t
 !0 &&Öoöãr->
√xt
 !
NULL
;Öointer =Öointer->next){

1328 if(
poöãr
->
off£t
 == offset){

1329 
poöãr
->
is_‰ì
 = 
åue
;

1332 
	}
}

1339 
	$öô_hódî_∑ge
(){

1340 
öt64_t
 
Â_off£t
 = 4096;

1342 
öt64_t
 
Ω_off£t
 = 0;

1343 
öt64_t
 
≤um
 = 1;

1349 
	`f£eko
(
Â
, 
deÁu…_off£t
, 
SEEK_SET
);

1350 
	`fwrôe
(&
Â_off£t
, 8, 1, 
Â
);

1351 
	`fwrôe
(&
Ω_off£t
, 8, 1, 
Â
);

1352 
	`fwrôe
(&
≤um
, 8, 1, 
Â
);

1353 
	}
}

1354 
	$modify_hódî_∑ge
(){

1355 
öt64_t
 
Â_off£t
 = 
	`sˇn_‰ì_li°
();

1356 
öt64_t
 
≤um
 = 
	`sˇn_u£_li°
();

1359 
	`f£eko
(
Â
, 
deÁu…_off£t
, 
SEEK_SET
);

1360 
	`fwrôe
(&
Â_off£t
, 8, 1, 
Â
);

1362 
	`f£eko
(
Â
, 8, 
SEEK_CUR
);

1363 
	`fwrôe
(&
≤um
, 8, 1, 
Â
);

1364 
	}
}

1365 
	$öô_Àaf_∑ge
(){

1367 
	}
}

1368 
	$modify_Àaf_∑ge
(){

1370 
	}
}

1371 
	$öô_öã∫Æ_∑ge
(){

1373 
	}
}

1374 
	$modify_öã∫Æ_∑ge
(){

1376 
	}
}

1384 
	$›í_db
(*
∑th«me
){

1385 
Â
 = 
	`f›í
(
∑th«me
, "a+");

1386 if(
Â
 =
NULL
){

1387 
	`Ârötf
(
°dîr
, "Error : fileÖath\n");

1388 
	`exô
(
EXIT_FAILURE
);

1392 
deÁu…_off£t
 = 
	`·ñlo
(
Â
);

1395 
	`öô_‰ì_li°
();

1398 
	`öô_hódî_∑ge
();

1401 
	`fÊush
(
Â
);

1402 
fd
 = 
	`fûío
(
Â
);

1405 
	}
}

1411 
	$ö£π
(
öt64_t
 
key
, *
vÆue
){

1414 
	}
}

1421 *
	$föd
(
öt64_t
 
key
){

1423 
	}
}

1429 
	$dñëe
(
öt64_t
 
key
){

1431 
	}
}

	@main.c

1 
	~"b±.h
"

5 
	$maö
–
¨gc
, ** 
¨gv
 ) {

7 * 
öput_fûe
;

8 
FILE
 * 
Â
;

9 
node
 * 
roŸ
;

10 
öput
, 
ønge2
;

11 
ö°ru˘i⁄
;

12 
li˚n£_∑π
;

14 
roŸ
 = 
NULL
;

15 
vîbo£_ouçut
 = 
Ál£
;

17 i‡(
¨gc
 > 1) {

18 
‹dî
 = 
	`©oi
(
¨gv
[1]);

19 i‡(
‹dî
 < 
MIN_ORDER
 || ordî > 
MAX_ORDER
) {

20 
	`Ârötf
(
°dîr
, "InvÆid ordî: %d .\n\n", 
‹dî
);

21 
	`ußge_3
();

22 
	`exô
(
EXIT_FAILURE
);

26 
	`li˚n£_nŸi˚
();

27 
	`ußge_1
();

28 
	`ußge_2
();

30 i‡(
¨gc
 > 2) {

31 
öput_fûe
 = 
¨gv
[2];

32 
Â
 = 
	`f›í
(
öput_fûe
, "r");

33 i‡(
Â
 =
NULL
) {

34 
	`≥º‹
("Failure open input file.");

35 
	`exô
(
EXIT_FAILURE
);

37 !
	`„of
(
Â
)) {

38 
	`fsˇnf
(
Â
, "%d\n", &
öput
);

39 
roŸ
 = 
	`ö£π_åì
‘oŸ, 
öput
, input);

41 
	`f˛o£
(
Â
);

42 
	`¥öt_åì
(
roŸ
);

45 
	`¥ötf
("> ");

46 
	`sˇnf
("%c", &
ö°ru˘i⁄
Ë!
EOF
) {

47 
ö°ru˘i⁄
) {

49 
	`sˇnf
("%d", &
öput
);

50 
roŸ
 = 
	`dñëe_åì
‘oŸ, 
öput
);

51 
	`¥öt_åì
(
roŸ
);

54 
	`sˇnf
("%d", &
öput
);

55 
roŸ
 = 
	`ö£π_åì
‘oŸ, 
öput
, input);

56 
	`¥öt_åì
(
roŸ
);

60 
	`sˇnf
("%d", &
öput
);

61 
	`föd_™d_¥öt
(
roŸ
, 
öput
, 
ö°ru˘i⁄
 == 'p');

64 
	`sˇnf
("%d %d", &
öput
, &
ønge2
);

65 i‡(
öput
 > 
ønge2
) {

66 
tmp
 = 
ønge2
;

67 
ønge2
 = 
öput
;

68 
öput
 = 
tmp
;

70 
	`föd_™d_¥öt_ønge
(
roŸ
, 
öput
, 
ønge2
, 
ö°ru˘i⁄
 == 'p');

73 
	`¥öt_Àaves
(
roŸ
);

76 
	`gëch¨
() != ()'\n');

77  
EXIT_SUCCESS
;

80 
	`¥öt_åì
(
roŸ
);

83 
vîbo£_ouçut
 = !verbose_output;

86 i‡(
roŸ
)

87 
roŸ
 = 
	`de°roy_åì
(root);

88 
	`¥öt_åì
(
roŸ
);

91 
	`ußge_2
();

94 
	`gëch¨
() != ()'\n');

95 
	`¥ötf
("> ");

97 
	`¥ötf
("\n");

99  
EXIT_SUCCESS
;

100 
	}
}

	@
1
.
0
2
13
bpt.c
main.c
