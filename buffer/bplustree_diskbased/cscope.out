cscope 15 $HOME/mysql/Lab/buffer/bplustree_diskbased -q 0000000225 0000031423
	@include/bpt.h

1 #i‚de‡
__BPT_H__


2 
	#__BPT_H__


	)

4 
›í_èbÀ
(c⁄° * 
fûíame
);

5 * 
föd
(
èbÀ_id
, 
uöt64_t
 
key
);

6 
ö£π
(
èbÀ_id
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

7 
dñëe
(
èbÀ_id
, 
uöt64_t
 
key
);

9 
¥öt_åì
();

13 
öô_db
(
num_buf
);

15 
˛o£_èbÀ
(
èbÀ_id
);

17 
shutdown_db
();

	@include/file.h

1 
	~<°ddef.h
>

2 
	~<öây≥s.h
>

4 
	#BPTREE_INTERNAL_ORDER
 249

5 
	#BPTREE_LEAF_ORDER
 32

6 

	)

7 
	#PAGE_SIZE
 4096

	)

9 
	#SIZE_KEY
 8

	)

10 
	#SIZE_VALUE
 120

	)

11 
	#SIZE_RECORD
 (
SIZE_KEY
 + 
SIZE_VALUE
)

	)

13 
	#BPTREE_MAX_NODE
 (1024 * 1024)

14 

	)

25 
	s_Rec‹d
 {

26 
uöt64_t
 
	mkey
;

27 
	mvÆue
[
SIZE_VALUE
];

28 } 
	tRec‹d
;

30 
	s_I¡î«lRec‹d
 {

31 
uöt64_t
 
	mkey
;

32 
off_t
 
	moff£t
;

33 } 
	tI¡î«lRec‹d
;

35 
	s_Page
 {

36 
	mbyãs
[
PAGE_SIZE
];

39 
off_t
 
	mfûe_off£t
;

40 } 
	tPage
;

42 
	s_FªePage
 {

43 
off_t
 
	m√xt
;

44 
	mª£rved
[
PAGE_SIZE
 - 8];

47 
off_t
 
	mfûe_off£t
;

48 } 
	tFªePage
;

50 
	s_HódîPage
 {

51 
off_t
 
	m‰ìli°
;

52 
off_t
 
	mroŸ_off£t
;

53 
uöt64_t
 
	mnum_∑ges
;

54 
	mª£rved
[
PAGE_SIZE
 - 24];

57 
off_t
 
	mfûe_off£t
;

58 } 
	tHódîPage
;

60 
	#INTERNAL_KEY
(
n
, 
i
Ë(“)->
úec‹ds
[(i)+1].
key
)

	)

61 
	#INTERNAL_OFFSET
(
n
, 
i
Ë(“)->
úec‹ds
[(i)].
off£t
)

	)

62 
	s_I¡î«lPage
 {

65 
off_t
 
	m∑ª¡
;

66 
	mis_Àaf
;

67 
	mnum_keys
;

68 
	mª£rved
[112 - 16];

69 
I¡î«lRec‹d
 
	múec‹ds
[
BPTREE_INTERNAL_ORDER
];

71 
	m•a˚
[
PAGE_SIZE
];

74 
off_t
 
	mfûe_off£t
;

75 } 
	tI¡î«lPage
;

77 
	#LEAF_KEY
(
n
, 
i
Ë(“)->
ªc‹ds
[(i)].
key
)

	)

78 
	#LEAF_VALUE
(
n
, 
i
Ë(“)->
ªc‹ds
[(i)].
vÆue
)

	)

79 
	s_LófPage
 {

82 
off_t
 
	m∑ª¡
;

83 
	mis_Àaf
;

84 
	mnum_keys
;

85 
	mª£rved
[120 - 16];

86 
off_t
 
	msiblög
;

87 
Rec‹d
 
	mªc‹ds
[
BPTREE_LEAF_ORDER
-1];

89 
	m•a˚
[
PAGE_SIZE
];

93 
off_t
 
	mfûe_off£t
;

94 } 
	tLófPage
;

96 
	s_NodePage
 {

99 
off_t
 
	m∑ª¡
;

100 
	mis_Àaf
;

101 
	mnum_keys
;

103 
	m•a˚
[
PAGE_SIZE
];

107 
off_t
 
	mfûe_off£t
;

108 } 
	tNodePage
;

111 
›í_èbÀ
(c⁄° * 
fûíame
);

114 
˛o£_db
();

117 
off_t
 
gë_‰ì_∑ge
();

120 
put_‰ì_∑ge
(
off_t
 
∑ge_off£t
);

123 
ex∑nd_fûe
(
size_t
 
˙t_∑ge_to_ex∑nd
);

126 
lﬂd_∑ge
(
off_t
 
off£t
, 
Page
* 
∑ge
);

129 
Êush_∑ge
(
Page
* 
∑ge
);

131 
HódîPage
 
dbhódî
[10];

135 
	s_LRU_˛ock
{

136 
	m˛ock_h™d
;

137 
	mª„ªn˚_bôs
;

138 } 
	tLRU_˛ock
;

141 
	s_Buf„r
{

142 
Page
 *
	m‰ame
;

143 
	mèbÀ_id
;

144 
off_t
 
	m∑ge_off£t
;

145 
	mis_dúty
;

146 
	mpö_cou¡
;

147 
LRU_˛ock
 
	mc⁄åﬁ
;

148 } 
	tBuf„r
;

	@src/bpt.c

4 
	#Vîsi⁄
 "1.14"

	)

57 
	~<°dio.h
>

58 
	~<°dlib.h
>

59 
	~<°dboﬁ.h
>

60 
	~<°döt.h
>

61 
	~<°rög.h
>

62 
	~<öây≥s.h
>

63 
	~<as£π.h
>

64 
	~<f˙é.h
>

65 
	~<uni°d.h
>

66 
	~"b±.h
"

67 
	~"fûe.h
"

68 #ifde‡
WINDOWS


69 
	#boﬁ
 

	)

70 
	#Ál£
 0

	)

71 
	#åue
 1

	)

78 
	#MIN_ORDER
 3

	)

79 
	#MAX_ORDER
 256

	)

82 
	#LICENSE_FILE
 "LICENSE.txt"

	)

83 
	#LICENSE_WARRANTEE
 0

	)

84 
	#LICENSE_WARRANTEE_START
 592

	)

85 
	#LICENSE_WARRANTEE_END
 624

	)

86 
	#LICENSE_CONDITIONS
 1

	)

87 
	#LICENSE_CONDITIONS_START
 70

	)

88 
	#LICENSE_CONDITIONS_END
 625

	)

91 
HódîPage
 
dbhódî
[10];

92 
dbfûe
[10];

93 
	gèbÀ_ids
[10] = {0,};

105 
	g‹dî_öã∫Æ
 = 
BPTREE_INTERNAL_ORDER
;

106 
	g‹dî_Àaf
 = 
BPTREE_LEAF_ORDER
;

113 
boﬁ
 
	gvîbo£_ouçut
 = 
Ál£
;

116 
Buf„r
 *
	gbuf_mgr
;

117 
	gbuf_size
 = -1;

123 
li˚n£_nŸi˚
( );

124 
¥öt_li˚n£
–
li˚n˚_∑π
 );

125 
ußge_1
( );

126 
ußge_2
( );

127 
föd_™d_¥öt
(
uöt64_t
 
key
);

128 
boﬁ
 
föd_Àaf
(
uöt64_t
 
key
, 
LófPage
* 
out_Àaf_node
);

131 
°¨t_√w_åì
(
uöt64_t
 
key
, c⁄° * 
vÆue
);

132 
ö£π_öto_Àaf
(
LófPage
* 
Àaf_node
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

133 
ö£π_öto_Àaf_a·î_•lôtög
(
LófPage
* 
Àaf_node
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

134 
ö£π_öto_∑ª¡
(
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
);

135 
ö£π_öto_√w_roŸ
(
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
);

136 
gë_À·_ödex
(
I¡î«lPage
* 
∑ª¡
, 
off_t
 
À·_off£t
);

137 
ö£π_öto_node
(
I¡î«lPage
 * 
∑ª¡
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
);

138 
ö£π_öto_node_a·î_•lôtög
(
I¡î«lPage
* 
∑ª¡
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
);

141 
gë_√ighb‹_ödex
(
NodePage
* 
node_∑ge
);

142 
adju°_roŸ
();

143 
cﬂÀs˚_nodes
(
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
,

144 
√ighb‹_ödex
, 
k_¥ime
);

145 
ªdi°ribuã_nodes
(
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
,

146 
√ighb‹_ödex
,

147 
k_¥ime_ödex
, 
k_¥ime
);

148 
dñëe_íåy
(
NodePage
* 
node_∑ge
, 
uöt64_t
 
key
);

157 
	$li˚n£_nŸi˚
( ) {

158 
	`¥ötf
("bpt version %s -- Copyright (C) 2010 Amittai Aviram "

159 "hâp://www.amôèi.com\n", 
Vîsi⁄
);

160 
	`¥ötf
("ThisÖrogram comes with ABSOLUTELY NO WARRANTY; for details "

164 
	}
}

169 
	$¥öt_li˚n£
–
li˚n£_∑π
 ) {

170 
°¨t
, 
íd
, 
löe
;

171 
FILE
 * 
Â
;

172 
buf„r
[0x100];

174 
li˚n£_∑π
) {

175 
LICENSE_WARRANTEE
:

176 
°¨t
 = 
LICENSE_WARRANTEE_START
;

177 
íd
 = 
LICENSE_WARRANTEE_END
;

179 
LICENSE_CONDITIONS
:

180 
°¨t
 = 
LICENSE_CONDITIONS_START
;

181 
íd
 = 
LICENSE_CONDITIONS_END
;

187 
Â
 = 
	`f›í
(
LICENSE_FILE
, "r");

188 i‡(
Â
 =
NULL
) {

189 
	`≥º‹
("print_license: fopen");

190 
	`exô
(
EXIT_FAILURE
);

192 
löe
 = 0;Üöê< 
°¨t
;Üine++)

193 
	`fgës
(
buf„r
, (buf„r), 
Â
);

194  ; 
löe
 < 
íd
;Üine++) {

195 
	`fgës
(
buf„r
, (buf„r), 
Â
);

196 
	`¥ötf
("%s", 
buf„r
);

198 
	`f˛o£
(
Â
);

199 
	}
}

203 
	$ußge_1
( ) {

204 
	`¥ötf
("B+ Tªêo‡Ordî %d(I¡î«l).\n", 
‹dî_öã∫Æ
);

205 
	`¥ötf
("Following Silberschatz, Korth, Sidarshan, Database Concepts, "

210 
	`¥ötf
("(%d <‹dî <%d).\n", 
MIN_ORDER
, 
MAX_ORDER
);

211 
	`¥ötf
("To start with input fromá file ofÇewline-delimited integers, \n"

214 
	}
}

218 
	$ußge_2
( ) {

219 
	`¥ötf
("Enterány ofÅhe following commandsáfterÅheÖrompt > :\n"

235 
	}
}

238 
	$›í_èbÀ
(c⁄° * 
fûíame
) {

239 
i
;

242 
i
 = 0; i < 10; i++){

243 if(
èbÀ_ids
[
i
] == 0)

248 if(
i
 == 10){

252 
dbfûe
[
i
] = 
	`›í
(
fûíame
, 
O_RDWR
);

253 i‡(
dbfûe
[
i
] < 0) {

255 
dbfûe
[
i
] = 
	`›í
(
fûíame
, 
O_CREAT
|
O_RDWR
, 
S_IRUSR
|
S_IWUSR
);

256 i‡(
dbfûe
[
i
] < 0) {

257 
	`as£π
("failedÅo createÇew db file");

261 
	`mem£t
((
dbhódî
+
i
), 0, 
PAGE_SIZE
);

262 
dbhódî
[
i
].
‰ìli°
 = 0;

263 
dbhódî
[
i
].
roŸ_off£t
 = 0;

264 
dbhódî
[
i
].
num_∑ges
 = 1;

265 
dbhódî
[
i
].
fûe_off£t
 = 0;

266 
	`Êush_∑ge
((
Page
*)(
dbhódî
+
i
));

269 
	`lﬂd_∑ge
(0, (
Page
*)(
dbhódî
+
i
));

270 
dbhódî
[
i
].
fûe_off£t
 = 0;

273  
i
+1;

274 
	}
}

277 
	$˛o£_db
() {

278 
	`˛o£
(
dbfûe
[
i
]);

279 
	}
}

294 
off_t
 
	gqueue
[
BPTREE_MAX_NODE
];

295 
	$¥öt_åì
() {

297 
i
;

298 
‰⁄t
 = 0;

299 
ª¨
 = 0;

301 i‡(
dbhódî
.
roŸ_off£t
 == 0) {

302 
	`¥ötf
("EmptyÅree.\n");

306 
queue
[
ª¨
] = 
dbhódî
.
roŸ_off£t
;

307 
ª¨
++;

308 
queue
[
ª¨
] = 0;

309 
ª¨
++;

310 
‰⁄t
 < 
ª¨
) {

311 
off_t
 
∑ge_off£t
 = 
queue
[
‰⁄t
];

312 
‰⁄t
++;

314 i‡(
∑ge_off£t
 == 0) {

315 
	`¥ötf
("\n");

317 i‡(
‰⁄t
 =
ª¨
) ;

320 
queue
[
ª¨
] = 0;

321 
ª¨
++;

325 
NodePage
 
node_∑ge
;

326 
	`lﬂd_∑ge
(
∑ge_off£t
, (
Page
*)&
node_∑ge
);

327 i‡(
node_∑ge
.
is_Àaf
 == 1) {

329 
LófPage
* 
Àaf_node
 = (LófPage*)&
node_∑ge
;

330 
i
 = 0; i < 
Àaf_node
->
num_keys
; i++) {

331 
	`¥ötf
("%" 
PRIu64
 " ", 
	`LEAF_KEY
(
Àaf_node
, 
i
));

333 
	`¥ötf
("| ");

336 
I¡î«lPage
* 
öã∫Æ_node
 = (I¡î«lPage*)&
node_∑ge
;

337 
i
 = 0; i < 
öã∫Æ_node
->
num_keys
; i++) {

338 
	`¥ötf
("%" 
PRIu64
 " ", 
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
));

339 
queue
[
ª¨
] = 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
);

340 
ª¨
++;

342 
queue
[
ª¨
] = 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
);

343 
ª¨
++;

344 
	`¥ötf
("| ");

347 
	}
}

352 
	$föd_™d_¥öt
(
uöt64_t
 
key
) {

353 * 
vÆue_found
 = 
NULL
;

354 
vÆue_found
 = 
	`föd
(
key
);

355 i‡(
vÆue_found
 =
NULL
) {

356 
	`¥ötf
("Rec‹dÇŸ found undî key %" 
PRIu64
 ".\n", 
key
);

359 
	`¥ötf
("key %" 
PRIu64
 ", vÆuê[%s].\n", 
key
, 
vÆue_found
);

360 
	`‰ì
(
vÆue_found
);

362 
	}
}

369 
boﬁ
 
	$föd_Àaf
(
uöt64_t
 
key
, 
LófPage
* 
out_Àaf_node
) {

370 
i
 = 0;

371 
off_t
 
roŸ_off£t
 = 
dbhódî
.root_offset;

373 i‡(
roŸ_off£t
 == 0) {

374  
Ál£
;

377 
NodePage
 
∑ge
;

378 
	`lﬂd_∑ge
(
roŸ_off£t
, (
Page
*)&
∑ge
);

380 !
∑ge
.
is_Àaf
) {

381 
I¡î«lPage
* 
öã∫Æ_node
 = (I¡î«lPage*)&
∑ge
;

383 
i
 = 0;

384 
i
 < 
öã∫Æ_node
->
num_keys
) {

385 i‡(
key
 >
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
)) i++;

389 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
), (
Page
*)&
∑ge
);

392 
	`mem˝y
(
out_Àaf_node
, &
∑ge
, (
LófPage
));

394  
åue
;

395 
	}
}

401 * 
	$föd
(
èbÀ_id
, 
uöt64_t
 
key
) {

402 
i
 = 0;

403 * 
out_vÆue
;

405 
LófPage
 
Àaf_node
;

406 i‡(!
	`föd_Àaf
(
key
, &
Àaf_node
)) {

407  
NULL
;

410 
i
 = 0; i < 
Àaf_node
.
num_keys
; i++) {

411 i‡(
	`LEAF_KEY
(&
Àaf_node
, 
i
Ë=
key
) {

412 
out_vÆue
 = (*)
	`mÆloc
(
SIZE_VALUE
 * ());

413 
	`mem˝y
(
out_vÆue
, 
	`LEAF_VALUE
(&
Àaf_node
, 
i
), 
SIZE_VALUE
);

414  
out_vÆue
;

418  
NULL
;

419 
	}
}

424 
	$cut
–
Àngth
 ) {

425 i‡(
Àngth
 % 2 == 0)

426  
Àngth
/2;

428  
Àngth
/2 + 1;

429 
	}
}

436 
	$gë_À·_ödex
(
I¡î«lPage
* 
∑ª¡
, 
off_t
 
À·_off£t
) {

438 
À·_ödex
 = 0;

439 
À·_ödex
 <
∑ª¡
->
num_keys
 &&

440 
	`INTERNAL_OFFSET
(
∑ª¡
, 
À·_ödex
Ë!
À·_off£t
)

441 
À·_ödex
++;

442  
À·_ödex
;

443 
	}
}

449 
	$ö£π_öto_Àaf
(
LófPage
* 
Àaf_node
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

450 
ö£πi⁄_poöt
;

451 
i
;

453 
ö£πi⁄_poöt
 = 0;

454 
ö£πi⁄_poöt
 < 
Àaf_node
->
num_keys
 &&

455 
	`LEAF_KEY
(
Àaf_node
, 
ö£πi⁄_poöt
Ë< 
key
)

456 
ö£πi⁄_poöt
++;

459 
i
 = 
Àaf_node
->
num_keys
 - 1; i >
ö£πi⁄_poöt
; i--) {

460 
	`LEAF_KEY
(
Àaf_node
, 
i
+1) = LEAF_KEY(leaf_node, i);

461 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf_node
, 
i
+1), LEAF_VALUE÷óf_node, i), 
SIZE_VALUE
);

464 
	`LEAF_KEY
(
Àaf_node
, 
ö£πi⁄_poöt
Ë
key
;

465 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf_node
, 
ö£πi⁄_poöt
), 
vÆue
, 
SIZE_VALUE
);

466 
Àaf_node
->
num_keys
++;

469 
	`Êush_∑ge
((
Page
*)
Àaf_node
);

470 
	}
}

477 
	$ö£π_öto_Àaf_a·î_•lôtög
(
LófPage
* 
Àaf
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

479 
ö£πi⁄_ödex
, 
•lô
, 
i
, 
j
;

480 
uöt64_t
 
√w_key
;

483 
LófPage
 
√w_Àaf
;

484 
√w_Àaf
.
is_Àaf
 = 
åue
;

485 
√w_Àaf
.
num_keys
 = 0;

487 
ö£πi⁄_ödex
 = 0;

488 
ö£πi⁄_ödex
 < 
‹dî_Àaf
 - 1 && 
	`LEAF_KEY
(
Àaf
, in£πi⁄_ödexË< 
key
)

489 
ö£πi⁄_ödex
++;

491 
•lô
 = 
	`cut
(
‹dî_Àaf
 - 1);

493 i‡(
ö£πi⁄_ödex
 < 
•lô
) {

495 
i
 = 
•lô
 - 1, 
j
 = 0; i < 
‹dî_Àaf
 - 1; i++, j++) {

496 
	`LEAF_KEY
(&
√w_Àaf
, 
j
ËLEAF_KEY(
Àaf
, 
i
);

497 
	`mem˝y
(
	`LEAF_VALUE
(&
√w_Àaf
, 
j
), LEAF_VALUE(
Àaf
, 
i
), 
SIZE_VALUE
);

499 
√w_Àaf
.
num_keys
++;

500 
Àaf
->
num_keys
--;

503 
i
 = 
•lô
 - 2; i >
ö£πi⁄_ödex
; i--) {

504 
	`LEAF_KEY
(
Àaf
, 
i
+1) = LEAF_KEY(leaf, i);

505 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf
, 
i
+1), LEAF_VALUE÷óf, i), 
SIZE_VALUE
);

507 
	`LEAF_KEY
(
Àaf
, 
ö£πi⁄_ödex
Ë
key
;

508 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf
, 
ö£πi⁄_ödex
), 
vÆue
, 
SIZE_VALUE
);

509 
Àaf
->
num_keys
++;

512 
i
 = 
•lô
, 
j
 = 0; i < 
‹dî_Àaf
 - 1; i++, j++) {

513 i‡(
i
 =
ö£πi⁄_ödex
) {

515 
j
++;

517 
	`LEAF_KEY
(&
√w_Àaf
, 
j
ËLEAF_KEY(
Àaf
, 
i
);

518 
	`mem˝y
(
	`LEAF_VALUE
(&
√w_Àaf
, 
j
), LEAF_VALUE(
Àaf
, 
i
), 
SIZE_VALUE
);

520 
√w_Àaf
.
num_keys
++;

521 
Àaf
->
num_keys
--;

523 
	`LEAF_KEY
(&
√w_Àaf
, 
ö£πi⁄_ödex
 - 
•lô
Ë
key
;

524 
	`mem˝y
(
	`LEAF_VALUE
(&
√w_Àaf
, 
ö£πi⁄_ödex
 - 
•lô
), 
vÆue
, 
SIZE_VALUE
);

525 
√w_Àaf
.
num_keys
++;

529 
√w_Àaf
.
fûe_off£t
 = 
	`gë_‰ì_∑ge
();

532 
√w_Àaf
.
siblög
 = 
Àaf
->sibling;

533 
Àaf
->
siblög
 = 
√w_Àaf
.
fûe_off£t
;

536 
i
 = 
Àaf
->
num_keys
; i < 
‹dî_Àaf
 - 1; i++) {

537 
	`LEAF_KEY
(
Àaf
, 
i
) = 0;

538 
	`mem£t
(
	`LEAF_VALUE
(
Àaf
, 
i
), 0, 
SIZE_VALUE
);

540 
i
 = 
√w_Àaf
.
num_keys
; i < 
‹dî_Àaf
 - 1; i++) {

541 
	`LEAF_KEY
(&
√w_Àaf
, 
i
) = 0;

542 
	`mem£t
(
	`LEAF_VALUE
(&
√w_Àaf
, 
i
), 0, 
SIZE_VALUE
);

545 
√w_Àaf
.
∑ª¡
 = 
Àaf
->parent;

547 
	`Êush_∑ge
((
Page
*)
Àaf
);

548 
	`Êush_∑ge
((
Page
*)&
√w_Àaf
);

550 
√w_key
 = 
	`LEAF_KEY
(&
√w_Àaf
, 0);

553 
	`ö£π_öto_∑ª¡
((
NodePage
*)
Àaf
, 
√w_key
, (NodePage*)&
√w_Àaf
);

554 
	}
}

560 
	$ö£π_öto_node
(
I¡î«lPage
* 
n
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
) {

561 
i
;

563 
i
 = 
n
->
num_keys
; i > 
À·_ödex
; i--) {

564 
	`INTERNAL_OFFSET
(
n
, 
i
 + 1) = INTERNAL_OFFSET(n, i);

565 
	`INTERNAL_KEY
(
n
, 
i
) = INTERNAL_KEY(n, i - 1);

567 
	`INTERNAL_OFFSET
(
n
, 
À·_ödex
 + 1Ë
right_off£t
;

568 
	`INTERNAL_KEY
(
n
, 
À·_ödex
Ë
key
;

569 
n
->
num_keys
++;

570 
	}
}

576 
	$ö£π_öto_node_a·î_•lôtög
(
I¡î«lPage
* 
ﬁd_node
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
) {

577 
i
, 
j
, 
•lô
, 
k_¥ime
;

578 
uöt64_t
* 
ãmp_keys
;

579 
off_t
* 
ãmp_poöãrs
;

590 
ãmp_poöãrs
 = 
	`mÆloc
–(
‹dî_öã∫Æ
 + 1Ë* (
off_t
) );

591 i‡(
ãmp_poöãrs
 =
NULL
) {

592 
	`≥º‹
("TemporaryÖointersárray for splittingÇodes.");

593 
	`exô
(
EXIT_FAILURE
);

595 
ãmp_keys
 = 
	`mÆloc
–
‹dî_öã∫Æ
 * (
uöt64_t
) );

596 i‡(
ãmp_keys
 =
NULL
) {

597 
	`≥º‹
("Temporary keysárray for splittingÇodes.");

598 
	`exô
(
EXIT_FAILURE
);

601 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
 + 1; i++, j++) {

602 i‡(
j
 =
À·_ödex
 + 1) j++;

603 
ãmp_poöãrs
[
j
] = 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
);

606 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
; i++, j++) {

607 i‡(
j
 =
À·_ödex
) j++;

608 
ãmp_keys
[
j
] = 
	`INTERNAL_KEY
(
ﬁd_node
, 
i
);

611 
ãmp_poöãrs
[
À·_ödex
 + 1] = 
right_off£t
;

612 
ãmp_keys
[
À·_ödex
] = 
key
;

618 
•lô
 = 
	`cut
(
‹dî_öã∫Æ
);

620 
I¡î«lPage
 
√w_node
;

621 
√w_node
.
num_keys
 = 0;

622 
√w_node
.
is_Àaf
 = 0;

623 
√w_node
.
fûe_off£t
 = 
	`gë_‰ì_∑ge
();

625 
ﬁd_node
->
num_keys
 = 0;

626 
i
 = 0; i < 
•lô
 - 1; i++) {

627 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
Ë
ãmp_poöãrs
[i];

628 
	`INTERNAL_KEY
(
ﬁd_node
, 
i
Ë
ãmp_keys
[i];

629 
ﬁd_node
->
num_keys
++;

631 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
Ë
ãmp_poöãrs
[i];

632 
k_¥ime
 = 
ãmp_keys
[
•lô
 - 1];

633 ++
i
, 
j
 = 0; i < 
‹dî_öã∫Æ
; i++, j++) {

634 
	`INTERNAL_OFFSET
(&
√w_node
, 
j
Ë
ãmp_poöãrs
[
i
];

635 
	`INTERNAL_KEY
(&
√w_node
, 
j
Ë
ãmp_keys
[
i
];

636 
√w_node
.
num_keys
++;

638 
	`INTERNAL_OFFSET
(&
√w_node
, 
j
Ë
ãmp_poöãrs
[
i
];

639 
	`‰ì
(
ãmp_poöãrs
);

640 
	`‰ì
(
ãmp_keys
);

641 
√w_node
.
∑ª¡
 = 
ﬁd_node
->parent;

642 
i
 = 0; i <
√w_node
.
num_keys
; i++) {

643 
NodePage
 
chûd_∑ge
;

644 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(&
√w_node
, 
i
), (
Page
*)&
chûd_∑ge
);

645 
chûd_∑ge
.
∑ª¡
 = 
√w_node
.
fûe_off£t
;

646 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

650 
i
 = 
ﬁd_node
->
num_keys
; i < 
‹dî_öã∫Æ
 - 1; i++) {

651 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
+1) = 0;

652 
	`INTERNAL_KEY
(
ﬁd_node
, 
i
) = 0;

655 
i
 = 
√w_node
.
num_keys
; i < 
‹dî_öã∫Æ
 - 1; i++) {

656 
	`INTERNAL_OFFSET
(&
√w_node
, 
i
+1) = 0;

657 
	`INTERNAL_KEY
(&
√w_node
, 
i
) = 0;

661 
	`Êush_∑ge
((
Page
*)&
√w_node
);

662 
	`Êush_∑ge
((
Page
*)
ﬁd_node
);

668 
	`ö£π_öto_∑ª¡
((
NodePage
*)
ﬁd_node
, 
k_¥ime
, (NodePage*)&
√w_node
);

669 
	}
}

674 
	$ö£π_öto_∑ª¡
(
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
) {

676 
I¡î«lPage
 
∑ª¡_node
;

679 i‡(
À·
->
∑ª¡
 == 0) {

680 
	`ö£π_öto_√w_roŸ
(
À·
, 
key
, 
right
);

684 
	`lﬂd_∑ge
(
À·
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

694 
À·_ödex
 = 
	`gë_À·_ödex
(&
∑ª¡_node
, 
À·
->
fûe_off£t
);

699 i‡(
∑ª¡_node
.
num_keys
 < 
‹dî_öã∫Æ
 - 1) {

700 
	`ö£π_öto_node
(&
∑ª¡_node
, 
À·_ödex
, 
key
, 
right
->
fûe_off£t
);

701 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

709  
	`ö£π_öto_node_a·î_•lôtög
(&
∑ª¡_node
, 
À·_ödex
, 
key
, 
right
->
fûe_off£t
);

710 
	}
}

716 
	$ö£π_öto_√w_roŸ
(
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
) {

718 
I¡î«lPage
 
roŸ_node
;

719 
	`mem£t
(&
roŸ_node
, 0, (
I¡î«lPage
));

720 
roŸ_node
.
fûe_off£t
 = 
	`gë_‰ì_∑ge
();

721 
	`INTERNAL_KEY
(&
roŸ_node
, 0Ë
key
;

722 
	`INTERNAL_OFFSET
(&
roŸ_node
, 0Ë
À·
->
fûe_off£t
;

723 
	`INTERNAL_OFFSET
(&
roŸ_node
, 1Ë
right
->
fûe_off£t
;

724 
roŸ_node
.
num_keys
++;

725 
roŸ_node
.
∑ª¡
 = 0;

726 
roŸ_node
.
is_Àaf
 = 0;

727 
À·
->
∑ª¡
 = 
roŸ_node
.
fûe_off£t
;

728 
right
->
∑ª¡
 = 
roŸ_node
.
fûe_off£t
;

730 
	`Êush_∑ge
((
Page
*)&
roŸ_node
);

731 
	`Êush_∑ge
((
Page
*)
À·
);

732 
	`Êush_∑ge
((
Page
*)
right
);

734 
dbhódî
.
roŸ_off£t
 = 
roŸ_node
.
fûe_off£t
;

735 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

736 
	}
}

740 
	$°¨t_√w_åì
(
uöt64_t
 
key
, c⁄° * 
vÆue
) {

741 
LófPage
 
roŸ_node
;

743 
off_t
 
roŸ_off£t
 = 
	`gë_‰ì_∑ge
();

744 
roŸ_node
.
fûe_off£t
 = 
roŸ_off£t
;

746 
roŸ_node
.
∑ª¡
 = 0;

747 
roŸ_node
.
is_Àaf
 = 1;

748 
roŸ_node
.
num_keys
 = 1;

749 
	`LEAF_KEY
(&
roŸ_node
, 0Ë
key
;

750 
roŸ_node
.
siblög
 = 0;

751 
	`mem˝y
(
	`LEAF_VALUE
(&
roŸ_node
, 0), 
vÆue
, 
SIZE_VALUE
);

753 
	`Êush_∑ge
((
Page
*)&
roŸ_node
);

755 
dbhódî
.
roŸ_off£t
 =Ñoot_offset;

756 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

757 
	}
}

765 
	$ö£π
(
èbÀ_id
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

769 * 
vÆue_found
 = 
NULL
;

771 i‡((
vÆue_found
 = 
	`föd
(
key
)) != 0) {

772 
	`‰ì
(
vÆue_found
);

779 i‡(
dbhódî
.
roŸ_off£t
 == 0) {

780 
	`°¨t_√w_åì
(
key
, 
vÆue
);

788 
LófPage
 
Àaf_node
;

789 
	`föd_Àaf
(
key
, &
Àaf_node
);

794 i‡(
Àaf_node
.
num_keys
 < 
‹dî_Àaf
 - 1) {

795 
	`ö£π_öto_Àaf
(&
Àaf_node
, 
key
, 
vÆue
);

799 
	`ö£π_öto_Àaf_a·î_•lôtög
(&
Àaf_node
, 
key
, 
vÆue
);

802 
	}
}

812 
	$gë_√ighb‹_ödex
(
NodePage
* 
node_∑ge
) {

814 
i
;

822 
I¡î«lPage
 
∑ª¡_node
;

823 
	`lﬂd_∑ge
(
node_∑ge
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

824 
i
 = 0; i <
∑ª¡_node
.
num_keys
; i++)

825 i‡(
	`INTERNAL_OFFSET
(&
∑ª¡_node
, 
i
Ë=
node_∑ge
->
fûe_off£t
)

826  
i
 - 1;

829 
	`as£π
("Search forÇonexistentÖointerÅoÇode inÖarent.");

831 
	}
}

833 
	$ªmove_íåy_‰om_node
(
NodePage
* 
node_∑ge
, 
uöt64_t
 
key
) {

835 
i
;

836 
key_idx
 = 0;

838 i‡(
node_∑ge
->
is_Àaf
) {

839 
LófPage
* 
Àaf_node
 = (LófPage*)
node_∑ge
;

842 
i
 = 0; i < 
Àaf_node
->
num_keys
; i++) {

843 i‡(
	`LEAF_KEY
(
Àaf_node
, 
i
Ë=
key
) {

844 
key_idx
 = 
i
;

848 i‡(
i
 =
Àaf_node
->
num_keys
) {

849 
	`as£π
("remove_entry_from_node:Ço key inÅhisÖage");

853 
i
 = 
key_idx
; i < 
Àaf_node
->
num_keys
 - 1; i++) {

854 
	`LEAF_KEY
(
Àaf_node
, 
i
) = LEAF_KEY(leaf_node, i+1);

855 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf_node
, 
i
), LEAF_VALUE÷óf_node, i+1), 
SIZE_VALUE
);

858 
	`LEAF_KEY
(
Àaf_node
,Üóf_node->
num_keys
 - 1) = 0;

859 
	`mem£t
(
	`LEAF_VALUE
(
Àaf_node
,Üóf_node->
num_keys
 - 1), 0, 
SIZE_VALUE
);

861 
Àaf_node
->
num_keys
--;

864 
I¡î«lPage
* 
öã∫Æ_node
 = (I¡î«lPage*)
node_∑ge
;

867 
i
 = 0; i < 
öã∫Æ_node
->
num_keys
; i++) {

868 i‡(
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
Ë=
key
) {

869 
key_idx
 = 
i
;

873 i‡(
i
 =
öã∫Æ_node
->
num_keys
) {

874 
	`as£π
("remove_entry_from_node:Ço key inÅhisÖage");

878 
i
 = 
key_idx
; i < 
öã∫Æ_node
->
num_keys
 - 1; i++) {

879 
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
) = INTERNAL_KEY(internal_node, i+1);

880 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
+1) = INTERNAL_OFFSET(internal_node, i+2);

883 
	`INTERNAL_KEY
(
öã∫Æ_node
, i¡î«l_node->
num_keys
 - 1) = 0;

884 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, i¡î«l_node->
num_keys
) = 0;

886 
öã∫Æ_node
->
num_keys
--;

889 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

890 
	}
}

892 
	$adju°_roŸ
() {

894 
NodePage
 
roŸ_∑ge
;

895 
	`lﬂd_∑ge
(
dbhódî
.
roŸ_off£t
, (
Page
*)&
roŸ_∑ge
);

902 i‡(
roŸ_∑ge
.
num_keys
 > 0)

912 i‡(!
roŸ_∑ge
.
is_Àaf
) {

913 
I¡î«lPage
* 
roŸ_node
 = (I¡î«lPage*)&
roŸ_∑ge
;

914 
dbhódî
.
roŸ_off£t
 = 
	`INTERNAL_OFFSET
(
roŸ_node
, 0);

916 
NodePage
 
node_∑ge
;

917 
	`lﬂd_∑ge
(
dbhódî
.
roŸ_off£t
, (
Page
*)&
node_∑ge
);

918 
node_∑ge
.
∑ª¡
 = 0;

920 
	`Êush_∑ge
((
Page
*)&
node_∑ge
);

921 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

928 
dbhódî
.
roŸ_off£t
 = 0;

929 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

932 
	`put_‰ì_∑ge
(
roŸ_∑ge
.
fûe_off£t
);

933 
	}
}

941 
	$cﬂÀs˚_nodes
(
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
, 
√ighb‹_ödex
, 
k_¥ime
) {

943 
i
, 
j
, 
√ighb‹_ö£πi⁄_ödex
, 
n_íd
;

944 
NodePage
* 
tmp
;

950 i‡(
√ighb‹_ödex
 == -1) {

951 
tmp
 = 
node_∑ge
;

952 
node_∑ge
 = 
√ighb‹_∑ge
;

953 
√ighb‹_∑ge
 = 
tmp
;

962 
√ighb‹_ö£πi⁄_ödex
 = 
√ighb‹_∑ge
->
num_keys
;

969 i‡(!
node_∑ge
->
is_Àaf
) {

970 
I¡î«lPage
* 
node
 = (I¡î«lPage*)
node_∑ge
;

971 
I¡î«lPage
* 
√ighb‹_node
 = (I¡î«lPage*)
√ighb‹_∑ge
;

976 
	`INTERNAL_KEY
(
√ighb‹_node
, 
√ighb‹_ö£πi⁄_ödex
Ë
k_¥ime
;

977 
√ighb‹_node
->
num_keys
++;

979 
n_íd
 = 
node
->
num_keys
;

981 
i
 = 
√ighb‹_ö£πi⁄_ödex
 + 1, 
j
 = 0; j < 
n_íd
; i++, j++) {

982 
	`INTERNAL_KEY
(
√ighb‹_node
, 
i
ËINTERNAL_KEY(
node
, 
j
);

983 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
ËINTERNAL_OFFSET(
node
, 
j
);

984 
√ighb‹_node
->
num_keys
++;

985 
node
->
num_keys
--;

992 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
ËINTERNAL_OFFSET(
node
, 
j
);

997 
i
 = 0; i < 
√ighb‹_node
->
num_keys
 + 1; i++) {

998 
NodePage
 
chûd_∑ge
;

999 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
), (
Page
*)&
chûd_∑ge
);

1000 
chûd_∑ge
.
∑ª¡
 = 
√ighb‹_node
->
fûe_off£t
;

1001 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

1004 
	`Êush_∑ge
((
Page
*)
√ighb‹_node
);

1006 
	`put_‰ì_∑ge
(
node
->
fûe_off£t
);

1016 
LófPage
* 
node
 = (LófPage*)
node_∑ge
;

1017 
LófPage
* 
√ighb‹_node
 = (LófPage*)
√ighb‹_∑ge
;

1019 
i
 = 
√ighb‹_ö£πi⁄_ödex
, 
j
 = 0; j < 
node
->
num_keys
; i++, j++) {

1020 
	`LEAF_KEY
(
√ighb‹_node
, 
i
ËLEAF_KEY(
node
, 
j
);

1021 
	`mem˝y
(
	`LEAF_VALUE
(
√ighb‹_node
, 
i
), LEAF_VALUE(
node
, 
j
), 
SIZE_VALUE
);

1022 
√ighb‹_node
->
num_keys
++;

1024 
√ighb‹_node
->
siblög
 = 
node
->sibling;

1026 
	`Êush_∑ge
((
Page
*)
√ighb‹_node
);

1028 
	`put_‰ì_∑ge
(
node
->
fûe_off£t
);

1031 
NodePage
 
∑ª¡_node
;

1032 
	`lﬂd_∑ge
(
node_∑ge
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1033 
	`dñëe_íåy
(&
∑ª¡_node
, 
k_¥ime
);

1034 
	}
}

1042 
	$ªdi°ribuã_nodes
(
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
,

1043 
√ighb‹_ödex
,

1044 
k_¥ime_ödex
, 
k_¥ime
) {

1046 
i
;

1053 i‡(
√ighb‹_ödex
 != -1) {

1054 i‡(!
node_∑ge
->
is_Àaf
) {

1055 
I¡î«lPage
* 
node
 = (I¡î«lPage*)
node_∑ge
;

1056 
I¡î«lPage
* 
√ighb‹_node
 = (I¡î«lPage*)
√ighb‹_∑ge
;

1057 
	`INTERNAL_OFFSET
(
node
,Çode->
num_keys
 + 1) = INTERNAL_OFFSET(node,Çode->num_keys);

1059 
i
 = 
node
->
num_keys
; i > 0; i--) {

1060 
	`INTERNAL_KEY
(
node
, 
i
) = INTERNAL_KEY(node, i - 1);

1061 
	`INTERNAL_OFFSET
(
node
, 
i
) = INTERNAL_OFFSET(node, i - 1);

1063 
	`INTERNAL_OFFSET
(
node
, 0ËINTERNAL_OFFSET(
√ighb‹_node
,Çeighb‹_node->
num_keys
);

1064 
NodePage
 
chûd_∑ge
;

1065 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
node
, 0), (
Page
*)&
chûd_∑ge
);

1066 
chûd_∑ge
.
∑ª¡
 = 
node
->
fûe_off£t
;

1067 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

1069 
	`INTERNAL_OFFSET
(
√ighb‹_node
,Çeighb‹_node->
num_keys
) = 0;

1070 
	`INTERNAL_KEY
(
node
, 0Ë
k_¥ime
;

1072 
I¡î«lPage
 
∑ª¡_node
;

1073 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1074 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
ËINTERNAL_KEY(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1);

1075 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1080 
node
->
num_keys
++;

1081 
√ighb‹_node
->
num_keys
--;

1083 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1084 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1087 
LófPage
* 
node
 = (LófPage*)
node_∑ge
;

1088 
LófPage
* 
√ighb‹_node
 = (LófPage*)
√ighb‹_∑ge
;

1090 
i
 = 
node
->
num_keys
; i > 0; i--) {

1091 
	`LEAF_KEY
(
node
, 
i
) = LEAF_KEY(node, i - 1);

1092 
	`mem˝y
(
	`LEAF_VALUE
(
node
, 
i
), LEAF_VALUE“ode, i - 1), 
SIZE_VALUE
);

1094 
	`mem˝y
(
	`LEAF_VALUE
(
node
, 0), LEAF_VALUE(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1), 
SIZE_VALUE
);

1095 
	`mem£t
(
	`LEAF_VALUE
(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1), 0, 
SIZE_VALUE
);

1096 
	`LEAF_KEY
(
node
, 0ËLEAF_KEY(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1);

1098 
I¡î«lPage
 
∑ª¡_node
;

1099 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1100 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
Ë
	`LEAF_KEY
(
node
, 0);

1101 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1106 
node
->
num_keys
++;

1107 
√ighb‹_node
->
num_keys
--;

1109 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1110 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1121 i‡(
node_∑ge
->
is_Àaf
) {

1122 
LófPage
* 
node
 = (LófPage*)
node_∑ge
;

1123 
LófPage
* 
√ighb‹_node
 = (LófPage*)
√ighb‹_∑ge
;;

1125 
	`LEAF_KEY
(
node
,Çode->
num_keys
ËLEAF_KEY(
√ighb‹_node
, 0);

1126 
	`mem˝y
(
	`LEAF_VALUE
(
node
,Çode->
num_keys
), LEAF_VALUE(
√ighb‹_node
, 0), 
SIZE_VALUE
);

1128 
I¡î«lPage
 
∑ª¡_node
;

1129 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1130 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
Ë
	`LEAF_KEY
(
√ighb‹_node
, 1);

1131 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1133 
i
 = 0; i < 
√ighb‹_node
->
num_keys
 - 1; i++) {

1134 
	`LEAF_KEY
(
√ighb‹_node
, 
i
) = LEAF_KEY(neighbor_node, i + 1);

1135 
	`mem˝y
(
	`LEAF_VALUE
(
√ighb‹_node
, 
i
), LEAF_VALUE“eighb‹_node, i + 1), 
SIZE_VALUE
);

1141 
node
->
num_keys
++;

1142 
√ighb‹_node
->
num_keys
--;

1144 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1145 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1149 
I¡î«lPage
* 
node
 = (I¡î«lPage*)
node_∑ge
;

1150 
I¡î«lPage
* 
√ighb‹_node
 = (I¡î«lPage*)
√ighb‹_∑ge
;

1152 
	`INTERNAL_KEY
(
node
,Çode->
num_keys
Ë
k_¥ime
;

1153 
	`INTERNAL_OFFSET
(
node
,Çode->
num_keys
 + 1ËINTERNAL_OFFSET(
√ighb‹_node
, 0);

1155 
NodePage
 
chûd_∑ge
;

1156 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
node
,Çode->
num_keys
 + 1), (
Page
*)&
chûd_∑ge
);

1157 
chûd_∑ge
.
∑ª¡
 = 
node
->
fûe_off£t
;

1158 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

1160 
I¡î«lPage
 
∑ª¡_node
;

1161 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1162 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
ËINTERNAL_KEY(
√ighb‹_node
, 0);

1163 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1165 
i
 = 0; i < 
√ighb‹_node
->
num_keys
 - 1; i++) {

1166 
	`INTERNAL_KEY
(
√ighb‹_node
, 
i
) = INTERNAL_KEY(neighbor_node, i + 1);

1167 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
) = INTERNAL_OFFSET(neighbor_node, i + 1);

1170 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
) = INTERNAL_OFFSET(neighbor_node, i + 1);

1177 
node
->
num_keys
++;

1178 
√ighb‹_node
->
num_keys
--;

1180 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1181 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1185 
	}
}

1193 
	$dñëe_íåy
(
NodePage
* 
node_∑ge
, 
uöt64_t
 
key
) {

1195 
mö_keys
;

1196 
off_t
 
√ighb‹_off£t
;

1197 
√ighb‹_ödex
;

1198 
k_¥ime_ödex
, 
k_¥ime
;

1199 
ˇ∑côy
;

1203 
	`ªmove_íåy_‰om_node
(
node_∑ge
, 
key
);

1207 i‡(
dbhódî
.
roŸ_off£t
 =
node_∑ge
->
fûe_off£t
) {

1208 
	`adju°_roŸ
();

1220 
mö_keys
 = 
node_∑ge
->
is_Àaf
 ? 
	`cut
(
‹dî_Àaf
 - 1Ë: cut(
‹dî_öã∫Æ
) - 1;

1226 i‡(
node_∑ge
->
num_keys
 >
mö_keys
)

1241 
√ighb‹_ödex
 = 
	`gë_√ighb‹_ödex
(
node_∑ge
);

1242 
k_¥ime_ödex
 = 
√ighb‹_ödex
 == -1 ? 0 :Çeighbor_index;

1244 
I¡î«lPage
 
∑ª¡_node
;

1245 
	`lﬂd_∑ge
(
node_∑ge
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1247 
k_¥ime
 = 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
);

1248 
√ighb‹_off£t
 = 
√ighb‹_ödex
 =-1 ? 
	`INTERNAL_OFFSET
(&
∑ª¡_node
, 1) :

1249 
	`INTERNAL_OFFSET
(&
∑ª¡_node
, 
√ighb‹_ödex
);

1251 
ˇ∑côy
 = 
node_∑ge
->
is_Àaf
 ? 
‹dî_Àaf
 : 
‹dî_öã∫Æ
 - 1;

1253 
NodePage
 
√ighb‹_∑ge
;

1254 
	`lﬂd_∑ge
(
√ighb‹_off£t
, (
Page
*)&
√ighb‹_∑ge
);

1257 i‡(
√ighb‹_∑ge
.
num_keys
 + 
node_∑ge
->num_key†< 
ˇ∑côy
)

1258 
	`cﬂÀs˚_nodes
(
node_∑ge
, &
√ighb‹_∑ge
, 
√ighb‹_ödex
, 
k_¥ime
);

1263 
	`ªdi°ribuã_nodes
(
node_∑ge
, &
√ighb‹_∑ge
, 
√ighb‹_ödex
, 
k_¥ime_ödex
, 
k_¥ime
);

1266 
	}
}

1270 
	$dñëe
(
èbÀ_id
, 
uöt64_t
 
key
) {

1272 * 
vÆue_found
 = 
NULL
;

1273 i‡((
vÆue_found
 = 
	`föd
(
key
)) == 0) {

1275 
	`‰ì
(
vÆue_found
);

1279 
LófPage
 
Àaf_node
;

1280 
	`föd_Àaf
(
key
, &
Àaf_node
);

1282 
	`dñëe_íåy
((
NodePage
*)&
Àaf_node
, 
key
);

1285 
	}
}

1288 
	$öô_db
(
num_buf
){

1290 
buf_mgr
 = (
Buf„r
 *)
	`ˇŒoc
(
num_buf
, (Buffer));

1292 if(
buf_mgr
 =
NULL
){

1298 
buf_size
 = 
num_buf
;

1301 
	}
}

1303 
	$˛o£_èbÀ
(
èbÀ_id
){

1304 
i
;

1307 if(
èbÀ_id
 < 1 ||ÅabÀ_id > 10 || 
buf_size
 =-1 || 
buf_mgr
 =
NULL
){

1311 
i
 = 0; i < 
buf_size
; i++){

1312 if(
buf_mgr
[
i
].
èbÀ_id
 ==Åable_id){

1314 if(
buf_mgr
[
i
].
is_dúty
 == 1){

1315 
	`Êush_∑ge
(
buf_mgr
[
i
].
‰ame
);

1318 
	`mem£t
(
buf_mgr
+
i
, 0, (
Buf„r
));

1323 
èbÀ_ids
[
èbÀ_id
 -1] = 0;

1326 
	}
}

1328 
	$shutdown_db
(){

1329 
i
;

1332 if(
buf_size
 =-1 || 
buf_mgr
 =
NULL
){

1336 
i
 = 0; i < 
buf_size
; i++){

1338 if(
buf_mgr
[
i
].
is_dúty
 == 1){

1339 
	`Êush_∑ge
(
buf_mgr
[
i
].
‰ame
);

1344 
	`‰ì
(
buf_mgr
);

1347 
	}
}

	@src/file.c

1 
	~<sys/ty≥s.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<as£π.h
>

5 
	~<°dio.h
>

6 
	~<uni°d.h
>

7 
	~<°rög.h
>

8 
	~"fûe.h
"

10 
HódîPage
 
	gdbhódî
[10];

11 
	gdbfûe
[10];

15 
off_t
 
	$gë_‰ì_∑ge
() {

16 
off_t
 
‰ì∑ge_off£t
;

18 
‰ì∑ge_off£t
 = 
dbhódî
.
‰ìli°
;

19 i‡(
‰ì∑ge_off£t
 == 0) {

21 
	`ex∑nd_fûe
(
dbhódî
.
num_∑ges
);

22 
‰ì∑ge_off£t
 = 
dbhódî
.
‰ìli°
;

25 
FªePage
 
‰ì∑ge
;

26 
	`lﬂd_∑ge
(
‰ì∑ge_off£t
, (
Page
*)&
‰ì∑ge
);

27 
dbhódî
.
‰ìli°
 = 
‰ì∑ge
.
√xt
;

29 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

31  
‰ì∑ge_off£t
;

32 
	}
}

35 
	$put_‰ì_∑ge
(
off_t
 
∑ge_off£t
) {

36 
FªePage
 
‰ì∑ge
;

37 
	`mem£t
(&
‰ì∑ge
, 0, 
PAGE_SIZE
);

39 
‰ì∑ge
.
√xt
 = 
dbhódî
.
‰ìli°
;

40 
‰ì∑ge
.
fûe_off£t
 = 
∑ge_off£t
;

41 
	`Êush_∑ge
((
Page
*)&
‰ì∑ge
);

43 
dbhódî
.
‰ìli°
 = 
∑ge_off£t
;

45 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

46 
	}
}

49 
	$ex∑nd_fûe
(
size_t
 
˙t_∑ge_to_ex∑nd
) {

50 
off_t
 
off£t
 = 
dbhódî
.
num_∑ges
 * 
PAGE_SIZE
;

52 i‡(
dbhódî
.
num_∑ges
 > 1024 * 1024) {

54 
	`as£π
("Test: youáreálready havingá DB file overÅhan 4GB");

57 
i
;

58 
i
 = 0; i < 
˙t_∑ge_to_ex∑nd
; i++) {

59 
	`put_‰ì_∑ge
(
off£t
);

60 
dbhódî
.
num_∑ges
++;

61 
off£t
 +
PAGE_SIZE
;

64 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

65 
	}
}

67 
	$lﬂd_∑ge
(
off_t
 
off£t
, 
Page
* 
∑ge
) {

68 
	`l£ek
(
dbfûe
, 
off£t
, 
SEEK_SET
);

69 
	`ªad
(
dbfûe
, 
∑ge
, 
PAGE_SIZE
);

70 
∑ge
->
fûe_off£t
 = 
off£t
;

71 
	}
}

73 
	$Êush_∑ge
(
Page
* 
∑ge
) {

74 
	`l£ek
(
dbfûe
, 
∑ge
->
fûe_off£t
, 
SEEK_SET
);

75 
	`wrôe
(
dbfûe
, 
∑ge
, 
PAGE_SIZE
);

76 
	}
}

	@src/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<f˙é.h
>

4 
	~<uni°d.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<öây≥s.h
>

7 
	~"b±.h
"

8 
	~"fûe.h
"

11 
	$maö
–
¨gc
, ** 
¨gv
 ) {

12 
uöt64_t
 
öput_key
;

13 
öput_vÆue
[
SIZE_VALUE
];

14 
ö°ru˘i⁄
;

16 
	`li˚n£_nŸi˚
();

17 
	`ußge_1
();

18 
	`ußge_2
();

20 
	`›í_db
("test.db");

21 
	`¥ötf
("> ");

22 
	`sˇnf
("%c", &
ö°ru˘i⁄
Ë!
EOF
) {

23 
ö°ru˘i⁄
) {

25 
	`sˇnf
("%" 
PRIu64
 " %s", &
öput_key
, 
öput_vÆue
);

26 
	`ö£π
(
öput_key
, 
öput_vÆue
);

27 
	`¥öt_åì
();

30 
	`sˇnf
("%" 
PRIu64
 "", &
öput_key
);

31 
	`dñëe
(
öput_key
);

32 
	`¥öt_åì
();

36 
	`sˇnf
("%" 
PRIu64
 "", &
öput_key
);

37 
	`föd_™d_¥öt
(
öput_key
);

40 
	`gëch¨
() != ()'\n');

41  
EXIT_SUCCESS
;

44 
	`¥öt_åì
();

47 
	`ußge_2
();

50 
	`gëch¨
() != ()'\n');

51 
	`¥ötf
("> ");

53 
	`¥ötf
("\n");

55 
	`˛o£_db
();

57  
EXIT_SUCCESS
;

58 
	}
}

	@
1
.
0
5
61
include/bpt.h
include/file.h
src/bpt.c
src/file.c
src/main.c
