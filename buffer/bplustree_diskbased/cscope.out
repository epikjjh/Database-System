cscope 15 $HOME/mysql/Lab/buffer/bplustree_diskbased -q 0000000224 0000032513
	@include/bpt.h

1 #i‚de‡
__BPT_H__


2 
	#__BPT_H__


	)

4 
›í_èbÀ
(c⁄° * 
fûíame
);

5 * 
föd
(
èbÀ_id
, 
uöt64_t
 
key
);

6 
ö£π
(
èbÀ_id
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

7 
dñëe
(
èbÀ_id
, 
uöt64_t
 
key
);

9 
¥öt_åì
(
èbÀ_id
);

13 
öô_db
(
num_buf
);

15 
˛o£_èbÀ
(
èbÀ_id
);

17 
shutdown_db
();

	@include/file.h

1 
	~<°ddef.h
>

2 
	~<öây≥s.h
>

4 
	#BPTREE_INTERNAL_ORDER
 249

5 
	#BPTREE_LEAF_ORDER
 32

6 

	)

7 
	#PAGE_SIZE
 4096

	)

9 
	#SIZE_KEY
 8

	)

10 
	#SIZE_VALUE
 120

	)

11 
	#SIZE_RECORD
 (
SIZE_KEY
 + 
SIZE_VALUE
)

	)

13 
	#BPTREE_MAX_NODE
 (1024 * 1024)

14 

	)

25 
	s_Rec‹d
 {

26 
uöt64_t
 
	mkey
;

27 
	mvÆue
[
SIZE_VALUE
];

28 } 
	tRec‹d
;

30 
	s_I¡î«lRec‹d
 {

31 
uöt64_t
 
	mkey
;

32 
off_t
 
	moff£t
;

33 } 
	tI¡î«lRec‹d
;

35 
	s_Page
 {

36 
	mbyãs
[
PAGE_SIZE
];

39 
off_t
 
	mfûe_off£t
;

40 } 
	tPage
;

42 
	s_FªePage
 {

43 
off_t
 
	m√xt
;

44 
	mª£rved
[
PAGE_SIZE
 - 8];

47 
off_t
 
	mfûe_off£t
;

48 } 
	tFªePage
;

50 
	s_HódîPage
 {

51 
off_t
 
	m‰ìli°
;

52 
off_t
 
	mroŸ_off£t
;

53 
uöt64_t
 
	mnum_∑ges
;

54 
	mª£rved
[
PAGE_SIZE
 - 24];

57 
off_t
 
	mfûe_off£t
;

58 } 
	tHódîPage
;

60 
	#INTERNAL_KEY
(
n
, 
i
Ë(“)->
úec‹ds
[(i)+1].
key
)

	)

61 
	#INTERNAL_OFFSET
(
n
, 
i
Ë(“)->
úec‹ds
[(i)].
off£t
)

	)

62 
	s_I¡î«lPage
 {

65 
off_t
 
	m∑ª¡
;

66 
	mis_Àaf
;

67 
	mnum_keys
;

68 
	mª£rved
[112 - 16];

69 
I¡î«lRec‹d
 
	múec‹ds
[
BPTREE_INTERNAL_ORDER
];

71 
	m•a˚
[
PAGE_SIZE
];

74 
off_t
 
	mfûe_off£t
;

75 } 
	tI¡î«lPage
;

77 
	#LEAF_KEY
(
n
, 
i
Ë(“)->
ªc‹ds
[(i)].
key
)

	)

78 
	#LEAF_VALUE
(
n
, 
i
Ë(“)->
ªc‹ds
[(i)].
vÆue
)

	)

79 
	s_LófPage
 {

82 
off_t
 
	m∑ª¡
;

83 
	mis_Àaf
;

84 
	mnum_keys
;

85 
	mª£rved
[120 - 16];

86 
off_t
 
	msiblög
;

87 
Rec‹d
 
	mªc‹ds
[
BPTREE_LEAF_ORDER
-1];

89 
	m•a˚
[
PAGE_SIZE
];

93 
off_t
 
	mfûe_off£t
;

94 } 
	tLófPage
;

96 
	s_NodePage
 {

99 
off_t
 
	m∑ª¡
;

100 
	mis_Àaf
;

101 
	mnum_keys
;

103 
	m•a˚
[
PAGE_SIZE
];

107 
off_t
 
	mfûe_off£t
;

108 } 
	tNodePage
;

111 
›í_èbÀ
(c⁄° * 
fûíame
);

115 
˛o£_db
(
èbÀ_id
);

118 
off_t
 
gë_‰ì_∑ge
(
èbÀ_id
);

121 
put_‰ì_∑ge
(
èbÀ_id
, 
off_t
 
∑ge_off£t
);

124 
ex∑nd_fûe
(
èbÀ_id
, 
size_t
 
˙t_∑ge_to_ex∑nd
);

127 
lﬂd_∑ge
(
èbÀ_id
, 
off_t
 
off£t
, 
Page
* 
∑ge
);

130 
Êush_∑ge
(
èbÀ_id
, 
Page
* 
∑ge
);

132 
HódîPage
 
dbhódî
[10];

136 
	s_Buf„r
{

137 
Page
 *
	m‰ame
;

138 
	mèbÀ_id
;

139 
off_t
 
	m∑ge_off£t
;

140 
	mis_dúty
;

141 
	mpö_cou¡
;

143 
	mªfbô
;

144 } 
	tBuf„r
;

	@src/bpt.c

4 
	#Vîsi⁄
 "1.14"

	)

57 
	~<°dio.h
>

58 
	~<°dlib.h
>

59 
	~<°dboﬁ.h
>

60 
	~<°döt.h
>

61 
	~<°rög.h
>

62 
	~<öây≥s.h
>

63 
	~<as£π.h
>

64 
	~<f˙é.h
>

65 
	~<uni°d.h
>

66 
	~"b±.h
"

67 
	~"fûe.h
"

68 #ifde‡
WINDOWS


69 
	#boﬁ
 

	)

70 
	#Ál£
 0

	)

71 
	#åue
 1

	)

78 
	#MIN_ORDER
 3

	)

79 
	#MAX_ORDER
 256

	)

82 
	#LICENSE_FILE
 "LICENSE.txt"

	)

83 
	#LICENSE_WARRANTEE
 0

	)

84 
	#LICENSE_WARRANTEE_START
 592

	)

85 
	#LICENSE_WARRANTEE_END
 624

	)

86 
	#LICENSE_CONDITIONS
 1

	)

87 
	#LICENSE_CONDITIONS_START
 70

	)

88 
	#LICENSE_CONDITIONS_END
 625

	)

91 
HódîPage
 
dbhódî
[10];

92 
dbfûe
[10];

93 
	gèbÀ_ids
[10] = {0,};

105 
	g‹dî_öã∫Æ
 = 
BPTREE_INTERNAL_ORDER
;

106 
	g‹dî_Àaf
 = 
BPTREE_LEAF_ORDER
;

113 
boﬁ
 
	gvîbo£_ouçut
 = 
Ál£
;

116 
Buf„r
 *
	gbuf_mgr
;

117 
	gbuf_size
 = -1;

118 
	g˛ock_h™d
 = 0;

124 
li˚n£_nŸi˚
( );

125 
¥öt_li˚n£
–
li˚n˚_∑π
 );

126 
ußge_1
( );

127 
ußge_2
( );

128 
föd_™d_¥öt
(
èbÀ_id
, 
uöt64_t
 
key
);

129 
boﬁ
 
föd_Àaf
(
èbÀ_id
, 
uöt64_t
 
key
, 
LófPage
* 
out_Àaf_node
);

132 
°¨t_√w_åì
(
èbÀ_id
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

133 
ö£π_öto_Àaf
(
èlbe_id
, 
LófPage
* 
Àaf_node
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

134 
ö£π_öto_Àaf_a·î_•lôtög
(
èbÀ_id
, 
LófPage
* 
Àaf_node
, 
uöt64_t
 
key
, c⁄° * 
vÆue
);

135 
ö£π_öto_∑ª¡
(
èbÀ_id
, 
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
);

136 
ö£π_öto_√w_roŸ
(
èbÀ_id
, 
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
);

137 
gë_À·_ödex
(
I¡î«lPage
* 
∑ª¡
, 
off_t
 
À·_off£t
);

138 
ö£π_öto_node
(
I¡î«lPage
 * 
∑ª¡
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
);

139 
ö£π_öto_node_a·î_•lôtög
(
èbÀ_id
, 
I¡î«lPage
* 
∑ª¡
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
);

142 
gë_√ighb‹_ödex
(
èbÀ_id
, 
NodePage
* 
node_∑ge
);

143 
adju°_roŸ
(
èbÀ_id
);

144 
cﬂÀs˚_nodes
(
èbÀ_id
, 
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
,

145 
√ighb‹_ödex
, 
k_¥ime
);

146 
ªdi°ribuã_nodes
(
èbÀ_id
, 
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
,

147 
√ighb‹_ödex
,

148 
k_¥ime_ödex
, 
k_¥ime
);

149 
dñëe_íåy
(
èbÀ_id
, 
NodePage
* 
node_∑ge
, 
uöt64_t
 
key
);

158 
	$li˚n£_nŸi˚
( ) {

159 
	`¥ötf
("bpt version %s -- Copyright (C) 2010 Amittai Aviram "

160 "hâp://www.amôèi.com\n", 
Vîsi⁄
);

161 
	`¥ötf
("ThisÖrogram comes with ABSOLUTELY NO WARRANTY; for details "

165 
	}
}

170 
	$¥öt_li˚n£
–
li˚n£_∑π
 ) {

171 
°¨t
, 
íd
, 
löe
;

172 
FILE
 * 
Â
;

173 
buf„r
[0x100];

175 
li˚n£_∑π
) {

176 
LICENSE_WARRANTEE
:

177 
°¨t
 = 
LICENSE_WARRANTEE_START
;

178 
íd
 = 
LICENSE_WARRANTEE_END
;

180 
LICENSE_CONDITIONS
:

181 
°¨t
 = 
LICENSE_CONDITIONS_START
;

182 
íd
 = 
LICENSE_CONDITIONS_END
;

188 
Â
 = 
	`f›í
(
LICENSE_FILE
, "r");

189 i‡(
Â
 =
NULL
) {

190 
	`≥º‹
("print_license: fopen");

191 
	`exô
(
EXIT_FAILURE
);

193 
löe
 = 0;Üöê< 
°¨t
;Üine++)

194 
	`fgës
(
buf„r
, (buf„r), 
Â
);

195  ; 
löe
 < 
íd
;Üine++) {

196 
	`fgës
(
buf„r
, (buf„r), 
Â
);

197 
	`¥ötf
("%s", 
buf„r
);

199 
	`f˛o£
(
Â
);

200 
	}
}

204 
	$ußge_1
( ) {

205 
	`¥ötf
("B+ Tªêo‡Ordî %d(I¡î«l).\n", 
‹dî_öã∫Æ
);

206 
	`¥ötf
("Following Silberschatz, Korth, Sidarshan, Database Concepts, "

211 
	`¥ötf
("(%d <‹dî <%d).\n", 
MIN_ORDER
, 
MAX_ORDER
);

212 
	`¥ötf
("To start with input fromá file ofÇewline-delimited integers, \n"

215 
	}
}

219 
	$ußge_2
( ) {

220 
	`¥ötf
("Enterány ofÅhe following commandsáfterÅheÖrompt > :\n"

236 
	}
}

239 
	$›í_èbÀ
(c⁄° * 
fûíame
) {

240 
i
;

243 
i
 = 0; i < 10; i++){

244 if(
èbÀ_ids
[
i
] == 0)

249 if(
i
 == 10){

253 
dbfûe
[
i
] = 
	`›í
(
fûíame
, 
O_RDWR
);

254 i‡(
dbfûe
[
i
] < 0) {

256 
dbfûe
[
i
] = 
	`›í
(
fûíame
, 
O_CREAT
|
O_RDWR
, 
S_IRUSR
|
S_IWUSR
);

257 i‡(
dbfûe
[
i
] < 0) {

258 
	`as£π
("failedÅo createÇew db file");

262 
	`mem£t
((
dbhódî
+
i
), 0, 
PAGE_SIZE
);

263 
dbhódî
[
i
].
‰ìli°
 = 0;

264 
dbhódî
[
i
].
roŸ_off£t
 = 0;

265 
dbhódî
[
i
].
num_∑ges
 = 1;

266 
dbhódî
[
i
].
fûe_off£t
 = 0;

267 
	`Êush_∑ge
((
Page
*)(
dbhódî
+
i
));

270 
	`lﬂd_∑ge
(0, (
Page
*)(
dbhódî
+
i
));

271 
dbhódî
[
i
].
fûe_off£t
 = 0;

274  
i
+1;

275 
	}
}

278 
	$˛o£_db
(
èbÀ_id
) {

279 
	`˛o£
(
dbfûe
[
èbÀ_id
 - 1]);

280 
	}
}

295 
off_t
 
	gqueue
[
BPTREE_MAX_NODE
];

296 
	$¥öt_åì
(
èbÀ_id
) {

298 
i
;

299 
‰⁄t
 = 0;

300 
ª¨
 = 0;

302 i‡(
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
 == 0) {

303 
	`¥ötf
("EmptyÅree.\n");

307 
queue
[
ª¨
] = 
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
;

308 
ª¨
++;

309 
queue
[
ª¨
] = 0;

310 
ª¨
++;

311 
‰⁄t
 < 
ª¨
) {

312 
off_t
 
∑ge_off£t
 = 
queue
[
‰⁄t
];

313 
‰⁄t
++;

315 i‡(
∑ge_off£t
 == 0) {

316 
	`¥ötf
("\n");

318 i‡(
‰⁄t
 =
ª¨
) ;

321 
queue
[
ª¨
] = 0;

322 
ª¨
++;

326 
NodePage
 
node_∑ge
;

327 
	`lﬂd_∑ge
(
èbÀ_id
, 
∑ge_off£t
, (
Page
*)&
node_∑ge
);

328 i‡(
node_∑ge
.
is_Àaf
 == 1) {

330 
LófPage
* 
Àaf_node
 = (LófPage*)&
node_∑ge
;

331 
i
 = 0; i < 
Àaf_node
->
num_keys
; i++) {

332 
	`¥ötf
("%" 
PRIu64
 " ", 
	`LEAF_KEY
(
Àaf_node
, 
i
));

334 
	`¥ötf
("| ");

337 
I¡î«lPage
* 
öã∫Æ_node
 = (I¡î«lPage*)&
node_∑ge
;

338 
i
 = 0; i < 
öã∫Æ_node
->
num_keys
; i++) {

339 
	`¥ötf
("%" 
PRIu64
 " ", 
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
));

340 
queue
[
ª¨
] = 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
);

341 
ª¨
++;

343 
queue
[
ª¨
] = 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
);

344 
ª¨
++;

345 
	`¥ötf
("| ");

348 
	}
}

353 
	$föd_™d_¥öt
(
èbÀ_id
, 
uöt64_t
 
key
) {

354 * 
vÆue_found
 = 
NULL
;

355 
vÆue_found
 = 
	`föd
(
èbÀ_id
, 
key
);

356 i‡(
vÆue_found
 =
NULL
) {

357 
	`¥ötf
("Rec‹dÇŸ found undî key %" 
PRIu64
 ".\n", 
key
);

360 
	`¥ötf
("key %" 
PRIu64
 ", vÆuê[%s].\n", 
key
, 
vÆue_found
);

361 
	`‰ì
(
vÆue_found
);

363 
	}
}

370 
boﬁ
 
	$föd_Àaf
(
èbÀ_id
, 
uöt64_t
 
key
, 
LófPage
* 
out_Àaf_node
) {

371 
i
 = 0;

372 
off_t
 
roŸ_off£t
 = 
dbhódî
[
èbÀ_id
 - 1].root_offset;

374 i‡(
roŸ_off£t
 == 0) {

375  
Ál£
;

378 
NodePage
 
∑ge
;

379 
	`lﬂd_∑ge
(
èbÀ_id
, 
roŸ_off£t
, (
Page
*)&
∑ge
);

381 !
∑ge
.
is_Àaf
) {

382 
I¡î«lPage
* 
öã∫Æ_node
 = (I¡î«lPage*)&
∑ge
;

384 
i
 = 0;

385 
i
 < 
öã∫Æ_node
->
num_keys
) {

386 i‡(
key
 >
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
)) i++;

390 
	`lﬂd_∑ge
(
èbÀ_id
, 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
), (
Page
*)&
∑ge
);

393 
	`mem˝y
(
out_Àaf_node
, &
∑ge
, (
LófPage
));

395  
åue
;

396 
	}
}

402 * 
	$föd
(
èbÀ_id
, 
uöt64_t
 
key
) {

403 
i
 = 0;

404 * 
out_vÆue
;

406 
LófPage
 
Àaf_node
;

407 i‡(!
	`föd_Àaf
(
èbÀ_id
, 
key
, &
Àaf_node
)) {

408  
NULL
;

411 
i
 = 0; i < 
Àaf_node
.
num_keys
; i++) {

412 i‡(
	`LEAF_KEY
(&
Àaf_node
, 
i
Ë=
key
) {

413 
out_vÆue
 = (*)
	`mÆloc
(
SIZE_VALUE
 * ());

414 
	`mem˝y
(
out_vÆue
, 
	`LEAF_VALUE
(&
Àaf_node
, 
i
), 
SIZE_VALUE
);

415  
out_vÆue
;

419  
NULL
;

420 
	}
}

425 
	$cut
–
Àngth
 ) {

426 i‡(
Àngth
 % 2 == 0)

427  
Àngth
/2;

429  
Àngth
/2 + 1;

430 
	}
}

437 
	$gë_À·_ödex
(
I¡î«lPage
* 
∑ª¡
, 
off_t
 
À·_off£t
) {

439 
À·_ödex
 = 0;

440 
À·_ödex
 <
∑ª¡
->
num_keys
 &&

441 
	`INTERNAL_OFFSET
(
∑ª¡
, 
À·_ödex
Ë!
À·_off£t
)

442 
À·_ödex
++;

443  
À·_ödex
;

444 
	}
}

450 
	$ö£π_öto_Àaf
(
èbÀ_id
, 
LófPage
* 
Àaf_node
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

451 
ö£πi⁄_poöt
;

452 
i
;

454 
ö£πi⁄_poöt
 = 0;

455 
ö£πi⁄_poöt
 < 
Àaf_node
->
num_keys
 &&

456 
	`LEAF_KEY
(
Àaf_node
, 
ö£πi⁄_poöt
Ë< 
key
)

457 
ö£πi⁄_poöt
++;

460 
i
 = 
Àaf_node
->
num_keys
 - 1; i >
ö£πi⁄_poöt
; i--) {

461 
	`LEAF_KEY
(
Àaf_node
, 
i
+1) = LEAF_KEY(leaf_node, i);

462 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf_node
, 
i
+1), LEAF_VALUE÷óf_node, i), 
SIZE_VALUE
);

465 
	`LEAF_KEY
(
Àaf_node
, 
ö£πi⁄_poöt
Ë
key
;

466 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf_node
, 
ö£πi⁄_poöt
), 
vÆue
, 
SIZE_VALUE
);

467 
Àaf_node
->
num_keys
++;

470 
	`Êush_∑ge
((
Page
*)
Àaf_node
);

471 
	}
}

478 
	$ö£π_öto_Àaf_a·î_•lôtög
(
èbÀ_id
, 
LófPage
* 
Àaf
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

480 
ö£πi⁄_ödex
, 
•lô
, 
i
, 
j
;

481 
uöt64_t
 
√w_key
;

484 
LófPage
 
√w_Àaf
;

485 
√w_Àaf
.
is_Àaf
 = 
åue
;

486 
√w_Àaf
.
num_keys
 = 0;

488 
ö£πi⁄_ödex
 = 0;

489 
ö£πi⁄_ödex
 < 
‹dî_Àaf
 - 1 && 
	`LEAF_KEY
(
Àaf
, in£πi⁄_ödexË< 
key
)

490 
ö£πi⁄_ödex
++;

492 
•lô
 = 
	`cut
(
‹dî_Àaf
 - 1);

494 i‡(
ö£πi⁄_ödex
 < 
•lô
) {

496 
i
 = 
•lô
 - 1, 
j
 = 0; i < 
‹dî_Àaf
 - 1; i++, j++) {

497 
	`LEAF_KEY
(&
√w_Àaf
, 
j
ËLEAF_KEY(
Àaf
, 
i
);

498 
	`mem˝y
(
	`LEAF_VALUE
(&
√w_Àaf
, 
j
), LEAF_VALUE(
Àaf
, 
i
), 
SIZE_VALUE
);

500 
√w_Àaf
.
num_keys
++;

501 
Àaf
->
num_keys
--;

504 
i
 = 
•lô
 - 2; i >
ö£πi⁄_ödex
; i--) {

505 
	`LEAF_KEY
(
Àaf
, 
i
+1) = LEAF_KEY(leaf, i);

506 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf
, 
i
+1), LEAF_VALUE÷óf, i), 
SIZE_VALUE
);

508 
	`LEAF_KEY
(
Àaf
, 
ö£πi⁄_ödex
Ë
key
;

509 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf
, 
ö£πi⁄_ödex
), 
vÆue
, 
SIZE_VALUE
);

510 
Àaf
->
num_keys
++;

513 
i
 = 
•lô
, 
j
 = 0; i < 
‹dî_Àaf
 - 1; i++, j++) {

514 i‡(
i
 =
ö£πi⁄_ödex
) {

516 
j
++;

518 
	`LEAF_KEY
(&
√w_Àaf
, 
j
ËLEAF_KEY(
Àaf
, 
i
);

519 
	`mem˝y
(
	`LEAF_VALUE
(&
√w_Àaf
, 
j
), LEAF_VALUE(
Àaf
, 
i
), 
SIZE_VALUE
);

521 
√w_Àaf
.
num_keys
++;

522 
Àaf
->
num_keys
--;

524 
	`LEAF_KEY
(&
√w_Àaf
, 
ö£πi⁄_ödex
 - 
•lô
Ë
key
;

525 
	`mem˝y
(
	`LEAF_VALUE
(&
√w_Àaf
, 
ö£πi⁄_ödex
 - 
•lô
), 
vÆue
, 
SIZE_VALUE
);

526 
√w_Àaf
.
num_keys
++;

530 
√w_Àaf
.
fûe_off£t
 = 
	`gë_‰ì_∑ge
();

533 
√w_Àaf
.
siblög
 = 
Àaf
->sibling;

534 
Àaf
->
siblög
 = 
√w_Àaf
.
fûe_off£t
;

537 
i
 = 
Àaf
->
num_keys
; i < 
‹dî_Àaf
 - 1; i++) {

538 
	`LEAF_KEY
(
Àaf
, 
i
) = 0;

539 
	`mem£t
(
	`LEAF_VALUE
(
Àaf
, 
i
), 0, 
SIZE_VALUE
);

541 
i
 = 
√w_Àaf
.
num_keys
; i < 
‹dî_Àaf
 - 1; i++) {

542 
	`LEAF_KEY
(&
√w_Àaf
, 
i
) = 0;

543 
	`mem£t
(
	`LEAF_VALUE
(&
√w_Àaf
, 
i
), 0, 
SIZE_VALUE
);

546 
√w_Àaf
.
∑ª¡
 = 
Àaf
->parent;

548 
	`Êush_∑ge
((
Page
*)
Àaf
);

549 
	`Êush_∑ge
((
Page
*)&
√w_Àaf
);

551 
√w_key
 = 
	`LEAF_KEY
(&
√w_Àaf
, 0);

554 
	`ö£π_öto_∑ª¡
(
èbÀ_id
, (
NodePage
*)
Àaf
, 
√w_key
, (NodePage*)&
√w_Àaf
);

555 
	}
}

561 
	$ö£π_öto_node
(
I¡î«lPage
* 
n
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
) {

562 
i
;

564 
i
 = 
n
->
num_keys
; i > 
À·_ödex
; i--) {

565 
	`INTERNAL_OFFSET
(
n
, 
i
 + 1) = INTERNAL_OFFSET(n, i);

566 
	`INTERNAL_KEY
(
n
, 
i
) = INTERNAL_KEY(n, i - 1);

568 
	`INTERNAL_OFFSET
(
n
, 
À·_ödex
 + 1Ë
right_off£t
;

569 
	`INTERNAL_KEY
(
n
, 
À·_ödex
Ë
key
;

570 
n
->
num_keys
++;

571 
	}
}

577 
	$ö£π_öto_node_a·î_•lôtög
(
èbÀ_id
, 
I¡î«lPage
* 
ﬁd_node
, 
À·_ödex
, 
uöt64_t
 
key
, 
off_t
 
right_off£t
) {

578 
i
, 
j
, 
•lô
, 
k_¥ime
;

579 
uöt64_t
* 
ãmp_keys
;

580 
off_t
* 
ãmp_poöãrs
;

591 
ãmp_poöãrs
 = 
	`mÆloc
–(
‹dî_öã∫Æ
 + 1Ë* (
off_t
) );

592 i‡(
ãmp_poöãrs
 =
NULL
) {

593 
	`≥º‹
("TemporaryÖointersárray for splittingÇodes.");

594 
	`exô
(
EXIT_FAILURE
);

596 
ãmp_keys
 = 
	`mÆloc
–
‹dî_öã∫Æ
 * (
uöt64_t
) );

597 i‡(
ãmp_keys
 =
NULL
) {

598 
	`≥º‹
("Temporary keysárray for splittingÇodes.");

599 
	`exô
(
EXIT_FAILURE
);

602 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
 + 1; i++, j++) {

603 i‡(
j
 =
À·_ödex
 + 1) j++;

604 
ãmp_poöãrs
[
j
] = 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
);

607 
i
 = 0, 
j
 = 0; i < 
ﬁd_node
->
num_keys
; i++, j++) {

608 i‡(
j
 =
À·_ödex
) j++;

609 
ãmp_keys
[
j
] = 
	`INTERNAL_KEY
(
ﬁd_node
, 
i
);

612 
ãmp_poöãrs
[
À·_ödex
 + 1] = 
right_off£t
;

613 
ãmp_keys
[
À·_ödex
] = 
key
;

619 
•lô
 = 
	`cut
(
‹dî_öã∫Æ
);

621 
I¡î«lPage
 
√w_node
;

622 
√w_node
.
num_keys
 = 0;

623 
√w_node
.
is_Àaf
 = 0;

624 
√w_node
.
fûe_off£t
 = 
	`gë_‰ì_∑ge
();

626 
ﬁd_node
->
num_keys
 = 0;

627 
i
 = 0; i < 
•lô
 - 1; i++) {

628 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
Ë
ãmp_poöãrs
[i];

629 
	`INTERNAL_KEY
(
ﬁd_node
, 
i
Ë
ãmp_keys
[i];

630 
ﬁd_node
->
num_keys
++;

632 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
Ë
ãmp_poöãrs
[i];

633 
k_¥ime
 = 
ãmp_keys
[
•lô
 - 1];

634 ++
i
, 
j
 = 0; i < 
‹dî_öã∫Æ
; i++, j++) {

635 
	`INTERNAL_OFFSET
(&
√w_node
, 
j
Ë
ãmp_poöãrs
[
i
];

636 
	`INTERNAL_KEY
(&
√w_node
, 
j
Ë
ãmp_keys
[
i
];

637 
√w_node
.
num_keys
++;

639 
	`INTERNAL_OFFSET
(&
√w_node
, 
j
Ë
ãmp_poöãrs
[
i
];

640 
	`‰ì
(
ãmp_poöãrs
);

641 
	`‰ì
(
ãmp_keys
);

642 
√w_node
.
∑ª¡
 = 
ﬁd_node
->parent;

643 
i
 = 0; i <
√w_node
.
num_keys
; i++) {

644 
NodePage
 
chûd_∑ge
;

645 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(&
√w_node
, 
i
), (
Page
*)&
chûd_∑ge
);

646 
chûd_∑ge
.
∑ª¡
 = 
√w_node
.
fûe_off£t
;

647 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

651 
i
 = 
ﬁd_node
->
num_keys
; i < 
‹dî_öã∫Æ
 - 1; i++) {

652 
	`INTERNAL_OFFSET
(
ﬁd_node
, 
i
+1) = 0;

653 
	`INTERNAL_KEY
(
ﬁd_node
, 
i
) = 0;

656 
i
 = 
√w_node
.
num_keys
; i < 
‹dî_öã∫Æ
 - 1; i++) {

657 
	`INTERNAL_OFFSET
(&
√w_node
, 
i
+1) = 0;

658 
	`INTERNAL_KEY
(&
√w_node
, 
i
) = 0;

662 
	`Êush_∑ge
((
Page
*)&
√w_node
);

663 
	`Êush_∑ge
((
Page
*)
ﬁd_node
);

669 
	`ö£π_öto_∑ª¡
(
èbÀ_id
, (
NodePage
*)
ﬁd_node
, 
k_¥ime
, (NodePage*)&
√w_node
);

670 
	}
}

675 
	$ö£π_öto_∑ª¡
(
èbÀ_id
, 
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
) {

677 
I¡î«lPage
 
∑ª¡_node
;

680 i‡(
À·
->
∑ª¡
 == 0) {

681 
	`ö£π_öto_√w_roŸ
(
èbÀ_id
, 
À·
, 
key
, 
right
);

685 
	`lﬂd_∑ge
(
À·
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

695 
À·_ödex
 = 
	`gë_À·_ödex
(&
∑ª¡_node
, 
À·
->
fûe_off£t
);

700 i‡(
∑ª¡_node
.
num_keys
 < 
‹dî_öã∫Æ
 - 1) {

701 
	`ö£π_öto_node
(&
∑ª¡_node
, 
À·_ödex
, 
key
, 
right
->
fûe_off£t
);

702 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

710  
	`ö£π_öto_node_a·î_•lôtög
(
èbÀ_id
, &
∑ª¡_node
, 
À·_ödex
, 
key
, 
right
->
fûe_off£t
);

711 
	}
}

717 
	$ö£π_öto_√w_roŸ
(
èbÀ_id
, 
NodePage
* 
À·
, 
uöt64_t
 
key
, NodePage* 
right
) {

719 
I¡î«lPage
 
roŸ_node
;

720 
	`mem£t
(&
roŸ_node
, 0, (
I¡î«lPage
));

721 
roŸ_node
.
fûe_off£t
 = 
	`gë_‰ì_∑ge
();

722 
	`INTERNAL_KEY
(&
roŸ_node
, 0Ë
key
;

723 
	`INTERNAL_OFFSET
(&
roŸ_node
, 0Ë
À·
->
fûe_off£t
;

724 
	`INTERNAL_OFFSET
(&
roŸ_node
, 1Ë
right
->
fûe_off£t
;

725 
roŸ_node
.
num_keys
++;

726 
roŸ_node
.
∑ª¡
 = 0;

727 
roŸ_node
.
is_Àaf
 = 0;

728 
À·
->
∑ª¡
 = 
roŸ_node
.
fûe_off£t
;

729 
right
->
∑ª¡
 = 
roŸ_node
.
fûe_off£t
;

731 
	`Êush_∑ge
((
Page
*)&
roŸ_node
);

732 
	`Êush_∑ge
((
Page
*)
À·
);

733 
	`Êush_∑ge
((
Page
*)
right
);

735 
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
 = 
roŸ_node
.
fûe_off£t
;

736 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

737 
	}
}

741 
	$°¨t_√w_åì
(
èbÀ_id
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

742 
LófPage
 
roŸ_node
;

744 
off_t
 
roŸ_off£t
 = 
	`gë_‰ì_∑ge
();

745 
roŸ_node
.
fûe_off£t
 = 
roŸ_off£t
;

747 
roŸ_node
.
∑ª¡
 = 0;

748 
roŸ_node
.
is_Àaf
 = 1;

749 
roŸ_node
.
num_keys
 = 1;

750 
	`LEAF_KEY
(&
roŸ_node
, 0Ë
key
;

751 
roŸ_node
.
siblög
 = 0;

752 
	`mem˝y
(
	`LEAF_VALUE
(&
roŸ_node
, 0), 
vÆue
, 
SIZE_VALUE
);

754 
	`Êush_∑ge
((
Page
*)&
roŸ_node
);

756 
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
 =Ñoot_offset;

757 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

758 
	}
}

766 
	$ö£π
(
èbÀ_id
, 
uöt64_t
 
key
, c⁄° * 
vÆue
) {

770 * 
vÆue_found
 = 
NULL
;

772 i‡((
vÆue_found
 = 
	`föd
(
èbÀ_id
, 
key
)) != 0) {

773 
	`‰ì
(
vÆue_found
);

780 i‡(
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
 == 0) {

781 
	`°¨t_√w_åì
(
èbÀ_id
, 
key
, 
vÆue
);

789 
LófPage
 
Àaf_node
;

790 
	`föd_Àaf
(
èbÀ_id
, 
key
, &
Àaf_node
);

795 i‡(
Àaf_node
.
num_keys
 < 
‹dî_Àaf
 - 1) {

796 
	`ö£π_öto_Àaf
(&
Àaf_node
, 
key
, 
vÆue
);

800 
	`ö£π_öto_Àaf_a·î_•lôtög
(
èbÀ_id
, &
Àaf_node
, 
key
, 
vÆue
);

803 
	}
}

813 
	$gë_√ighb‹_ödex
(
èbÀ_id
, 
NodePage
* 
node_∑ge
) {

815 
i
;

823 
I¡î«lPage
 
∑ª¡_node
;

824 
	`lﬂd_∑ge
(
èbÀ_id
, 
node_∑ge
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

825 
i
 = 0; i <
∑ª¡_node
.
num_keys
; i++)

826 i‡(
	`INTERNAL_OFFSET
(&
∑ª¡_node
, 
i
Ë=
node_∑ge
->
fûe_off£t
)

827  
i
 - 1;

830 
	`as£π
("Search forÇonexistentÖointerÅoÇode inÖarent.");

832 
	}
}

834 
	$ªmove_íåy_‰om_node
(
NodePage
* 
node_∑ge
, 
uöt64_t
 
key
) {

836 
i
;

837 
key_idx
 = 0;

839 i‡(
node_∑ge
->
is_Àaf
) {

840 
LófPage
* 
Àaf_node
 = (LófPage*)
node_∑ge
;

843 
i
 = 0; i < 
Àaf_node
->
num_keys
; i++) {

844 i‡(
	`LEAF_KEY
(
Àaf_node
, 
i
Ë=
key
) {

845 
key_idx
 = 
i
;

849 i‡(
i
 =
Àaf_node
->
num_keys
) {

850 
	`as£π
("remove_entry_from_node:Ço key inÅhisÖage");

854 
i
 = 
key_idx
; i < 
Àaf_node
->
num_keys
 - 1; i++) {

855 
	`LEAF_KEY
(
Àaf_node
, 
i
) = LEAF_KEY(leaf_node, i+1);

856 
	`mem˝y
(
	`LEAF_VALUE
(
Àaf_node
, 
i
), LEAF_VALUE÷óf_node, i+1), 
SIZE_VALUE
);

859 
	`LEAF_KEY
(
Àaf_node
,Üóf_node->
num_keys
 - 1) = 0;

860 
	`mem£t
(
	`LEAF_VALUE
(
Àaf_node
,Üóf_node->
num_keys
 - 1), 0, 
SIZE_VALUE
);

862 
Àaf_node
->
num_keys
--;

865 
I¡î«lPage
* 
öã∫Æ_node
 = (I¡î«lPage*)
node_∑ge
;

868 
i
 = 0; i < 
öã∫Æ_node
->
num_keys
; i++) {

869 i‡(
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
Ë=
key
) {

870 
key_idx
 = 
i
;

874 i‡(
i
 =
öã∫Æ_node
->
num_keys
) {

875 
	`as£π
("remove_entry_from_node:Ço key inÅhisÖage");

879 
i
 = 
key_idx
; i < 
öã∫Æ_node
->
num_keys
 - 1; i++) {

880 
	`INTERNAL_KEY
(
öã∫Æ_node
, 
i
) = INTERNAL_KEY(internal_node, i+1);

881 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, 
i
+1) = INTERNAL_OFFSET(internal_node, i+2);

884 
	`INTERNAL_KEY
(
öã∫Æ_node
, i¡î«l_node->
num_keys
 - 1) = 0;

885 
	`INTERNAL_OFFSET
(
öã∫Æ_node
, i¡î«l_node->
num_keys
) = 0;

887 
öã∫Æ_node
->
num_keys
--;

890 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

891 
	}
}

893 
	$adju°_roŸ
(
èbÀ_id
) {

895 
NodePage
 
roŸ_∑ge
;

896 
	`lﬂd_∑ge
(
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
, (
Page
*)&
roŸ_∑ge
);

903 i‡(
roŸ_∑ge
.
num_keys
 > 0)

913 i‡(!
roŸ_∑ge
.
is_Àaf
) {

914 
I¡î«lPage
* 
roŸ_node
 = (I¡î«lPage*)&
roŸ_∑ge
;

915 
dbhódî
.
roŸ_off£t
 = 
	`INTERNAL_OFFSET
(
roŸ_node
, 0);

917 
NodePage
 
node_∑ge
;

918 
	`lﬂd_∑ge
(
dbhódî
.
roŸ_off£t
, (
Page
*)&
node_∑ge
);

919 
node_∑ge
.
∑ª¡
 = 0;

921 
	`Êush_∑ge
((
Page
*)&
node_∑ge
);

922 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

929 
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
 = 0;

930 
	`Êush_∑ge
((
Page
*)&
dbhódî
);

933 
	`put_‰ì_∑ge
(
èbÀ_id
, 
roŸ_∑ge
.
fûe_off£t
);

934 
	}
}

942 
	$cﬂÀs˚_nodes
(
èbÀ_id
, 
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
, 
√ighb‹_ödex
, 
k_¥ime
) {

944 
i
, 
j
, 
√ighb‹_ö£πi⁄_ödex
, 
n_íd
;

945 
NodePage
* 
tmp
;

951 i‡(
√ighb‹_ödex
 == -1) {

952 
tmp
 = 
node_∑ge
;

953 
node_∑ge
 = 
√ighb‹_∑ge
;

954 
√ighb‹_∑ge
 = 
tmp
;

963 
√ighb‹_ö£πi⁄_ödex
 = 
√ighb‹_∑ge
->
num_keys
;

970 i‡(!
node_∑ge
->
is_Àaf
) {

971 
I¡î«lPage
* 
node
 = (I¡î«lPage*)
node_∑ge
;

972 
I¡î«lPage
* 
√ighb‹_node
 = (I¡î«lPage*)
√ighb‹_∑ge
;

977 
	`INTERNAL_KEY
(
√ighb‹_node
, 
√ighb‹_ö£πi⁄_ödex
Ë
k_¥ime
;

978 
√ighb‹_node
->
num_keys
++;

980 
n_íd
 = 
node
->
num_keys
;

982 
i
 = 
√ighb‹_ö£πi⁄_ödex
 + 1, 
j
 = 0; j < 
n_íd
; i++, j++) {

983 
	`INTERNAL_KEY
(
√ighb‹_node
, 
i
ËINTERNAL_KEY(
node
, 
j
);

984 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
ËINTERNAL_OFFSET(
node
, 
j
);

985 
√ighb‹_node
->
num_keys
++;

986 
node
->
num_keys
--;

993 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
ËINTERNAL_OFFSET(
node
, 
j
);

998 
i
 = 0; i < 
√ighb‹_node
->
num_keys
 + 1; i++) {

999 
NodePage
 
chûd_∑ge
;

1000 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
), (
Page
*)&
chûd_∑ge
);

1001 
chûd_∑ge
.
∑ª¡
 = 
√ighb‹_node
->
fûe_off£t
;

1002 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

1005 
	`Êush_∑ge
((
Page
*)
√ighb‹_node
);

1007 
	`put_‰ì_∑ge
(
node
->
fûe_off£t
);

1017 
LófPage
* 
node
 = (LófPage*)
node_∑ge
;

1018 
LófPage
* 
√ighb‹_node
 = (LófPage*)
√ighb‹_∑ge
;

1020 
i
 = 
√ighb‹_ö£πi⁄_ödex
, 
j
 = 0; j < 
node
->
num_keys
; i++, j++) {

1021 
	`LEAF_KEY
(
√ighb‹_node
, 
i
ËLEAF_KEY(
node
, 
j
);

1022 
	`mem˝y
(
	`LEAF_VALUE
(
√ighb‹_node
, 
i
), LEAF_VALUE(
node
, 
j
), 
SIZE_VALUE
);

1023 
√ighb‹_node
->
num_keys
++;

1025 
√ighb‹_node
->
siblög
 = 
node
->sibling;

1027 
	`Êush_∑ge
((
Page
*)
√ighb‹_node
);

1029 
	`put_‰ì_∑ge
(
node
->
fûe_off£t
);

1032 
NodePage
 
∑ª¡_node
;

1033 
	`lﬂd_∑ge
(
node_∑ge
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1034 
	`dñëe_íåy
(
èbÀ_id
, &
∑ª¡_node
, 
k_¥ime
);

1035 
	}
}

1043 
	$rdi°ribuã_nodes
(
èbÀ_id
, 
NodePage
* 
node_∑ge
, NodePage* 
√ighb‹_∑ge
,

1044 
√ighb‹_ödex
,

1045 
k_¥ime_ödex
, 
k_¥ime
) {

1047 
i
;

1054 i‡(
√ighb‹_ödex
 != -1) {

1055 i‡(!
node_∑ge
->
is_Àaf
) {

1056 
I¡î«lPage
* 
node
 = (I¡î«lPage*)
node_∑ge
;

1057 
I¡î«lPage
* 
√ighb‹_node
 = (I¡î«lPage*)
√ighb‹_∑ge
;

1058 
	`INTERNAL_OFFSET
(
node
,Çode->
num_keys
 + 1) = INTERNAL_OFFSET(node,Çode->num_keys);

1060 
i
 = 
node
->
num_keys
; i > 0; i--) {

1061 
	`INTERNAL_KEY
(
node
, 
i
) = INTERNAL_KEY(node, i - 1);

1062 
	`INTERNAL_OFFSET
(
node
, 
i
) = INTERNAL_OFFSET(node, i - 1);

1064 
	`INTERNAL_OFFSET
(
node
, 0ËINTERNAL_OFFSET(
√ighb‹_node
,Çeighb‹_node->
num_keys
);

1065 
NodePage
 
chûd_∑ge
;

1066 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
node
, 0), (
Page
*)&
chûd_∑ge
);

1067 
chûd_∑ge
.
∑ª¡
 = 
node
->
fûe_off£t
;

1068 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

1070 
	`INTERNAL_OFFSET
(
√ighb‹_node
,Çeighb‹_node->
num_keys
) = 0;

1071 
	`INTERNAL_KEY
(
node
, 0Ë
k_¥ime
;

1073 
I¡î«lPage
 
∑ª¡_node
;

1074 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1075 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
ËINTERNAL_KEY(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1);

1076 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1081 
node
->
num_keys
++;

1082 
√ighb‹_node
->
num_keys
--;

1084 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1085 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1088 
LófPage
* 
node
 = (LófPage*)
node_∑ge
;

1089 
LófPage
* 
√ighb‹_node
 = (LófPage*)
√ighb‹_∑ge
;

1091 
i
 = 
node
->
num_keys
; i > 0; i--) {

1092 
	`LEAF_KEY
(
node
, 
i
) = LEAF_KEY(node, i - 1);

1093 
	`mem˝y
(
	`LEAF_VALUE
(
node
, 
i
), LEAF_VALUE“ode, i - 1), 
SIZE_VALUE
);

1095 
	`mem˝y
(
	`LEAF_VALUE
(
node
, 0), LEAF_VALUE(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1), 
SIZE_VALUE
);

1096 
	`mem£t
(
	`LEAF_VALUE
(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1), 0, 
SIZE_VALUE
);

1097 
	`LEAF_KEY
(
node
, 0ËLEAF_KEY(
√ighb‹_node
,Çeighb‹_node->
num_keys
 - 1);

1099 
I¡î«lPage
 
∑ª¡_node
;

1100 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1101 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
Ë
	`LEAF_KEY
(
node
, 0);

1102 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1107 
node
->
num_keys
++;

1108 
√ighb‹_node
->
num_keys
--;

1110 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1111 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1122 i‡(
node_∑ge
->
is_Àaf
) {

1123 
LófPage
* 
node
 = (LófPage*)
node_∑ge
;

1124 
LófPage
* 
√ighb‹_node
 = (LófPage*)
√ighb‹_∑ge
;;

1126 
	`LEAF_KEY
(
node
,Çode->
num_keys
ËLEAF_KEY(
√ighb‹_node
, 0);

1127 
	`mem˝y
(
	`LEAF_VALUE
(
node
,Çode->
num_keys
), LEAF_VALUE(
√ighb‹_node
, 0), 
SIZE_VALUE
);

1129 
I¡î«lPage
 
∑ª¡_node
;

1130 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1131 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
Ë
	`LEAF_KEY
(
√ighb‹_node
, 1);

1132 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1134 
i
 = 0; i < 
√ighb‹_node
->
num_keys
 - 1; i++) {

1135 
	`LEAF_KEY
(
√ighb‹_node
, 
i
) = LEAF_KEY(neighbor_node, i + 1);

1136 
	`mem˝y
(
	`LEAF_VALUE
(
√ighb‹_node
, 
i
), LEAF_VALUE“eighb‹_node, i + 1), 
SIZE_VALUE
);

1142 
node
->
num_keys
++;

1143 
√ighb‹_node
->
num_keys
--;

1145 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1146 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1150 
I¡î«lPage
* 
node
 = (I¡î«lPage*)
node_∑ge
;

1151 
I¡î«lPage
* 
√ighb‹_node
 = (I¡î«lPage*)
√ighb‹_∑ge
;

1153 
	`INTERNAL_KEY
(
node
,Çode->
num_keys
Ë
k_¥ime
;

1154 
	`INTERNAL_OFFSET
(
node
,Çode->
num_keys
 + 1ËINTERNAL_OFFSET(
√ighb‹_node
, 0);

1156 
NodePage
 
chûd_∑ge
;

1157 
	`lﬂd_∑ge
(
	`INTERNAL_OFFSET
(
node
,Çode->
num_keys
 + 1), (
Page
*)&
chûd_∑ge
);

1158 
chûd_∑ge
.
∑ª¡
 = 
node
->
fûe_off£t
;

1159 
	`Êush_∑ge
((
Page
*)&
chûd_∑ge
);

1161 
I¡î«lPage
 
∑ª¡_node
;

1162 
	`lﬂd_∑ge
(
node
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1163 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
ËINTERNAL_KEY(
√ighb‹_node
, 0);

1164 
	`Êush_∑ge
((
Page
*)&
∑ª¡_node
);

1166 
i
 = 0; i < 
√ighb‹_node
->
num_keys
 - 1; i++) {

1167 
	`INTERNAL_KEY
(
√ighb‹_node
, 
i
) = INTERNAL_KEY(neighbor_node, i + 1);

1168 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
) = INTERNAL_OFFSET(neighbor_node, i + 1);

1171 
	`INTERNAL_OFFSET
(
√ighb‹_node
, 
i
) = INTERNAL_OFFSET(neighbor_node, i + 1);

1178 
node
->
num_keys
++;

1179 
√ighb‹_node
->
num_keys
--;

1181 
	`Êush_∑ge
((
Page
*)
node_∑ge
);

1182 
	`Êush_∑ge
((
Page
*)
√ighb‹_∑ge
);

1186 
	}
}

1194 
	$dñëe_íåy
(
èbÀ_id
, 
NodePage
* 
node_∑ge
, 
uöt64_t
 
key
) {

1196 
mö_keys
;

1197 
off_t
 
√ighb‹_off£t
;

1198 
√ighb‹_ödex
;

1199 
k_¥ime_ödex
, 
k_¥ime
;

1200 
ˇ∑côy
;

1204 
	`ªmove_íåy_‰om_node
(
node_∑ge
, 
key
);

1208 i‡(
dbhódî
[
èbÀ_id
 - 1].
roŸ_off£t
 =
node_∑ge
->
fûe_off£t
) {

1209 
	`adju°_roŸ
(
èbÀ_id
);

1221 
mö_keys
 = 
node_∑ge
->
is_Àaf
 ? 
	`cut
(
‹dî_Àaf
 - 1Ë: cut(
‹dî_öã∫Æ
) - 1;

1227 i‡(
node_∑ge
->
num_keys
 >
mö_keys
)

1242 
√ighb‹_ödex
 = 
	`gë_√ighb‹_ödex
(
èbÀ_id
, 
node_∑ge
);

1243 
k_¥ime_ödex
 = 
√ighb‹_ödex
 == -1 ? 0 :Çeighbor_index;

1245 
I¡î«lPage
 
∑ª¡_node
;

1246 
	`lﬂd_∑ge
(
èbÀ_id
, 
node_∑ge
->
∑ª¡
, (
Page
*)&
∑ª¡_node
);

1248 
k_¥ime
 = 
	`INTERNAL_KEY
(&
∑ª¡_node
, 
k_¥ime_ödex
);

1249 
√ighb‹_off£t
 = 
√ighb‹_ödex
 =-1 ? 
	`INTERNAL_OFFSET
(&
∑ª¡_node
, 1) :

1250 
	`INTERNAL_OFFSET
(&
∑ª¡_node
, 
√ighb‹_ödex
);

1252 
ˇ∑côy
 = 
node_∑ge
->
is_Àaf
 ? 
‹dî_Àaf
 : 
‹dî_öã∫Æ
 - 1;

1254 
NodePage
 
√ighb‹_∑ge
;

1255 
	`lﬂd_∑ge
(
èbÀ_id
, 
√ighb‹_off£t
, (
Page
*)&
√ighb‹_∑ge
);

1258 i‡(
√ighb‹_∑ge
.
num_keys
 + 
node_∑ge
->num_key†< 
ˇ∑côy
)

1259 
	`cﬂÀs˚_nodes
(
èbÀ_id
, 
node_∑ge
, &
√ighb‹_∑ge
, 
√ighb‹_ödex
, 
k_¥ime
);

1264 
	`ªdi°ribuã_nodes
(
èbÀ_id
, 
node_∑ge
, &
√ighb‹_∑ge
, 
√ighb‹_ödex
, 
k_¥ime_ödex
, 
k_¥ime
);

1267 
	}
}

1271 
	$dñëe
(
èbÀ_id
, 
uöt64_t
 
key
) {

1273 * 
vÆue_found
 = 
NULL
;

1274 i‡((
vÆue_found
 = 
	`föd
(
èbÀ_id
, 
key
)) == 0) {

1276 
	`‰ì
(
vÆue_found
);

1280 
LófPage
 
Àaf_node
;

1281 
	`föd_Àaf
(
èbÀ_id
, 
key
, &
Àaf_node
);

1283 
	`dñëe_íåy
(
èbÀ_id
, (
NodePage
*)&
Àaf_node
, 
key
);

1286 
	}
}

1289 
	$öô_db
(
num_buf
){

1291 
buf_mgr
 = (
Buf„r
 *)
	`ˇŒoc
(
num_buf
, (Buffer));

1293 if(
buf_mgr
 =
NULL
){

1299 
buf_size
 = 
num_buf
;

1302 
	}
}

1304 
	$˛o£_èbÀ
(
èbÀ_id
){

1305 
i
;

1308 if(
èbÀ_id
 < 1 ||ÅabÀ_id > 10 || 
buf_size
 =-1 || 
buf_mgr
 =
NULL
){

1312 
i
 = 0; i < 
buf_size
; i++){

1313 if(
buf_mgr
[
i
].
èbÀ_id
 ==Åable_id){

1315 if(
buf_mgr
[
i
].
is_dúty
 == 1){

1316 
	`Êush_∑ge
(
èbÀ_id
, 
buf_mgr
[
i
].
‰ame
);

1319 
	`mem£t
(
buf_mgr
+
i
, 0, (
Buf„r
));

1324 
èbÀ_ids
[
èbÀ_id
 -1] = 0;

1327 
	}
}

1329 
	$shutdown_db
(){

1330 
i
,
èbÀ_id
 = -1;

1333 if(
buf_size
 =-1 || 
buf_mgr
 =
NULL
){

1337 
i
 = 0; i < 
buf_size
; i++){

1339 if(
buf_mgr
[
i
].
is_dúty
 == 1){

1340 
èbÀ_id
 = 
buf_mgr
[
i
].table_id;

1341 
	`Êush_∑ge
(
èbÀ_id
, 
buf_mgr
[
i
].
‰ame
);

1346 
	`‰ì
(
buf_mgr
);

1349 
	}
}

	@src/file.c

1 
	~<sys/ty≥s.h
>

2 
	~<f˙é.h
>

3 
	~<°dlib.h
>

4 
	~<as£π.h
>

5 
	~<°dio.h
>

6 
	~<uni°d.h
>

7 
	~<°rög.h
>

8 
	~"fûe.h
"

10 
HódîPage
 
	gdbhódî
[10];

11 
	gdbfûe
[10];

15 
off_t
 
	$gë_‰ì_∑ge
(
èbÀ_id
) {

16 
off_t
 
‰ì∑ge_off£t
;

18 
‰ì∑ge_off£t
 = 
dbhódî
[
èbÀ_id
 - 1].
‰ìli°
;

19 i‡(
‰ì∑ge_off£t
 == 0) {

21 
	`ex∑nd_fûe
(
dbhódî
[
èbÀ_id
 - 1].
num_∑ges
);

22 
‰ì∑ge_off£t
 = 
dbhódî
[
èbÀ_id
 - 1].
‰ìli°
;

25 
FªePage
 
‰ì∑ge
;

26 
	`lﬂd_∑ge
(
èbÀ_id
, 
‰ì∑ge_off£t
, (
Page
*)&
‰ì∑ge
);

27 
dbhódî
[
èbÀ_id
 - 1].
‰ìli°
 = 
‰ì∑ge
.
√xt
;

29 
	`Êush_∑ge
(
èbÀ_id
, (
Page
*)(
dbhódî
 +Åable_id - 1));

31  
‰ì∑ge_off£t
;

32 
	}
}

35 
	$put_‰ì_∑ge
(
èbÀ_id
, 
off_t
 
∑ge_off£t
) {

36 
FªePage
 
‰ì∑ge
;

37 
	`mem£t
(&
‰ì∑ge
, 0, 
PAGE_SIZE
);

39 
‰ì∑ge
.
√xt
 = 
dbhódî
[
èbÀ_id
 - 1].
‰ìli°
;

40 
‰ì∑ge
.
fûe_off£t
 = 
∑ge_off£t
;

41 
	`Êush_∑ge
(
èbÀ_id
, (
Page
*)&
‰ì∑ge
);

43 
dbhódî
[
èbÀ_id
 - 1].
‰ìli°
 = 
∑ge_off£t
;

45 
	`Êush_∑ge
(
èbÀ_id
, (
Page
*)(
dbhódî
 +Åable_id - 1);

46 
	}
}

49 
	$ex∑nd_fûe
(
èbÀ_id
, 
size_t
 
˙t_∑ge_to_ex∑nd
) {

50 
off_t
 
off£t
 = 
dbhódî
[
èbÀ_id
 - 1].
num_∑ges
 * 
PAGE_SIZE
;

52 i‡(
dbhódî
[
èbÀ_id
 - 1].
num_∑ges
 > 1024 * 1024) {

54 
	`as£π
("Test: youáreálready havingá DB file overÅhan 4GB");

57 
i
;

58 
i
 = 0; i < 
˙t_∑ge_to_ex∑nd
; i++) {

59 
	`put_‰ì_∑ge
(
off£t
);

60 
dbhódî
[
èbÀ_id
 - 1].
num_∑ges
++;

61 
off£t
 +
PAGE_SIZE
;

64 
	`Êush_∑ge
(
èbÀ_id
, (
Page
*)(
dbhódî
 +Åable_id - 1);

65 
	}
}

67 
	$lﬂd_∑ge
(
èbÀ_id
, 
off_t
 
off£t
, 
Page
* 
∑ge
) {

68 
	`l£ek
(
dbfûe
[
èbÀ_id
 - 1], 
off£t
, 
SEEK_SET
);

69 
	`ªad
(
dbfûe
[
èbÀ_id
 - 1], 
∑ge
, 
PAGE_SIZE
);

70 
∑ge
->
fûe_off£t
 = 
off£t
;

71 
	}
}

73 
	$Êush_∑ge
(
èbÀ_id
, 
Page
* 
∑ge
) {

74 
	`l£ek
(
dbfûe
[
èbÀ_id
 - 1], 
∑ge
->
fûe_off£t
, 
SEEK_SET
);

75 
	`wrôe
(
dbfûe
[
èbÀ_id
 - 1], 
∑ge
, 
PAGE_SIZE
);

76 
	}
}

	@src/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<f˙é.h
>

4 
	~<uni°d.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<öây≥s.h
>

7 
	~"b±.h
"

8 
	~"fûe.h
"

11 
	$maö
–
¨gc
, ** 
¨gv
 ) {

12 
uöt64_t
 
öput_key
;

13 
öput_vÆue
[
SIZE_VALUE
];

14 
ö°ru˘i⁄
;

16 
	`li˚n£_nŸi˚
();

17 
	`ußge_1
();

18 
	`ußge_2
();

20 
	`›í_db
("test.db");

21 
	`¥ötf
("> ");

22 
	`sˇnf
("%c", &
ö°ru˘i⁄
Ë!
EOF
) {

23 
ö°ru˘i⁄
) {

25 
	`sˇnf
("%" 
PRIu64
 " %s", &
öput_key
, 
öput_vÆue
);

26 
	`ö£π
(
öput_key
, 
öput_vÆue
);

27 
	`¥öt_åì
();

30 
	`sˇnf
("%" 
PRIu64
 "", &
öput_key
);

31 
	`dñëe
(
öput_key
);

32 
	`¥öt_åì
();

36 
	`sˇnf
("%" 
PRIu64
 "", &
öput_key
);

37 
	`föd_™d_¥öt
(
öput_key
);

40 
	`gëch¨
() != ()'\n');

41  
EXIT_SUCCESS
;

44 
	`¥öt_åì
();

47 
	`ußge_2
();

50 
	`gëch¨
() != ()'\n');

51 
	`¥ötf
("> ");

53 
	`¥ötf
("\n");

55 
	`˛o£_db
();

57  
EXIT_SUCCESS
;

58 
	}
}

	@
1
.
0
5
61
include/bpt.h
include/file.h
src/bpt.c
src/file.c
src/main.c
